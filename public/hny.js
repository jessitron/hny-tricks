(() => {

      var $parcel$global = globalThis;
    
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequirecdde"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequirecdde"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("6Wt0I", function(module, exports) {
/////////////////////////////////////////////////////////////////////////////////
/* UAParser.js v1.0.39
   Copyright Â© 2012-2021 Faisal Salman <f@faisalman.com>
   MIT License */ /*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Demo   : https://faisalman.github.io/ua-parser-js
   Source : https://github.com/faisalman/ua-parser-js */ /////////////////////////////////////////////////////////////////////////////////
(function(window1, undefined) {
    "use strict";
    //////////////
    // Constants
    /////////////
    var LIBVERSION = "1.0.39", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 500;
    var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS", SUFFIX_BROWSER = " Browser";
    ///////////
    // Helper
    //////////
    var extend = function(regexes, extensions) {
        var mergedRegexes = {};
        for(var i in regexes)if (extensions[i] && extensions[i].length % 2 === 0) mergedRegexes[i] = extensions[i].concat(regexes[i]);
        else mergedRegexes[i] = regexes[i];
        return mergedRegexes;
    }, enumerize = function(arr) {
        var enums = {};
        for(var i = 0; i < arr.length; i++)enums[arr[i].toUpperCase()] = arr[i];
        return enums;
    }, has = function(str1, str2) {
        return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
    }, lowerize = function(str) {
        return str.toLowerCase();
    }, majorize = function(version) {
        return typeof version === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined;
    }, trim = function(str, len) {
        if (typeof str === STR_TYPE) {
            str = str.replace(/^\s\s*/, EMPTY);
            return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
    };
    ///////////////
    // Map helper
    //////////////
    var rgxMapper = function(ua, arrays) {
        var i = 0, j, k, p, q, matches, match;
        // loop through all regexes maps
        while(i < arrays.length && !matches){
            var regex = arrays[i], props = arrays[i + 1]; // odd sequence (1,3,5,..)
            j = k = 0;
            // try matching uastring with regexes
            while(j < regex.length && !matches){
                if (!regex[j]) break;
                matches = regex[j++].exec(ua);
                if (!!matches) for(p = 0; p < props.length; p++){
                    match = matches[++k];
                    q = props[p];
                    // check if given property is actually array
                    if (typeof q === OBJ_TYPE && q.length > 0) {
                        if (q.length === 2) {
                            if (typeof q[1] == FUNC_TYPE) // assign modified match
                            this[q[0]] = q[1].call(this, match);
                            else // assign given value, ignore regex match
                            this[q[0]] = q[1];
                        } else if (q.length === 3) {
                            // check whether function or regex
                            if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) // call function (usually string mapper)
                            this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                            else // sanitize match using given regex
                            this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                        } else if (q.length === 4) this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                    } else this[q] = match ? match : undefined;
                }
            }
            i += 2;
        }
    }, strMapper = function(str, map) {
        for(var i in map){
            // check if current value is array
            if (typeof map[i] === OBJ_TYPE && map[i].length > 0) for(var j = 0; j < map[i].length; j++){
                if (has(map[i][j], str)) return i === UNKNOWN ? undefined : i;
            }
            else if (has(map[i], str)) return i === UNKNOWN ? undefined : i;
        }
        return map.hasOwnProperty("*") ? map["*"] : str;
    };
    ///////////////
    // String map
    //////////////
    // Safari < 3.0
    var oldSafariMap = {
        "1.0": "/8",
        "1.2": "/1",
        "1.3": "/3",
        "2.0": "/412",
        "2.0.2": "/416",
        "2.0.3": "/417",
        "2.0.4": "/419",
        "?": "/"
    }, windowsVersionMap = {
        "ME": "4.90",
        "NT 3.11": "NT3.51",
        "NT 4.0": "NT4.0",
        "2000": "NT 5.0",
        "XP": [
            "NT 5.1",
            "NT 5.2"
        ],
        "Vista": "NT 6.0",
        "7": "NT 6.1",
        "8": "NT 6.2",
        "8.1": "NT 6.3",
        "10": [
            "NT 6.4",
            "NT 10.0"
        ],
        "RT": "ARM"
    };
    //////////////
    // Regex map
    /////////////
    var regexes = {
        browser: [
            [
                /\b(?:crmo|crios)\/([\w\.]+)/i // Chrome for Android/iOS
            ],
            [
                VERSION,
                [
                    NAME,
                    "Chrome"
                ]
            ],
            [
                /edg(?:e|ios|a)?\/([\w\.]+)/i // Microsoft Edge
            ],
            [
                VERSION,
                [
                    NAME,
                    "Edge"
                ]
            ],
            [
                // Presto based
                /(opera mini)\/([-\w\.]+)/i,
                /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i // Opera
            ],
            [
                NAME,
                VERSION
            ],
            [
                /opios[\/ ]+([\w\.]+)/i // Opera mini on iphone >= 8.0
            ],
            [
                VERSION,
                [
                    NAME,
                    OPERA + " Mini"
                ]
            ],
            [
                /\bop(?:rg)?x\/([\w\.]+)/i // Opera GX
            ],
            [
                VERSION,
                [
                    NAME,
                    OPERA + " GX"
                ]
            ],
            [
                /\bopr\/([\w\.]+)/i // Opera Webkit
            ],
            [
                VERSION,
                [
                    NAME,
                    OPERA
                ]
            ],
            [
                // Mixed
                /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i // Baidu
            ],
            [
                VERSION,
                [
                    NAME,
                    "Baidu"
                ]
            ],
            [
                /(kindle)\/([\w\.]+)/i,
                /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,
                // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir
                // Trident based
                /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,
                /(?:ms|\()(ie) ([\w\.]+)/i,
                // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
                /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio)\/([-\w\.]+)/i,
                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio
                /(heytap|ovi)browser\/([\d\.]+)/i,
                /(weibo)__([\d\.]+)/i // Weibo
            ],
            [
                NAME,
                VERSION
            ],
            [
                /quark(?:pc)?\/([-\w\.]+)/i // Quark
            ],
            [
                VERSION,
                [
                    NAME,
                    "Quark"
                ]
            ],
            [
                /\bddg\/([\w\.]+)/i // DuckDuckGo
            ],
            [
                VERSION,
                [
                    NAME,
                    "DuckDuckGo"
                ]
            ],
            [
                /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i // UCBrowser
            ],
            [
                VERSION,
                [
                    NAME,
                    "UC" + BROWSER
                ]
            ],
            [
                /microm.+\bqbcore\/([\w\.]+)/i,
                /\bqbcore\/([\w\.]+).+microm/i,
                /micromessenger\/([\w\.]+)/i // WeChat
            ],
            [
                VERSION,
                [
                    NAME,
                    "WeChat"
                ]
            ],
            [
                /konqueror\/([\w\.]+)/i // Konqueror
            ],
            [
                VERSION,
                [
                    NAME,
                    "Konqueror"
                ]
            ],
            [
                /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i // IE11
            ],
            [
                VERSION,
                [
                    NAME,
                    "IE"
                ]
            ],
            [
                /ya(?:search)?browser\/([\w\.]+)/i // Yandex
            ],
            [
                VERSION,
                [
                    NAME,
                    "Yandex"
                ]
            ],
            [
                /slbrowser\/([\w\.]+)/i // Smart Lenovo Browser
            ],
            [
                VERSION,
                [
                    NAME,
                    "Smart Lenovo " + BROWSER
                ]
            ],
            [
                /(avast|avg)\/([\w\.]+)/i // Avast/AVG Secure Browser
            ],
            [
                [
                    NAME,
                    /(.+)/,
                    "$1 Secure " + BROWSER
                ],
                VERSION
            ],
            [
                /\bfocus\/([\w\.]+)/i // Firefox Focus
            ],
            [
                VERSION,
                [
                    NAME,
                    FIREFOX + " Focus"
                ]
            ],
            [
                /\bopt\/([\w\.]+)/i // Opera Touch
            ],
            [
                VERSION,
                [
                    NAME,
                    OPERA + " Touch"
                ]
            ],
            [
                /coc_coc\w+\/([\w\.]+)/i // Coc Coc Browser
            ],
            [
                VERSION,
                [
                    NAME,
                    "Coc Coc"
                ]
            ],
            [
                /dolfin\/([\w\.]+)/i // Dolphin
            ],
            [
                VERSION,
                [
                    NAME,
                    "Dolphin"
                ]
            ],
            [
                /coast\/([\w\.]+)/i // Opera Coast
            ],
            [
                VERSION,
                [
                    NAME,
                    OPERA + " Coast"
                ]
            ],
            [
                /miuibrowser\/([\w\.]+)/i // MIUI Browser
            ],
            [
                VERSION,
                [
                    NAME,
                    "MIUI " + BROWSER
                ]
            ],
            [
                /fxios\/([-\w\.]+)/i // Firefox for iOS
            ],
            [
                VERSION,
                [
                    NAME,
                    FIREFOX
                ]
            ],
            [
                /\bqihu|(qi?ho?o?|360)browser/i // 360
            ],
            [
                [
                    NAME,
                    "360" + SUFFIX_BROWSER
                ]
            ],
            [
                /\b(qq)\/([\w\.]+)/i // QQ
            ],
            [
                [
                    NAME,
                    /(.+)/,
                    "$1Browser"
                ],
                VERSION
            ],
            [
                /(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i
            ],
            [
                [
                    NAME,
                    /(.+)/,
                    "$1" + SUFFIX_BROWSER
                ],
                VERSION
            ],
            [
                /samsungbrowser\/([\w\.]+)/i // Samsung Internet
            ],
            [
                VERSION,
                [
                    NAME,
                    SAMSUNG + " Internet"
                ]
            ],
            [
                /(comodo_dragon)\/([\w\.]+)/i // Comodo Dragon
            ],
            [
                [
                    NAME,
                    /_/g,
                    " "
                ],
                VERSION
            ],
            [
                /metasr[\/ ]?([\d\.]+)/i // Sogou Explorer
            ],
            [
                VERSION,
                [
                    NAME,
                    "Sogou Explorer"
                ]
            ],
            [
                /(sogou)mo\w+\/([\d\.]+)/i // Sogou Mobile
            ],
            [
                [
                    NAME,
                    "Sogou Mobile"
                ],
                VERSION
            ],
            [
                /(electron)\/([\w\.]+) safari/i,
                /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i // QQBrowser/2345 Browser
            ],
            [
                NAME,
                VERSION
            ],
            [
                /(lbbrowser|rekonq)/i,
                /\[(linkedin)app\]/i // LinkedIn App for iOS & Android
            ],
            [
                NAME
            ],
            [
                // WebView
                /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i // Facebook App for iOS & Android
            ],
            [
                [
                    NAME,
                    FACEBOOK
                ],
                VERSION
            ],
            [
                /(Klarna)\/([\w\.]+)/i,
                /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
                /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
                /safari (line)\/([\w\.]+)/i,
                /\b(line)\/([\w\.]+)\/iab/i,
                /(alipay)client\/([\w\.]+)/i,
                /(twitter)(?:and| f.+e\/([\w\.]+))/i,
                /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i // Chromium/Instagram/Snapchat
            ],
            [
                NAME,
                VERSION
            ],
            [
                /\bgsa\/([\w\.]+) .*safari\//i // Google Search Appliance on iOS
            ],
            [
                VERSION,
                [
                    NAME,
                    "GSA"
                ]
            ],
            [
                /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i // TikTok
            ],
            [
                VERSION,
                [
                    NAME,
                    "TikTok"
                ]
            ],
            [
                /headlesschrome(?:\/([\w\.]+)| )/i // Chrome Headless
            ],
            [
                VERSION,
                [
                    NAME,
                    CHROME + " Headless"
                ]
            ],
            [
                / wv\).+(chrome)\/([\w\.]+)/i // Chrome WebView
            ],
            [
                [
                    NAME,
                    CHROME + " WebView"
                ],
                VERSION
            ],
            [
                /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i // Android Browser
            ],
            [
                VERSION,
                [
                    NAME,
                    "Android " + BROWSER
                ]
            ],
            [
                /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia
            ],
            [
                NAME,
                VERSION
            ],
            [
                /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i // Mobile Safari
            ],
            [
                VERSION,
                [
                    NAME,
                    "Mobile Safari"
                ]
            ],
            [
                /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile
            ],
            [
                VERSION,
                NAME
            ],
            [
                /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i // Safari < 3.0
            ],
            [
                NAME,
                [
                    VERSION,
                    strMapper,
                    oldSafariMap
                ]
            ],
            [
                /(webkit|khtml)\/([\w\.]+)/i
            ],
            [
                NAME,
                VERSION
            ],
            [
                // Gecko based
                /(navigator|netscape\d?)\/([-\w\.]+)/i // Netscape
            ],
            [
                [
                    NAME,
                    "Netscape"
                ],
                VERSION
            ],
            [
                /(wolvic)\/([\w\.]+)/i // Wolvic
            ],
            [
                NAME,
                VERSION
            ],
            [
                /mobile vr; rv:([\w\.]+)\).+firefox/i // Firefox Reality
            ],
            [
                VERSION,
                [
                    NAME,
                    FIREFOX + " Reality"
                ]
            ],
            [
                /ekiohf.+(flow)\/([\w\.]+)/i,
                /(swiftfox)/i,
                /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,
                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
                /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                /(firefox)\/([\w\.]+)/i,
                /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                // Other
                /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser
                /(links) \(([\w\.]+)/i // Links
            ],
            [
                NAME,
                [
                    VERSION,
                    /_/g,
                    "."
                ]
            ],
            [
                /(cobalt)\/([\w\.]+)/i // Cobalt
            ],
            [
                NAME,
                [
                    VERSION,
                    /master.|lts./,
                    ""
                ]
            ]
        ],
        cpu: [
            [
                /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i // AMD64 (x64)
            ],
            [
                [
                    ARCHITECTURE,
                    "amd64"
                ]
            ],
            [
                /(ia32(?=;))/i // IA32 (quicktime)
            ],
            [
                [
                    ARCHITECTURE,
                    lowerize
                ]
            ],
            [
                /((?:i[346]|x)86)[;\)]/i // IA32 (x86)
            ],
            [
                [
                    ARCHITECTURE,
                    "ia32"
                ]
            ],
            [
                /\b(aarch64|arm(v?8e?l?|_?64))\b/i // ARM64
            ],
            [
                [
                    ARCHITECTURE,
                    "arm64"
                ]
            ],
            [
                /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i // ARMHF
            ],
            [
                [
                    ARCHITECTURE,
                    "armhf"
                ]
            ],
            [
                // PocketPC mistakenly identified as PowerPC
                /windows (ce|mobile); ppc;/i
            ],
            [
                [
                    ARCHITECTURE,
                    "arm"
                ]
            ],
            [
                /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i // PowerPC
            ],
            [
                [
                    ARCHITECTURE,
                    /ower/,
                    EMPTY,
                    lowerize
                ]
            ],
            [
                /(sun4\w)[;\)]/i // SPARC
            ],
            [
                [
                    ARCHITECTURE,
                    "sparc"
                ]
            ],
            [
                /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
            ],
            [
                [
                    ARCHITECTURE,
                    lowerize
                ]
            ]
        ],
        device: [
            [
                //////////////////////////
                // MOBILES & TABLETS
                /////////////////////////
                // Samsung
                /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    SAMSUNG
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                /samsung[- ]((?!sm-[lr])[-\w]+)/i,
                /sec-(sgh\w+)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    SAMSUNG
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Apple
                /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i // iPod/iPhone
            ],
            [
                MODEL,
                [
                    VENDOR,
                    APPLE
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\((ipad);[-\w\),; ]+apple/i,
                /applecoremedia\/[\w\.]+ \((ipad)/i,
                /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    APPLE
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /(macintosh);/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    APPLE
                ]
            ],
            [
                // Sharp
                /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    SHARP
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Huawei
                /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    HUAWEI
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /(?:huawei|honor)([-\w ]+)[;\)]/i,
                /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    HUAWEI
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Xiaomi
                /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
                /\b; (\w+) build\/hm\1/i,
                /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
                /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i // Xiaomi Mi
            ],
            [
                [
                    MODEL,
                    /_/g,
                    " "
                ],
                [
                    VENDOR,
                    XIAOMI
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
                /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i // Mi Pad tablets
            ],
            [
                [
                    MODEL,
                    /_/g,
                    " "
                ],
                [
                    VENDOR,
                    XIAOMI
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                // OPPO
                /; (\w+) bui.+ oppo/i,
                /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "OPPO"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\b(opd2\d{3}a?) bui/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "OPPO"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                // Vivo
                /vivo (\w+)(?: bui|\))/i,
                /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Vivo"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Realme
                /\b(rmx[1-3]\d{3})(?: bui|;|\))/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Realme"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Motorola
                /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                /\bmot(?:orola)?[- ](\w*)/i,
                /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    MOTOROLA
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\b(mz60\d|xoom[2 ]{0,2}) build\//i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    MOTOROLA
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                // LG
                /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    LG
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                /\blg-?([\d\w]+) bui/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    LG
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Lenovo
                /(ideatab[-\w ]+)/i,
                /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Lenovo"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                // Nokia
                /(?:maemo|nokia).*(n900|lumia \d+)/i,
                /nokia[-_ ]?([-\w\.]*)/i
            ],
            [
                [
                    MODEL,
                    /_/g,
                    " "
                ],
                [
                    VENDOR,
                    "Nokia"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Google
                /(pixel c)\b/i // Google Pixel C
            ],
            [
                MODEL,
                [
                    VENDOR,
                    GOOGLE
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i // Google Pixel
            ],
            [
                MODEL,
                [
                    VENDOR,
                    GOOGLE
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Sony
                /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    SONY
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /sony tablet [ps]/i,
                /\b(?:sony)?sgp\w+(?: bui|\))/i
            ],
            [
                [
                    MODEL,
                    "Xperia Tablet"
                ],
                [
                    VENDOR,
                    SONY
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                // OnePlus
                / (kb2005|in20[12]5|be20[12][59])\b/i,
                /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "OnePlus"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Amazon
                /(alexa)webm/i,
                /(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,
                /(kf[a-z]+)( bui|\)).+silk\//i // Kindle Fire HD
            ],
            [
                MODEL,
                [
                    VENDOR,
                    AMAZON
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i // Fire Phone
            ],
            [
                [
                    MODEL,
                    /(.+)/g,
                    "Fire Phone $1"
                ],
                [
                    VENDOR,
                    AMAZON
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // BlackBerry
                /(playbook);[-\w\),; ]+(rim)/i // BlackBerry PlayBook
            ],
            [
                MODEL,
                VENDOR,
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b((?:bb[a-f]|st[hv])100-\d)/i,
                /\(bb10; (\w+)/i // BlackBerry 10
            ],
            [
                MODEL,
                [
                    VENDOR,
                    BLACKBERRY
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Asus
                /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    ASUS
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    ASUS
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // HTC
                /(nexus 9)/i // HTC Nexus 9
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "HTC"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                // ZTE
                /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
            ],
            [
                VENDOR,
                [
                    MODEL,
                    /_/g,
                    " "
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // TCL
                /droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "TCL"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                // itel
                /(itel) ((\w+))/i
            ],
            [
                [
                    VENDOR,
                    lowerize
                ],
                MODEL,
                [
                    TYPE,
                    strMapper,
                    {
                        "tablet": [
                            "p10001l",
                            "w7001"
                        ],
                        "*": "mobile"
                    }
                ]
            ],
            [
                // Acer
                /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Acer"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                // Meizu
                /droid.+; (m[1-5] note) bui/i,
                /\bmz-([-\w]{2,})/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Meizu"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Ulefone
                /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Ulefone"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // Nothing
                /droid.+; (a(?:015|06[35]|142p?))/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Nothing"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                // MIXED
                /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
                /(hp) ([\w ]+\w)/i,
                /(asus)-?(\w+)/i,
                /(microsoft); (lumia[\w ]+)/i,
                /(lenovo)[-_ ]?([-\w]+)/i,
                /(jolla)/i,
                /(oppo) ?([\w ]+) bui/i // OPPO
            ],
            [
                VENDOR,
                MODEL,
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /(kobo)\s(ereader|touch)/i,
                /(archos) (gamepad2?)/i,
                /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                /(kindle)\/([\w\.]+)/i,
                /(nook)[\w ]+build\/(\w+)/i,
                /(dell) (strea[kpr\d ]*[\dko])/i,
                /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                /(trinity)[- ]*(t\d{3}) bui/i,
                /(gigaset)[- ]+(q\w{1,9}) bui/i,
                /(vodafone) ([\w ]+)(?:\)| bui)/i // Vodafone
            ],
            [
                VENDOR,
                MODEL,
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /(surface duo)/i // Surface Duo
            ],
            [
                MODEL,
                [
                    VENDOR,
                    MICROSOFT
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /droid [\d\.]+; (fp\du?)(?: b|\))/i // Fairphone
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Fairphone"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /(u304aa)/i // AT&T
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "AT&T"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\bsie-(\w*)/i // Siemens
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Siemens"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\b(rct\w+) b/i // RCA Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "RCA"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(venue[\d ]{2,7}) b/i // Dell Venue Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Dell"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(q(?:mv|ta)\w+) b/i // Verizon Tablet
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Verizon"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i // Barnes & Noble Tablet
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Barnes & Noble"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(tm\d{3}\w+) b/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "NuVision"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(k88) b/i // ZTE K Series Tablet
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "ZTE"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(nx\d{3}j) b/i // ZTE Nubia
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "ZTE"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\b(gen\d{3}) b.+49h/i // Swiss GEN Mobile
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Swiss"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\b(zur\d{3}) b/i // Swiss ZUR Tablet
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Swiss"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b((zeki)?tb.*\b) b/i // Zeki Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Zeki"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b([yr]\d{2}) b/i,
                /\b(dragon[- ]+touch |dt)(\w{5}) b/i // Dragon Touch Tablet
            ],
            [
                [
                    VENDOR,
                    "Dragon Touch"
                ],
                MODEL,
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(ns-?\w{0,9}) b/i // Insignia Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Insignia"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b((nxa|next)-?\w{0,9}) b/i // NextBook Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "NextBook"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones
            ],
            [
                [
                    VENDOR,
                    "Voice"
                ],
                MODEL,
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\b(lvtel\-)?(v1[12]) b/i // LvTel Phones
            ],
            [
                [
                    VENDOR,
                    "LvTel"
                ],
                MODEL,
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\b(ph-1) /i // Essential PH-1
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Essential"
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /\b(v(100md|700na|7011|917g).*\b) b/i // Envizen Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Envizen"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b(trio[-\w\. ]+) b/i // MachSpeed Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "MachSpeed"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\btu_(1491) b/i // Rotor Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Rotor"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /(shield[\w ]+) b/i // Nvidia Shield Tablets
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Nvidia"
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /(sprint) (\w+)/i // Sprint Phones
            ],
            [
                VENDOR,
                MODEL,
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /(kin\.[onetw]{3})/i // Microsoft Kin
            ],
            [
                [
                    MODEL,
                    /\./g,
                    " "
                ],
                [
                    VENDOR,
                    MICROSOFT
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i // Zebra
            ],
            [
                MODEL,
                [
                    VENDOR,
                    ZEBRA
                ],
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    ZEBRA
                ],
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                ///////////////////
                // SMARTTVS
                ///////////////////
                /smart-tv.+(samsung)/i // Samsung
            ],
            [
                VENDOR,
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /hbbtv.+maple;(\d+)/i
            ],
            [
                [
                    MODEL,
                    /^/,
                    "SmartTV"
                ],
                [
                    VENDOR,
                    SAMSUNG
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i // LG SmartTV
            ],
            [
                [
                    VENDOR,
                    LG
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /(apple) ?tv/i // Apple TV
            ],
            [
                VENDOR,
                [
                    MODEL,
                    APPLE + " TV"
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /crkey/i // Google Chromecast
            ],
            [
                [
                    MODEL,
                    CHROME + "cast"
                ],
                [
                    VENDOR,
                    GOOGLE
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /droid.+aft(\w+)( bui|\))/i // Fire TV
            ],
            [
                MODEL,
                [
                    VENDOR,
                    AMAZON
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /\(dtv[\);].+(aquos)/i,
                /(aquos-tv[\w ]+)\)/i // Sharp
            ],
            [
                MODEL,
                [
                    VENDOR,
                    SHARP
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /(bravia[\w ]+)( bui|\))/i // Sony
            ],
            [
                MODEL,
                [
                    VENDOR,
                    SONY
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /(mitv-\w{5}) bui/i // Xiaomi
            ],
            [
                MODEL,
                [
                    VENDOR,
                    XIAOMI
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /Hbbtv.*(technisat) (.*);/i // TechniSAT
            ],
            [
                VENDOR,
                MODEL,
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
                /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i // HbbTV devices
            ],
            [
                [
                    VENDOR,
                    trim
                ],
                [
                    MODEL,
                    trim
                ],
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i // SmartTV from Unidentified Vendors
            ],
            [
                [
                    TYPE,
                    SMARTTV
                ]
            ],
            [
                ///////////////////
                // CONSOLES
                ///////////////////
                /(ouya)/i,
                /(nintendo) ([wids3utch]+)/i // Nintendo
            ],
            [
                VENDOR,
                MODEL,
                [
                    TYPE,
                    CONSOLE
                ]
            ],
            [
                /droid.+; (shield) bui/i // Nvidia
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Nvidia"
                ],
                [
                    TYPE,
                    CONSOLE
                ]
            ],
            [
                /(playstation [345portablevi]+)/i // Playstation
            ],
            [
                MODEL,
                [
                    VENDOR,
                    SONY
                ],
                [
                    TYPE,
                    CONSOLE
                ]
            ],
            [
                /\b(xbox(?: one)?(?!; xbox))[\); ]/i // Microsoft Xbox
            ],
            [
                MODEL,
                [
                    VENDOR,
                    MICROSOFT
                ],
                [
                    TYPE,
                    CONSOLE
                ]
            ],
            [
                ///////////////////
                // WEARABLES
                ///////////////////
                /\b(sm-[lr]\d\d[05][fnuw]?s?)\b/i // Samsung Galaxy Watch
            ],
            [
                MODEL,
                [
                    VENDOR,
                    SAMSUNG
                ],
                [
                    TYPE,
                    WEARABLE
                ]
            ],
            [
                /((pebble))app/i // Pebble
            ],
            [
                VENDOR,
                MODEL,
                [
                    TYPE,
                    WEARABLE
                ]
            ],
            [
                /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i // Apple Watch
            ],
            [
                MODEL,
                [
                    VENDOR,
                    APPLE
                ],
                [
                    TYPE,
                    WEARABLE
                ]
            ],
            [
                /droid.+; (glass) \d/i // Google Glass
            ],
            [
                MODEL,
                [
                    VENDOR,
                    GOOGLE
                ],
                [
                    TYPE,
                    WEARABLE
                ]
            ],
            [
                /droid.+; (wt63?0{2,3})\)/i
            ],
            [
                MODEL,
                [
                    VENDOR,
                    ZEBRA
                ],
                [
                    TYPE,
                    WEARABLE
                ]
            ],
            [
                /(quest( \d| pro)?)/i // Oculus Quest
            ],
            [
                MODEL,
                [
                    VENDOR,
                    FACEBOOK
                ],
                [
                    TYPE,
                    WEARABLE
                ]
            ],
            [
                ///////////////////
                // EMBEDDED
                ///////////////////
                /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i // Tesla
            ],
            [
                VENDOR,
                [
                    TYPE,
                    EMBEDDED
                ]
            ],
            [
                /(aeobc)\b/i // Echo Dot
            ],
            [
                MODEL,
                [
                    VENDOR,
                    AMAZON
                ],
                [
                    TYPE,
                    EMBEDDED
                ]
            ],
            [
                ////////////////////
                // MIXED (GENERIC)
                ///////////////////
                /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors
            ],
            [
                MODEL,
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors
            ],
            [
                MODEL,
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i // Unidentifiable Tablet
            ],
            [
                [
                    TYPE,
                    TABLET
                ]
            ],
            [
                /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile
            ],
            [
                [
                    TYPE,
                    MOBILE
                ]
            ],
            [
                /(android[-\w\. ]{0,9});.+buil/i // Generic Android Device
            ],
            [
                MODEL,
                [
                    VENDOR,
                    "Generic"
                ]
            ]
        ],
        engine: [
            [
                /windows.+ edge\/([\w\.]+)/i // EdgeHTML
            ],
            [
                VERSION,
                [
                    NAME,
                    EDGE + "HTML"
                ]
            ],
            [
                /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i // Blink
            ],
            [
                VERSION,
                [
                    NAME,
                    "Blink"
                ]
            ],
            [
                /(presto)\/([\w\.]+)/i,
                /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
                /ekioh(flow)\/([\w\.]+)/i,
                /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                /(icab)[\/ ]([23]\.[\d\.]+)/i,
                /\b(libweb)/i
            ],
            [
                NAME,
                VERSION
            ],
            [
                /rv\:([\w\.]{1,9})\b.+(gecko)/i // Gecko
            ],
            [
                VERSION,
                NAME
            ]
        ],
        os: [
            [
                // Windows
                /microsoft (windows) (vista|xp)/i // Windows (iTunes)
            ],
            [
                NAME,
                VERSION
            ],
            [
                /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i // Windows Phone
            ],
            [
                NAME,
                [
                    VERSION,
                    strMapper,
                    windowsVersionMap
                ]
            ],
            [
                /windows nt 6\.2; (arm)/i,
                /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
            ],
            [
                [
                    VERSION,
                    strMapper,
                    windowsVersionMap
                ],
                [
                    NAME,
                    "Windows"
                ]
            ],
            [
                // iOS/macOS
                /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
                /cfnetwork\/.+darwin/i
            ],
            [
                [
                    VERSION,
                    /_/g,
                    "."
                ],
                [
                    NAME,
                    "iOS"
                ]
            ],
            [
                /(mac os x) ?([\w\. ]*)/i,
                /(macintosh|mac_powerpc\b)(?!.+haiku)/i // Mac OS
            ],
            [
                [
                    NAME,
                    MAC_OS
                ],
                [
                    VERSION,
                    /_/g,
                    "."
                ]
            ],
            [
                // Mobile OSes
                /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i // Android-x86/HarmonyOS
            ],
            [
                VERSION,
                NAME
            ],
            [
                /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                /(blackberry)\w*\/([\w\.]*)/i,
                /(tizen|kaios)[\/ ]([\w\.]+)/i,
                /\((series40);/i // Series 40
            ],
            [
                NAME,
                VERSION
            ],
            [
                /\(bb(10);/i // BlackBerry 10
            ],
            [
                VERSION,
                [
                    NAME,
                    BLACKBERRY
                ]
            ],
            [
                /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i // Symbian
            ],
            [
                VERSION,
                [
                    NAME,
                    "Symbian"
                ]
            ],
            [
                /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
            ],
            [
                VERSION,
                [
                    NAME,
                    FIREFOX + " OS"
                ]
            ],
            [
                /web0s;.+rt(tv)/i,
                /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i // WebOS
            ],
            [
                VERSION,
                [
                    NAME,
                    "webOS"
                ]
            ],
            [
                /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i // watchOS
            ],
            [
                VERSION,
                [
                    NAME,
                    "watchOS"
                ]
            ],
            [
                // Google Chromecast
                /crkey\/([\d\.]+)/i // Google Chromecast
            ],
            [
                VERSION,
                [
                    NAME,
                    CHROME + "cast"
                ]
            ],
            [
                /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i // Chromium OS
            ],
            [
                [
                    NAME,
                    CHROMIUM_OS
                ],
                VERSION
            ],
            [
                // Smart TVs
                /panasonic;(viera)/i,
                /(netrange)mmh/i,
                /(nettv)\/(\d+\.[\w\.]+)/i,
                // Console
                /(nintendo|playstation) ([wids345portablevuch]+)/i,
                /(xbox); +xbox ([^\);]+)/i,
                // Other
                /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                /(mint)[\/\(\) ]?(\w*)/i,
                /(mageia|vectorlinux)[; ]/i,
                /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
                /(hurd|linux) ?([\w\.]*)/i,
                /(gnu) ?([\w\.]*)/i,
                /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                /(haiku) (\w+)/i // Haiku
            ],
            [
                NAME,
                VERSION
            ],
            [
                /(sunos) ?([\w\.\d]*)/i // Solaris
            ],
            [
                [
                    NAME,
                    "Solaris"
                ],
                VERSION
            ],
            [
                /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
                /(unix) ?([\w\.]*)/i // UNIX
            ],
            [
                NAME,
                VERSION
            ]
        ]
    };
    /////////////////
    // Constructor
    ////////////////
    var UAParser = function(ua, extensions) {
        if (typeof ua === OBJ_TYPE) {
            extensions = ua;
            ua = undefined;
        }
        if (!(this instanceof UAParser)) return new UAParser(ua, extensions).getResult();
        var _navigator = typeof window1 !== UNDEF_TYPE && window1.navigator ? window1.navigator : undefined;
        var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
        var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;
        this.getBrowser = function() {
            var _browser = {};
            _browser[NAME] = undefined;
            _browser[VERSION] = undefined;
            rgxMapper.call(_browser, _ua, _rgxmap.browser);
            _browser[MAJOR] = majorize(_browser[VERSION]);
            // Brave-specific detection
            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) _browser[NAME] = "Brave";
            return _browser;
        };
        this.getCPU = function() {
            var _cpu = {};
            _cpu[ARCHITECTURE] = undefined;
            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
            return _cpu;
        };
        this.getDevice = function() {
            var _device = {};
            _device[VENDOR] = undefined;
            _device[MODEL] = undefined;
            _device[TYPE] = undefined;
            rgxMapper.call(_device, _ua, _rgxmap.device);
            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) _device[TYPE] = MOBILE;
            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
            if (_isSelfNav && _device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
                _device[MODEL] = "iPad";
                _device[TYPE] = TABLET;
            }
            return _device;
        };
        this.getEngine = function() {
            var _engine = {};
            _engine[NAME] = undefined;
            _engine[VERSION] = undefined;
            rgxMapper.call(_engine, _ua, _rgxmap.engine);
            return _engine;
        };
        this.getOS = function() {
            var _os = {};
            _os[NAME] = undefined;
            _os[VERSION] = undefined;
            rgxMapper.call(_os, _ua, _rgxmap.os);
            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != "Unknown") _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS); // backward compatibility
            return _os;
        };
        this.getResult = function() {
            return {
                ua: this.getUA(),
                browser: this.getBrowser(),
                engine: this.getEngine(),
                os: this.getOS(),
                device: this.getDevice(),
                cpu: this.getCPU()
            };
        };
        this.getUA = function() {
            return _ua;
        };
        this.setUA = function(ua) {
            _ua = typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;
            return this;
        };
        this.setUA(_ua);
        return this;
    };
    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER = enumerize([
        NAME,
        VERSION,
        MAJOR
    ]);
    UAParser.CPU = enumerize([
        ARCHITECTURE
    ]);
    UAParser.DEVICE = enumerize([
        MODEL,
        VENDOR,
        TYPE,
        CONSOLE,
        MOBILE,
        SMARTTV,
        TABLET,
        WEARABLE,
        EMBEDDED
    ]);
    UAParser.ENGINE = UAParser.OS = enumerize([
        NAME,
        VERSION
    ]);
    ///////////
    // Export
    //////////
    // check js environment
    if (typeof exports !== UNDEF_TYPE) {
        // nodejs env
        if ("object" !== UNDEF_TYPE && module.exports) exports = module.exports = UAParser;
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if (typeof define === FUNC_TYPE && define.amd) define(function() {
            return UAParser;
        });
        else if (typeof window1 !== UNDEF_TYPE) // browser env
        window1.UAParser = UAParser;
    }
    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = typeof window1 !== UNDEF_TYPE && (window1.jQuery || window1.Zepto);
    if ($ && !$.ua) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function() {
            return parser.getUA();
        };
        $.ua.set = function(ua) {
            parser.setUA(ua);
            var result = parser.getResult();
            for(var prop in result)$.ua[prop] = result[prop];
        };
    }
})(typeof window === "object" ? window : this);

});

parcelRegister("9qQwD", function(module, exports) {
/**
 * https://github.com/csnover/TraceKit
 * @license MIT
 * @namespace TraceKit
 */ (function(window1, undefined) {
    if (!window1) return;
    var TraceKit = {};
    var _oldTraceKit = window1.TraceKit;
    // global reference to slice
    var _slice = [].slice;
    var UNKNOWN_FUNCTION = "?";
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types
    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;
    /**
 * A better form of hasOwnProperty<br/>
 * Example: `_has(MainHostObject, property) === true/false`
 *
 * @param {Object} object to check property
 * @param {string} key to check
 * @return {Boolean} true if the object has the key and it is not inherited
 */ function _has(object, key) {
        return Object.prototype.hasOwnProperty.call(object, key);
    }
    /**
 * Returns true if the parameter is undefined<br/>
 * Example: `_isUndefined(val) === true/false`
 *
 * @param {*} what Value to check
 * @return {Boolean} true if undefined and false otherwise
 */ function _isUndefined(what) {
        return typeof what === "undefined";
    }
    /**
 * Export TraceKit out to another variable<br/>
 * Example: `var TK = TraceKit.noConflict()`
 * @return {Object} The TraceKit object
 * @memberof TraceKit
 */ TraceKit.noConflict = function noConflict() {
        window1.TraceKit = _oldTraceKit;
        return TraceKit;
    };
    /**
 * Wrap any function in a TraceKit reporter<br/>
 * Example: `func = TraceKit.wrap(func);`
 *
 * @param {Function} func Function to be wrapped
 * @return {Function} The wrapped func
 * @memberof TraceKit
 */ TraceKit.wrap = function traceKitWrapper(func) {
        function wrapped() {
            try {
                return func.apply(this, arguments);
            } catch (e) {
                TraceKit.report(e);
                throw e;
            }
        }
        return wrapped;
    };
    /**
 * Cross-browser processing of unhandled exceptions
 *
 * Syntax:
 * ```js
 *   TraceKit.report.subscribe(function(stackInfo) { ... })
 *   TraceKit.report.unsubscribe(function(stackInfo) { ... })
 *   TraceKit.report(exception)
 *   try { ...code... } catch(ex) { TraceKit.report(ex); }
 * ```
 *
 * Supports:
 *   - Firefox: full stack trace with line numbers, plus column number
 *     on top frame; column number is not guaranteed
 *   - Opera: full stack trace with line and column numbers
 *   - Chrome: full stack trace with line and column numbers
 *   - Safari: line and column number for the top frame only; some frames
 *     may be missing, and column number is not guaranteed
 *   - IE: line and column number for the top frame only; some frames
 *     may be missing, and column number is not guaranteed
 *
 * In theory, TraceKit should work on all of the following versions:
 *   - IE5.5+ (only 8.0 tested)
 *   - Firefox 0.9+ (only 3.5+ tested)
 *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require
 *     Exceptions Have Stacktrace to be enabled in opera:config)
 *   - Safari 3+ (only 4+ tested)
 *   - Chrome 1+ (only 5+ tested)
 *   - Konqueror 3.5+ (untested)
 *
 * Requires TraceKit.computeStackTrace.
 *
 * Tries to catch all unhandled exceptions and report them to the
 * subscribed handlers. Please note that TraceKit.report will rethrow the
 * exception. This is REQUIRED in order to get a useful stack trace in IE.
 * If the exception does not reach the top of the browser, you will only
 * get a stack trace from the point where TraceKit.report was called.
 *
 * Handlers receive a TraceKit.StackTrace object as described in the
 * TraceKit.computeStackTrace docs.
 *
 * @memberof TraceKit
 * @namespace
 */ TraceKit.report = function reportModuleWrapper() {
        var handlers = [], lastException = null, lastExceptionStack = null;
        /**
     * Add a crash handler.
     * @param {Function} handler
     * @memberof TraceKit.report
     */ function subscribe(handler) {
            installGlobalHandler();
            installGlobalUnhandledRejectionHandler();
            handlers.push(handler);
        }
        /**
     * Remove a crash handler.
     * @param {Function} handler
     * @memberof TraceKit.report
     */ function unsubscribe(handler) {
            for(var i = handlers.length - 1; i >= 0; --i)if (handlers[i] === handler) handlers.splice(i, 1);
            if (handlers.length === 0) {
                uninstallGlobalHandler();
                uninstallGlobalUnhandledRejectionHandler();
            }
        }
        /**
     * Dispatch stack information to all handlers.
     * @param {TraceKit.StackTrace} stack
     * @param {boolean} isWindowError Is this a top-level window error?
     * @param {Error=} error The error that's being handled (if available, null otherwise)
     * @memberof TraceKit.report
     * @throws An exception if an error occurs while calling an handler.
     */ function notifyHandlers(stack, isWindowError, error) {
            var exception = null;
            if (isWindowError && !TraceKit.collectWindowErrors) return;
            for(var i in handlers){
                if (_has(handlers, i)) try {
                    handlers[i](stack, isWindowError, error);
                } catch (inner) {
                    exception = inner;
                }
            }
            if (exception) throw exception;
        }
        var _oldOnerrorHandler, _onErrorHandlerInstalled;
        var _oldOnunhandledrejectionHandler, _onUnhandledRejectionHandlerInstalled;
        /**
     * Ensures all global unhandled exceptions are recorded.
     * Supported by Gecko and IE.
     * @param {string} message Error message.
     * @param {string} url URL of script that generated the exception.
     * @param {(number|string)} lineNo The line number at which the error occurred.
     * @param {(number|string)=} columnNo The column number at which the error occurred.
     * @param {Error=} errorObj The actual Error object.
     * @memberof TraceKit.report
     */ function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {
            var stack = null;
            if (lastExceptionStack) {
                TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);
                processLastException();
            } else if (errorObj) {
                stack = TraceKit.computeStackTrace(errorObj);
                notifyHandlers(stack, true, errorObj);
            } else {
                var location = {
                    "url": url,
                    "line": lineNo,
                    "column": columnNo
                };
                var name;
                var msg = message; // must be new var or will modify original `arguments`
                if (({}).toString.call(message) === "[object String]") {
                    var groups = message.match(ERROR_TYPES_RE);
                    if (groups) {
                        name = groups[1];
                        msg = groups[2];
                    }
                }
                location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);
                location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);
                stack = {
                    "name": name,
                    "message": msg,
                    "mode": "onerror",
                    "stack": [
                        location
                    ]
                };
                notifyHandlers(stack, true, null);
            }
            if (_oldOnerrorHandler) return _oldOnerrorHandler.apply(this, arguments);
            return false;
        }
        /**
     * Ensures all unhandled rejections are recorded.
     * @param {PromiseRejectionEvent} e event.
     * @memberof TraceKit.report
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection
     * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
     */ function traceKitWindowOnUnhandledRejection(e) {
            var stack = TraceKit.computeStackTrace(e.reason);
            notifyHandlers(stack, true, e.reason);
        }
        /**
     * Install a global onerror handler
     * @memberof TraceKit.report
     */ function installGlobalHandler() {
            if (_onErrorHandlerInstalled === true) return;
            _oldOnerrorHandler = window1.onerror;
            window1.onerror = traceKitWindowOnError;
            _onErrorHandlerInstalled = true;
        }
        /**
     * Uninstall the global onerror handler
     * @memberof TraceKit.report
     */ function uninstallGlobalHandler() {
            if (_onErrorHandlerInstalled) {
                window1.onerror = _oldOnerrorHandler;
                _onErrorHandlerInstalled = false;
            }
        }
        /**
     * Install a global onunhandledrejection handler
     * @memberof TraceKit.report
     */ function installGlobalUnhandledRejectionHandler() {
            if (_onUnhandledRejectionHandlerInstalled === true) return;
            _oldOnunhandledrejectionHandler = window1.onunhandledrejection;
            window1.onunhandledrejection = traceKitWindowOnUnhandledRejection;
            _onUnhandledRejectionHandlerInstalled = true;
        }
        /**
     * Uninstall the global onunhandledrejection handler
     * @memberof TraceKit.report
     */ function uninstallGlobalUnhandledRejectionHandler() {
            if (_onUnhandledRejectionHandlerInstalled) {
                window1.onunhandledrejection = _oldOnunhandledrejectionHandler;
                _onUnhandledRejectionHandlerInstalled = false;
            }
        }
        /**
     * Process the most recent exception
     * @memberof TraceKit.report
     */ function processLastException() {
            var _lastExceptionStack = lastExceptionStack, _lastException = lastException;
            lastExceptionStack = null;
            lastException = null;
            notifyHandlers(_lastExceptionStack, false, _lastException);
        }
        /**
     * Reports an unhandled Error to TraceKit.
     * @param {Error} ex
     * @memberof TraceKit.report
     * @throws An exception if an incomplete stack trace is detected (old IE browsers).
     */ function report(ex) {
            if (lastExceptionStack) {
                if (lastException === ex) return; // already caught by an inner catch block, ignore
                else processLastException();
            }
            var stack = TraceKit.computeStackTrace(ex);
            lastExceptionStack = stack;
            lastException = ex;
            // If the stack trace is incomplete, wait for 2 seconds for
            // slow slow IE to see if onerror occurs or not before reporting
            // this exception; otherwise, we will end up with an incomplete
            // stack trace
            setTimeout(function() {
                if (lastException === ex) processLastException();
            }, stack.incomplete ? 2000 : 0);
            throw ex; // re-throw to propagate to the top level (and cause window.onerror)
        }
        report.subscribe = subscribe;
        report.unsubscribe = unsubscribe;
        return report;
    }();
    /**
 * An object representing a single stack frame.
 * @typedef {Object} StackFrame
 * @property {string} url The JavaScript or HTML file URL.
 * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).
 * @property {string[]?} args The arguments passed to the function, if known.
 * @property {number=} line The line number, if known.
 * @property {number=} column The column number, if known.
 * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.
 * @memberof TraceKit
 */ /**
 * An object representing a JavaScript stack trace.
 * @typedef {Object} StackTrace
 * @property {string} name The name of the thrown exception.
 * @property {string} message The exception error message.
 * @property {TraceKit.StackFrame[]} stack An array of stack frames.
 * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.
 * @memberof TraceKit
 */ /**
 * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript
 *
 * Syntax:
 *   ```js
 *   s = TraceKit.computeStackTrace.ofCaller([depth])
 *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)
 *   ```
 *
 * Supports:
 *   - Firefox:  full stack trace with line numbers and unreliable column
 *               number on top frame
 *   - Opera 10: full stack trace with line and column numbers
 *   - Opera 9-: full stack trace with line numbers
 *   - Chrome:   full stack trace with line and column numbers
 *   - Safari:   line and column number for the topmost stacktrace element
 *               only
 *   - IE:       no line numbers whatsoever
 *
 * Tries to guess names of anonymous functions by looking for assignments
 * in the source code. In IE and Safari, we have to guess source file names
 * by searching for function bodies inside all page scripts. This will not
 * work for scripts that are loaded cross-domain.
 * Here be dragons: some function names may be guessed incorrectly, and
 * duplicate functions may be mismatched.
 *
 * TraceKit.computeStackTrace should only be used for tracing purposes.
 * Logging of unhandled exceptions should be done with TraceKit.report,
 * which builds on top of TraceKit.computeStackTrace and provides better
 * IE support by utilizing the window.onerror event to retrieve information
 * about the top of the stack.
 *
 * Note: In IE and Safari, no stack trace is recorded on the Error object,
 * so computeStackTrace instead walks its *own* chain of callers.
 * This means that:
 *  * in Safari, some methods may be missing from the stack trace;
 *  * in IE, the topmost function in the stack trace will always be the
 *    caller of computeStackTrace.
 *
 * This is okay for tracing (because you are likely to be calling
 * computeStackTrace from the function you want to be the topmost element
 * of the stack trace anyway), but not okay for logging unhandled
 * exceptions (because your catch block will likely be far away from the
 * inner function that actually caused the exception).
 *
 * Tracing example:
 *  ```js
 *     function trace(message) {
 *         var stackInfo = TraceKit.computeStackTrace.ofCaller();
 *         var data = message + "\n";
 *         for(var i in stackInfo.stack) {
 *             var item = stackInfo.stack[i];
 *             data += (item.func || '[anonymous]') + "() in " + item.url + ":" + (item.line || '0') + "\n";
 *         }
 *         if (window.console)
 *             console.info(data);
 *         else
 *             alert(data);
 *     }
 * ```
 * @memberof TraceKit
 * @namespace
 */ TraceKit.computeStackTrace = function computeStackTraceWrapper() {
        var debug = false, sourceCache = {};
        /**
     * Attempts to retrieve source code via XMLHttpRequest, which is used
     * to look up anonymous function names.
     * @param {string} url URL of source code.
     * @return {string} Source contents.
     * @memberof TraceKit.computeStackTrace
     */ function loadSource(url) {
            if (!TraceKit.remoteFetching) return "";
            try {
                var getXHR = function() {
                    try {
                        return new window1.XMLHttpRequest();
                    } catch (e) {
                        // explicitly bubble up the exception if not found
                        return new window1.ActiveXObject("Microsoft.XMLHTTP");
                    }
                };
                var request = getXHR();
                request.open("GET", url, false);
                request.send("");
                return request.responseText;
            } catch (e) {
                return "";
            }
        }
        /**
     * Retrieves source code from the source code cache.
     * @param {string} url URL of source code.
     * @return {Array.<string>} Source contents.
     * @memberof TraceKit.computeStackTrace
     */ function getSource(url) {
            if (typeof url !== "string") return [];
            if (!_has(sourceCache, url)) {
                // URL needs to be able to fetched within the acceptable domain.  Otherwise,
                // cross-domain errors will be triggered.
                /*
                Regex matches:
                0 - Full Url
                1 - Protocol
                2 - Domain
                3 - Port (Useful for internal applications)
                4 - Path
            */ var source = "";
                var domain = "";
                try {
                    domain = window1.document.domain;
                } catch (e) {}
                var match = /(.*)\:\/\/([^:\/]+)([:\d]*)\/{0,1}([\s\S]*)/.exec(url);
                if (match && match[2] === domain) source = loadSource(url);
                sourceCache[url] = source ? source.split("\n") : [];
            }
            return sourceCache[url];
        }
        /**
     * Tries to use an externally loaded copy of source code to determine
     * the name of a function by looking at the name of the variable it was
     * assigned to, if any.
     * @param {string} url URL of source code.
     * @param {(string|number)} lineNo Line number in source code.
     * @return {string} The function name, if discoverable.
     * @memberof TraceKit.computeStackTrace
     */ function guessFunctionName(url, lineNo) {
            var reFunctionArgNames = /function ([^(]*)\(([^)]*)\)/, reGuessFunction = /['"]?([0-9A-Za-z$_]+)['"]?\s*[:=]\s*(function|eval|new Function)/, line = "", maxLines = 10, source = getSource(url), m;
            if (!source.length) return UNKNOWN_FUNCTION;
            // Walk backwards from the first line in the function until we find the line which
            // matches the pattern above, which is the function definition
            for(var i = 0; i < maxLines; ++i){
                line = source[lineNo - i] + line;
                if (!_isUndefined(line)) {
                    if (m = reGuessFunction.exec(line)) return m[1];
                    else if (m = reFunctionArgNames.exec(line)) return m[1];
                }
            }
            return UNKNOWN_FUNCTION;
        }
        /**
     * Retrieves the surrounding lines from where an exception occurred.
     * @param {string} url URL of source code.
     * @param {(string|number)} line Line number in source code to center around for context.
     * @return {?Array.<string>} Lines of source code.
     * @memberof TraceKit.computeStackTrace
     */ function gatherContext(url, line) {
            var source = getSource(url);
            if (!source.length) return null;
            var context = [], // linesBefore & linesAfter are inclusive with the offending line.
            // if linesOfContext is even, there will be one extra line
            //   *before* the offending line.
            linesBefore = Math.floor(TraceKit.linesOfContext / 2), // Add one extra line if linesOfContext is odd
            linesAfter = linesBefore + TraceKit.linesOfContext % 2, start = Math.max(0, line - linesBefore - 1), end = Math.min(source.length, line + linesAfter - 1);
            line -= 1; // convert to 0-based index
            for(var i = start; i < end; ++i)if (!_isUndefined(source[i])) context.push(source[i]);
            return context.length > 0 ? context : null;
        }
        /**
     * Escapes special characters, except for whitespace, in a string to be
     * used inside a regular expression as a string literal.
     * @param {string} text The string.
     * @return {string} The escaped string literal.
     * @memberof TraceKit.computeStackTrace
     */ function escapeRegExp(text) {
            return text.replace(/[\-\[\]{}()*+?.,\\\^$|#]/g, "\\$&");
        }
        /**
     * Escapes special characters in a string to be used inside a regular
     * expression as a string literal. Also ensures that HTML entities will
     * be matched the same as their literal friends.
     * @param {string} body The string.
     * @return {string} The escaped string.
     * @memberof TraceKit.computeStackTrace
     */ function escapeCodeAsRegExpForMatchingInsideHTML(body) {
            return escapeRegExp(body).replace("<", "(?:<|&lt;)").replace(">", "(?:>|&gt;)").replace("&", "(?:&|&amp;)").replace('"', '(?:"|&quot;)').replace(/\s+/g, "\\s+");
        }
        /**
     * Determines where a code fragment occurs in the source code.
     * @param {RegExp} re The function definition.
     * @param {Array.<string>} urls A list of URLs to search.
     * @return {?Object.<string, (string|number)>} An object containing
     * the url, line, and column number of the defined function.
     * @memberof TraceKit.computeStackTrace
     */ function findSourceInUrls(re, urls) {
            var source, m;
            for(var i = 0, j = urls.length; i < j; ++i)if ((source = getSource(urls[i])).length) {
                source = source.join("\n");
                if (m = re.exec(source)) return {
                    "url": urls[i],
                    "line": source.substring(0, m.index).split("\n").length,
                    "column": m.index - source.lastIndexOf("\n", m.index) - 1
                };
            }
            return null;
        }
        /**
     * Determines at which column a code fragment occurs on a line of the
     * source code.
     * @param {string} fragment The code fragment.
     * @param {string} url The URL to search.
     * @param {(string|number)} line The line number to examine.
     * @return {?number} The column number.
     * @memberof TraceKit.computeStackTrace
     */ function findSourceInLine(fragment, url, line) {
            var source = getSource(url), re = new RegExp("\\b" + escapeRegExp(fragment) + "\\b"), m;
            line -= 1;
            if (source && source.length > line && (m = re.exec(source[line]))) return m.index;
            return null;
        }
        /**
     * Determines where a function was defined within the source code.
     * @param {(Function|string)} func A function reference or serialized
     * function definition.
     * @return {?Object.<string, (string|number)>} An object containing
     * the url, line, and column number of the defined function.
     * @memberof TraceKit.computeStackTrace
     */ function findSourceByFunctionBody(func) {
            if (_isUndefined(window1 && window1.document)) return;
            var urls = [
                window1.location.href
            ], scripts = window1.document.getElementsByTagName("script"), body, code = "" + func, codeRE = /^function(?:\s+([\w$]+))?\s*\(([\w\s,]*)\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/, eventRE = /^function on([\w$]+)\s*\(event\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/, re, parts, result;
            for(var i = 0; i < scripts.length; ++i){
                var script = scripts[i];
                if (script.src) urls.push(script.src);
            }
            if (!(parts = codeRE.exec(code))) re = new RegExp(escapeRegExp(code).replace(/\s+/g, "\\s+"));
            else {
                var name = parts[1] ? "\\s+" + parts[1] : "", args = parts[2].split(",").join("\\s*,\\s*");
                body = escapeRegExp(parts[3]).replace(/;$/, ";?"); // semicolon is inserted if the function ends with a comment.replace(/\s+/g, '\\s+');
                re = new RegExp("function" + name + "\\s*\\(\\s*" + args + "\\s*\\)\\s*{\\s*" + body + "\\s*}");
            }
            // look for a normal function definition
            if (result = findSourceInUrls(re, urls)) return result;
            // look for an old-school event handler function
            if (parts = eventRE.exec(code)) {
                var event = parts[1];
                body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);
                // look for a function defined in HTML as an onXXX handler
                re = new RegExp("on" + event + "=[\\'\"]\\s*" + body + "\\s*[\\'\"]", "i");
                if (result = findSourceInUrls(re, urls[0])) return result;
                // look for ???
                re = new RegExp(body);
                if (result = findSourceInUrls(re, urls)) return result;
            }
            return null;
        }
        // Contents of Exception in various browsers.
        //
        // SAFARI:
        // ex.message = Can't find variable: qq
        // ex.line = 59
        // ex.sourceId = 580238192
        // ex.sourceURL = http://...
        // ex.expressionBeginOffset = 96
        // ex.expressionCaretOffset = 98
        // ex.expressionEndOffset = 98
        // ex.name = ReferenceError
        //
        // FIREFOX:
        // ex.message = qq is not defined
        // ex.fileName = http://...
        // ex.lineNumber = 59
        // ex.columnNumber = 69
        // ex.stack = ...stack trace... (see the example below)
        // ex.name = ReferenceError
        //
        // CHROME:
        // ex.message = qq is not defined
        // ex.name = ReferenceError
        // ex.type = not_defined
        // ex.arguments = ['aa']
        // ex.stack = ...stack trace...
        //
        // INTERNET EXPLORER:
        // ex.message = ...
        // ex.name = ReferenceError
        //
        // OPERA:
        // ex.message = ...message... (see the example below)
        // ex.name = ReferenceError
        // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)
        // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'
        /**
     * Computes stack trace information from the stack property.
     * Chrome and Gecko use this property.
     * @param {Error} ex
     * @return {?TraceKit.StackTrace} Stack trace information.
     * @memberof TraceKit.computeStackTrace
     */ function computeStackTraceFromStackProp(ex) {
            if (!ex.stack) return null;
            var chrome = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i, gecko = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i, winjs = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i, // Used to additionally parse URL/line/column from eval frames
            isEval, geckoEval = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i, chromeEval = /\((\S*)(?::(\d+))(?::(\d+))\)/, lines = ex.stack.split("\n"), stack = [], submatch, parts, element, reference = /^(.*) is undefined$/.exec(ex.message);
            for(var i = 0, j = lines.length; i < j; ++i){
                if (parts = chrome.exec(lines[i])) {
                    var isNative = parts[2] && parts[2].indexOf("native") === 0; // start of line
                    isEval = parts[2] && parts[2].indexOf("eval") === 0; // start of line
                    if (isEval && (submatch = chromeEval.exec(parts[2]))) {
                        // throw out eval line/column and use top-most line/column number
                        parts[2] = submatch[1]; // url
                        parts[3] = submatch[2]; // line
                        parts[4] = submatch[3]; // column
                    }
                    element = {
                        "url": !isNative ? parts[2] : null,
                        "func": parts[1] || UNKNOWN_FUNCTION,
                        "args": isNative ? [
                            parts[2]
                        ] : [],
                        "line": parts[3] ? +parts[3] : null,
                        "column": parts[4] ? +parts[4] : null
                    };
                } else if (parts = winjs.exec(lines[i])) element = {
                    "url": parts[2],
                    "func": parts[1] || UNKNOWN_FUNCTION,
                    "args": [],
                    "line": +parts[3],
                    "column": parts[4] ? +parts[4] : null
                };
                else if (parts = gecko.exec(lines[i])) {
                    isEval = parts[3] && parts[3].indexOf(" > eval") > -1;
                    if (isEval && (submatch = geckoEval.exec(parts[3]))) {
                        // throw out eval line/column and use top-most line number
                        parts[3] = submatch[1];
                        parts[4] = submatch[2];
                        parts[5] = null; // no column when eval
                    } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) // FireFox uses this awesome columnNumber property for its top frame
                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,
                    // so adding 1
                    // NOTE: this hack doesn't work if top-most frame is eval
                    stack[0].column = ex.columnNumber + 1;
                    element = {
                        "url": parts[3],
                        "func": parts[1] || UNKNOWN_FUNCTION,
                        "args": parts[2] ? parts[2].split(",") : [],
                        "line": parts[4] ? +parts[4] : null,
                        "column": parts[5] ? +parts[5] : null
                    };
                } else continue;
                if (!element.func && element.line) element.func = guessFunctionName(element.url, element.line);
                element.context = element.line ? gatherContext(element.url, element.line) : null;
                stack.push(element);
            }
            if (!stack.length) return null;
            if (stack[0] && stack[0].line && !stack[0].column && reference) stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);
            return {
                "mode": "stack",
                "name": ex.name,
                "message": ex.message,
                "stack": stack
            };
        }
        /**
     * Computes stack trace information from the stacktrace property.
     * Opera 10+ uses this property.
     * @param {Error} ex
     * @return {?TraceKit.StackTrace} Stack trace information.
     * @memberof TraceKit.computeStackTrace
     */ function computeStackTraceFromStacktraceProp(ex) {
            // Access and store the stacktrace property before doing ANYTHING
            // else to it because Opera is not very good at providing it
            // reliably in other circumstances.
            var stacktrace = ex.stacktrace;
            if (!stacktrace) return;
            var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i, opera11Regex = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^\)]+))\((.*)\))? in (.*):\s*$/i, lines = stacktrace.split("\n"), stack = [], parts;
            for(var line = 0; line < lines.length; line += 2){
                var element = null;
                if (parts = opera10Regex.exec(lines[line])) element = {
                    "url": parts[2],
                    "line": +parts[1],
                    "column": null,
                    "func": parts[3],
                    "args": []
                };
                else if (parts = opera11Regex.exec(lines[line])) element = {
                    "url": parts[6],
                    "line": +parts[1],
                    "column": +parts[2],
                    "func": parts[3] || parts[4],
                    "args": parts[5] ? parts[5].split(",") : []
                };
                if (element) {
                    if (!element.func && element.line) element.func = guessFunctionName(element.url, element.line);
                    if (element.line) try {
                        element.context = gatherContext(element.url, element.line);
                    } catch (exc) {}
                    if (!element.context) element.context = [
                        lines[line + 1]
                    ];
                    stack.push(element);
                }
            }
            if (!stack.length) return null;
            return {
                "mode": "stacktrace",
                "name": ex.name,
                "message": ex.message,
                "stack": stack
            };
        }
        /**
     * NOT TESTED.
     * Computes stack trace information from an error message that includes
     * the stack trace.
     * Opera 9 and earlier use this method if the option to show stack
     * traces is turned on in opera:config.
     * @param {Error} ex
     * @return {?TraceKit.StackTrace} Stack information.
     * @memberof TraceKit.computeStackTrace
     */ function computeStackTraceFromOperaMultiLineMessage(ex) {
            // TODO: Clean this function up
            // Opera includes a stack trace into the exception message. An example is:
            //
            // Statement on line 3: Undefined variable: undefinedFunc
            // Backtrace:
            //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz
            //         undefinedFunc(a);
            //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy
            //           zzz(x, y, z);
            //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx
            //           yyy(a, a, a);
            //   Line 1 of function script
            //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }
            //   ...
            var lines = ex.message.split("\n");
            if (lines.length < 4) return null;
            var lineRE1 = /^\s*Line (\d+) of linked script ((?:file|https?|blob)\S+)(?:: in function (\S+))?\s*$/i, lineRE2 = /^\s*Line (\d+) of inline#(\d+) script in ((?:file|https?|blob)\S+)(?:: in function (\S+))?\s*$/i, lineRE3 = /^\s*Line (\d+) of function script\s*$/i, stack = [], scripts = window1 && window1.document && window1.document.getElementsByTagName("script"), inlineScriptBlocks = [], parts;
            for(var s in scripts)if (_has(scripts, s) && !scripts[s].src) inlineScriptBlocks.push(scripts[s]);
            for(var line = 2; line < lines.length; line += 2){
                var item = null;
                if (parts = lineRE1.exec(lines[line])) item = {
                    "url": parts[2],
                    "func": parts[3],
                    "args": [],
                    "line": +parts[1],
                    "column": null
                };
                else if (parts = lineRE2.exec(lines[line])) {
                    item = {
                        "url": parts[3],
                        "func": parts[4],
                        "args": [],
                        "line": +parts[1],
                        "column": null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.
                    };
                    var relativeLine = +parts[1]; // relative to the start of the <SCRIPT> block
                    var script = inlineScriptBlocks[parts[2] - 1];
                    if (script) {
                        var source = getSource(item.url);
                        if (source) {
                            source = source.join("\n");
                            var pos = source.indexOf(script.innerText);
                            if (pos >= 0) item.line = relativeLine + source.substring(0, pos).split("\n").length;
                        }
                    }
                } else if (parts = lineRE3.exec(lines[line])) {
                    var url = window1.location.href.replace(/#.*$/, "");
                    var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));
                    var src = findSourceInUrls(re, [
                        url
                    ]);
                    item = {
                        "url": url,
                        "func": "",
                        "args": [],
                        "line": src ? src.line : parts[1],
                        "column": null
                    };
                }
                if (item) {
                    if (!item.func) item.func = guessFunctionName(item.url, item.line);
                    var context = gatherContext(item.url, item.line);
                    var midline = context ? context[Math.floor(context.length / 2)] : null;
                    if (context && midline.replace(/^\s*/, "") === lines[line + 1].replace(/^\s*/, "")) item.context = context;
                    else // if (context) alert("Context mismatch. Correct midline:\n" + lines[i+1] + "\n\nMidline:\n" + midline + "\n\nContext:\n" + context.join("\n") + "\n\nURL:\n" + item.url);
                    item.context = [
                        lines[line + 1]
                    ];
                    stack.push(item);
                }
            }
            if (!stack.length) return null; // could not parse multiline exception message as Opera stack trace
            return {
                "mode": "multiline",
                "name": ex.name,
                "message": lines[0],
                "stack": stack
            };
        }
        /**
     * Adds information about the first frame to incomplete stack traces.
     * Safari and IE require this to get complete data on the first frame.
     * @param {TraceKit.StackTrace} stackInfo Stack trace information from
     * one of the compute* methods.
     * @param {string} url The URL of the script that caused an error.
     * @param {(number|string)} lineNo The line number of the script that
     * caused an error.
     * @param {string=} message The error generated by the browser, which
     * hopefully contains the name of the object that caused the error.
     * @return {boolean} Whether or not the stack information was
     * augmented.
     * @memberof TraceKit.computeStackTrace
     */ function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {
            var initial = {
                "url": url,
                "line": lineNo
            };
            if (initial.url && initial.line) {
                stackInfo.incomplete = false;
                if (!initial.func) initial.func = guessFunctionName(initial.url, initial.line);
                if (!initial.context) initial.context = gatherContext(initial.url, initial.line);
                var reference = / '([^']+)' /.exec(message);
                if (reference) initial.column = findSourceInLine(reference[1], initial.url, initial.line);
                if (stackInfo.stack.length > 0) {
                    if (stackInfo.stack[0].url === initial.url) {
                        if (stackInfo.stack[0].line === initial.line) return false; // already in stack trace
                        else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {
                            stackInfo.stack[0].line = initial.line;
                            stackInfo.stack[0].context = initial.context;
                            return false;
                        }
                    }
                }
                stackInfo.stack.unshift(initial);
                stackInfo.partial = true;
                return true;
            } else stackInfo.incomplete = true;
            return false;
        }
        /**
     * Computes stack trace information by walking the arguments.caller
     * chain at the time the exception occurred. This will cause earlier
     * frames to be missed but is the only way to get any stack trace in
     * Safari and IE. The top frame is restored by
     * {@link augmentStackTraceWithInitialElement}.
     * @param {Error} ex
     * @return {TraceKit.StackTrace=} Stack trace information.
     * @memberof TraceKit.computeStackTrace
     */ function computeStackTraceByWalkingCallerChain(ex, depth) {
            var functionName = /function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i, stack = [], funcs = {}, recursion = false, parts, item, source;
            for(var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller){
                if (curr === computeStackTrace || curr === TraceKit.report) continue;
                item = {
                    "url": null,
                    "func": UNKNOWN_FUNCTION,
                    "args": [],
                    "line": null,
                    "column": null
                };
                if (curr.name) item.func = curr.name;
                else if (parts = functionName.exec(curr.toString())) item.func = parts[1];
                if (typeof item.func === "undefined") try {
                    item.func = parts.input.substring(0, parts.input.indexOf("{"));
                } catch (e) {}
                if (source = findSourceByFunctionBody(curr)) {
                    item.url = source.url;
                    item.line = source.line;
                    if (item.func === UNKNOWN_FUNCTION) item.func = guessFunctionName(item.url, item.line);
                    var reference = / '([^']+)' /.exec(ex.message || ex.description);
                    if (reference) item.column = findSourceInLine(reference[1], source.url, source.line);
                }
                if (funcs["" + curr]) recursion = true;
                else funcs["" + curr] = true;
                stack.push(item);
            }
            if (depth) stack.splice(0, depth);
            var result = {
                "mode": "callers",
                "name": ex.name,
                "message": ex.message,
                "stack": stack
            };
            augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);
            return result;
        }
        /**
     * Computes a stack trace for an exception.
     * @param {Error} ex
     * @param {(string|number)=} depth
     * @memberof TraceKit.computeStackTrace
     */ function computeStackTrace(ex, depth) {
            var stack = null;
            depth = depth == null ? 0 : +depth;
            try {
                // This must be tried first because Opera 10 *destroys*
                // its stacktrace property if you try to access the stack
                // property first!!
                stack = computeStackTraceFromStacktraceProp(ex);
                if (stack) return stack;
            } catch (e) {
                if (debug) throw e;
            }
            try {
                stack = computeStackTraceFromStackProp(ex);
                if (stack) return stack;
            } catch (e) {
                if (debug) throw e;
            }
            try {
                stack = computeStackTraceFromOperaMultiLineMessage(ex);
                if (stack) return stack;
            } catch (e) {
                if (debug) throw e;
            }
            try {
                stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);
                if (stack) return stack;
            } catch (e) {
                if (debug) throw e;
            }
            return {
                "name": ex.name,
                "message": ex.message,
                "mode": "failed"
            };
        }
        /**
     * Logs a stacktrace starting from the previous call and working down.
     * @param {(number|string)=} depth How many frames deep to trace.
     * @return {TraceKit.StackTrace} Stack trace information.
     * @memberof TraceKit.computeStackTrace
     */ function computeStackTraceOfCaller(depth) {
            depth = (depth == null ? 0 : +depth) + 1; // "+ 1" because "ofCaller" should drop one frame
            try {
                throw new Error();
            } catch (ex) {
                return computeStackTrace(ex, depth + 1);
            }
        }
        computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;
        computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;
        computeStackTrace.guessFunctionName = guessFunctionName;
        computeStackTrace.gatherContext = gatherContext;
        computeStackTrace.ofCaller = computeStackTraceOfCaller;
        computeStackTrace.getSource = getSource;
        return computeStackTrace;
    }();
    /**
 * Extends support for global error handling for asynchronous browser
 * functions. Adopted from Closure Library's errorhandler.js
 * @memberof TraceKit
 */ TraceKit.extendToAsynchronousCallbacks = function() {
        var _helper = function _helper(fnName) {
            var originalFn = window1[fnName];
            window1[fnName] = function traceKitAsyncExtension() {
                // Make a copy of the arguments
                var args = _slice.call(arguments);
                var originalCallback = args[0];
                if (typeof originalCallback === "function") args[0] = TraceKit.wrap(originalCallback);
                // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it
                // also only supports 2 argument and doesn't care what "this" is, so we
                // can just call the original function directly.
                if (originalFn.apply) return originalFn.apply(this, args);
                else return originalFn(args[0], args[1]);
            };
        };
        _helper("setTimeout");
        _helper("setInterval");
    };
    //Default options:
    if (!TraceKit.remoteFetching) TraceKit.remoteFetching = true;
    if (!TraceKit.collectWindowErrors) TraceKit.collectWindowErrors = true;
    if (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) // 5 lines before, the offending line, 5 lines after
    TraceKit.linesOfContext = 11;
    // UMD export
    if (typeof define === "function" && define.amd) define("TraceKit", [], TraceKit);
    else if ((0, module.exports) && window1.module !== module) module.exports = TraceKit;
    else window1.TraceKit = TraceKit;
})(typeof window !== "undefined" ? window : $parcel$global);

});

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Updates to this file should also be replicated to @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */ /** only globals that common to node and browsers are allowed */ // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var $2805366245178137$export$5c524ddf7208c00c = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof $parcel$global === "object" ? $parcel$global : {};


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // this is autogenerated file, see scripts/version-update.js
var $8c537bd09d9d68c3$export$a4ad2735b021c132 = "1.9.0";


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $13b47340595c99aa$var$re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
function $13b47340595c99aa$export$a5733a4d26a1ec61(ownVersion) {
    var acceptedVersions = new Set([
        ownVersion
    ]);
    var rejectedVersions = new Set();
    var myVersionMatch = ownVersion.match($13b47340595c99aa$var$re);
    if (!myVersionMatch) // we cannot guarantee compatibility so we always return noop
    return function() {
        return false;
    };
    var ownVersionParsed = {
        major: +myVersionMatch[1],
        minor: +myVersionMatch[2],
        patch: +myVersionMatch[3],
        prerelease: myVersionMatch[4]
    };
    // if ownVersion has a prerelease tag, versions must match exactly
    if (ownVersionParsed.prerelease != null) return function isExactmatch(globalVersion) {
        return globalVersion === ownVersion;
    };
    function _reject(v) {
        rejectedVersions.add(v);
        return false;
    }
    function _accept(v) {
        acceptedVersions.add(v);
        return true;
    }
    return function isCompatible(globalVersion) {
        if (acceptedVersions.has(globalVersion)) return true;
        if (rejectedVersions.has(globalVersion)) return false;
        var globalVersionMatch = globalVersion.match($13b47340595c99aa$var$re);
        if (!globalVersionMatch) // cannot parse other version
        // we cannot guarantee compatibility so we always noop
        return _reject(globalVersion);
        var globalVersionParsed = {
            major: +globalVersionMatch[1],
            minor: +globalVersionMatch[2],
            patch: +globalVersionMatch[3],
            prerelease: globalVersionMatch[4]
        };
        // if globalVersion has a prerelease tag, versions must match exactly
        if (globalVersionParsed.prerelease != null) return _reject(globalVersion);
        // major versions must match
        if (ownVersionParsed.major !== globalVersionParsed.major) return _reject(globalVersion);
        if (ownVersionParsed.major === 0) {
            if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) return _accept(globalVersion);
            return _reject(globalVersion);
        }
        if (ownVersionParsed.minor <= globalVersionParsed.minor) return _accept(globalVersion);
        return _reject(globalVersion);
    };
}
var $13b47340595c99aa$export$7fc0d8c3ab188c4c = $13b47340595c99aa$export$a5733a4d26a1ec61((0, $8c537bd09d9d68c3$export$a4ad2735b021c132));


var $9ca752071c19610d$var$major = (0, $8c537bd09d9d68c3$export$a4ad2735b021c132).split(".")[0];
var $9ca752071c19610d$var$GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + $9ca752071c19610d$var$major);
var $9ca752071c19610d$var$_global = (0, $2805366245178137$export$5c524ddf7208c00c);
function $9ca752071c19610d$export$d586ae880b433238(type, instance, diag, allowOverride) {
    var _a;
    if (allowOverride === void 0) allowOverride = false;
    var api = $9ca752071c19610d$var$_global[$9ca752071c19610d$var$GLOBAL_OPENTELEMETRY_API_KEY] = (_a = $9ca752071c19610d$var$_global[$9ca752071c19610d$var$GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {
        version: (0, $8c537bd09d9d68c3$export$a4ad2735b021c132)
    };
    if (!allowOverride && api[type]) {
        // already registered an API of this type
        var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
        diag.error(err.stack || err.message);
        return false;
    }
    if (api.version !== (0, $8c537bd09d9d68c3$export$a4ad2735b021c132)) {
        // All registered APIs must be of the same version exactly
        var err = new Error("@opentelemetry/api: Registration of version v" + api.version + " for " + type + " does not match previously registered API v" + (0, $8c537bd09d9d68c3$export$a4ad2735b021c132));
        diag.error(err.stack || err.message);
        return false;
    }
    api[type] = instance;
    diag.debug("@opentelemetry/api: Registered a global for " + type + " v" + (0, $8c537bd09d9d68c3$export$a4ad2735b021c132) + ".");
    return true;
}
function $9ca752071c19610d$export$a4e55266d2135a7f(type) {
    var _a, _b;
    var globalVersion = (_a = $9ca752071c19610d$var$_global[$9ca752071c19610d$var$GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;
    if (!globalVersion || !(0, $13b47340595c99aa$export$7fc0d8c3ab188c4c)(globalVersion)) return;
    return (_b = $9ca752071c19610d$var$_global[$9ca752071c19610d$var$GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
}
function $9ca752071c19610d$export$d42ac835f38d1fb2(type, diag) {
    diag.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + (0, $8c537bd09d9d68c3$export$a4ad2735b021c132) + ".");
    var api = $9ca752071c19610d$var$_global[$9ca752071c19610d$var$GLOBAL_OPENTELEMETRY_API_KEY];
    if (api) delete api[type];
}


var $2c618e667f631db9$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $2c618e667f631db9$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * Component Logger which is meant to be used as part of any component which
 * will add automatically additional namespace in front of the log message.
 * It will then forward all message to global diag logger
 * @example
 * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });
 * cLogger.debug('test');
 * // @opentelemetry/instrumentation-http test
 */ var $2c618e667f631db9$export$b4bccc12f5b13129 = /** @class */ function() {
    function DiagComponentLogger(props) {
        this._namespace = props.namespace || "DiagComponentLogger";
    }
    DiagComponentLogger.prototype.debug = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return $2c618e667f631db9$var$logProxy("debug", this._namespace, args);
    };
    DiagComponentLogger.prototype.error = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return $2c618e667f631db9$var$logProxy("error", this._namespace, args);
    };
    DiagComponentLogger.prototype.info = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return $2c618e667f631db9$var$logProxy("info", this._namespace, args);
    };
    DiagComponentLogger.prototype.warn = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return $2c618e667f631db9$var$logProxy("warn", this._namespace, args);
    };
    DiagComponentLogger.prototype.verbose = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return $2c618e667f631db9$var$logProxy("verbose", this._namespace, args);
    };
    return DiagComponentLogger;
}();
function $2c618e667f631db9$var$logProxy(funcName, namespace, args) {
    var logger = (0, $9ca752071c19610d$export$a4e55266d2135a7f)("diag");
    // shortcut if logger not set
    if (!logger) return;
    args.unshift(namespace);
    return logger[funcName].apply(logger, $2c618e667f631db9$var$__spreadArray([], $2c618e667f631db9$var$__read(args), false));
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Defines the available internal logging levels for the diagnostic logger, the numeric values
 * of the levels are defined to match the original values from the initial LogLevel to avoid
 * compatibility/migration issues for any implementation that assume the numeric ordering.
 */ var $2fde396648409cca$export$b7d7b4c0f3c95263;
(function(DiagLogLevel) {
    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */ DiagLogLevel[DiagLogLevel["NONE"] = 0] = "NONE";
    /** Identifies an error scenario */ DiagLogLevel[DiagLogLevel["ERROR"] = 30] = "ERROR";
    /** Identifies a warning scenario */ DiagLogLevel[DiagLogLevel["WARN"] = 50] = "WARN";
    /** General informational log message */ DiagLogLevel[DiagLogLevel["INFO"] = 60] = "INFO";
    /** General debug log message */ DiagLogLevel[DiagLogLevel["DEBUG"] = 70] = "DEBUG";
    /**
     * Detailed trace level logging should only be used for development, should only be set
     * in a development environment.
     */ DiagLogLevel[DiagLogLevel["VERBOSE"] = 80] = "VERBOSE";
    /** Used to set the logging level to include all logging */ DiagLogLevel[DiagLogLevel["ALL"] = 9999] = "ALL";
})($2fde396648409cca$export$b7d7b4c0f3c95263 || ($2fde396648409cca$export$b7d7b4c0f3c95263 = {}));


function $089942930b6f69b3$export$9a9cc475abb19689(maxLevel, logger) {
    if (maxLevel < (0, $2fde396648409cca$export$b7d7b4c0f3c95263).NONE) maxLevel = (0, $2fde396648409cca$export$b7d7b4c0f3c95263).NONE;
    else if (maxLevel > (0, $2fde396648409cca$export$b7d7b4c0f3c95263).ALL) maxLevel = (0, $2fde396648409cca$export$b7d7b4c0f3c95263).ALL;
    // In case the logger is null or undefined
    logger = logger || {};
    function _filterFunc(funcName, theLevel) {
        var theFunc = logger[funcName];
        if (typeof theFunc === "function" && maxLevel >= theLevel) return theFunc.bind(logger);
        return function() {};
    }
    return {
        error: _filterFunc("error", (0, $2fde396648409cca$export$b7d7b4c0f3c95263).ERROR),
        warn: _filterFunc("warn", (0, $2fde396648409cca$export$b7d7b4c0f3c95263).WARN),
        info: _filterFunc("info", (0, $2fde396648409cca$export$b7d7b4c0f3c95263).INFO),
        debug: _filterFunc("debug", (0, $2fde396648409cca$export$b7d7b4c0f3c95263).DEBUG),
        verbose: _filterFunc("verbose", (0, $2fde396648409cca$export$b7d7b4c0f3c95263).VERBOSE)
    };
}




var $5e9120c1387d2385$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $5e9120c1387d2385$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var $5e9120c1387d2385$var$API_NAME = "diag";
/**
 * Singleton object which represents the entry point to the OpenTelemetry internal
 * diagnostic API
 */ var $5e9120c1387d2385$export$5c8937ffc688cfd3 = /** @class */ function() {
    /**
     * Private internal constructor
     * @private
     */ function DiagAPI() {
        function _logProxy(funcName) {
            return function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var logger = (0, $9ca752071c19610d$export$a4e55266d2135a7f)("diag");
                // shortcut if logger not set
                if (!logger) return;
                return logger[funcName].apply(logger, $5e9120c1387d2385$var$__spreadArray([], $5e9120c1387d2385$var$__read(args), false));
            };
        }
        // Using self local variable for minification purposes as 'this' cannot be minified
        var self = this;
        // DiagAPI specific functions
        var setLogger = function(logger, optionsOrLogLevel) {
            var _a, _b, _c;
            if (optionsOrLogLevel === void 0) optionsOrLogLevel = {
                logLevel: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).INFO
            };
            if (logger === self) {
                // There isn't much we can do here.
                // Logging to the console might break the user application.
                // Try to log to self. If a logger was previously registered it will receive the log.
                var err = new Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");
                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);
                return false;
            }
            if (typeof optionsOrLogLevel === "number") optionsOrLogLevel = {
                logLevel: optionsOrLogLevel
            };
            var oldLogger = (0, $9ca752071c19610d$export$a4e55266d2135a7f)("diag");
            var newLogger = (0, $089942930b6f69b3$export$9a9cc475abb19689)((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : (0, $2fde396648409cca$export$b7d7b4c0f3c95263).INFO, logger);
            // There already is an logger registered. We'll let it know before overwriting it.
            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {
                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : "<failed to generate stacktrace>";
                oldLogger.warn("Current logger will be overwritten from " + stack);
                newLogger.warn("Current logger will overwrite one already registered from " + stack);
            }
            return (0, $9ca752071c19610d$export$d586ae880b433238)("diag", newLogger, self, true);
        };
        self.setLogger = setLogger;
        self.disable = function() {
            (0, $9ca752071c19610d$export$d42ac835f38d1fb2)($5e9120c1387d2385$var$API_NAME, self);
        };
        self.createComponentLogger = function(options) {
            return new (0, $2c618e667f631db9$export$b4bccc12f5b13129)(options);
        };
        self.verbose = _logProxy("verbose");
        self.debug = _logProxy("debug");
        self.info = _logProxy("info");
        self.warn = _logProxy("warn");
        self.error = _logProxy("error");
    }
    /** Get the singleton instance of the DiagAPI API */ DiagAPI.instance = function() {
        if (!this._instance) this._instance = new DiagAPI();
        return this._instance;
    };
    return DiagAPI;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $232c76e9d5a59688$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $232c76e9d5a59688$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $232c76e9d5a59688$export$b8c511fa1a5f4987 = /** @class */ function() {
    function BaggageImpl(entries) {
        this._entries = entries ? new Map(entries) : new Map();
    }
    BaggageImpl.prototype.getEntry = function(key) {
        var entry = this._entries.get(key);
        if (!entry) return undefined;
        return Object.assign({}, entry);
    };
    BaggageImpl.prototype.getAllEntries = function() {
        return Array.from(this._entries.entries()).map(function(_a) {
            var _b = $232c76e9d5a59688$var$__read(_a, 2), k = _b[0], v = _b[1];
            return [
                k,
                v
            ];
        });
    };
    BaggageImpl.prototype.setEntry = function(key, entry) {
        var newBaggage = new BaggageImpl(this._entries);
        newBaggage._entries.set(key, entry);
        return newBaggage;
    };
    BaggageImpl.prototype.removeEntry = function(key) {
        var newBaggage = new BaggageImpl(this._entries);
        newBaggage._entries.delete(key);
        return newBaggage;
    };
    BaggageImpl.prototype.removeEntries = function() {
        var e_1, _a;
        var keys = [];
        for(var _i = 0; _i < arguments.length; _i++)keys[_i] = arguments[_i];
        var newBaggage = new BaggageImpl(this._entries);
        try {
            for(var keys_1 = $232c76e9d5a59688$var$__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()){
                var key = keys_1_1.value;
                newBaggage._entries.delete(key);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return newBaggage;
    };
    BaggageImpl.prototype.clear = function() {
        return new BaggageImpl();
    };
    return BaggageImpl;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Symbol used to make BaggageEntryMetadata an opaque type
 */ var $abc08d9c01cc126a$export$92dd2fe8ddb5cb7 = Symbol("BaggageEntryMetadata");


var $d1ab8715d93ab9b4$var$diag = (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance();
function $d1ab8715d93ab9b4$export$1034a425c7384452(entries) {
    if (entries === void 0) entries = {};
    return new (0, $232c76e9d5a59688$export$b8c511fa1a5f4987)(new Map(Object.entries(entries)));
}
function $d1ab8715d93ab9b4$export$c491cedc1b2b6e9e(str) {
    if (typeof str !== "string") {
        $d1ab8715d93ab9b4$var$diag.error("Cannot create baggage metadata from unknown type: " + typeof str);
        str = "";
    }
    return {
        __TYPE__: (0, $abc08d9c01cc126a$export$92dd2fe8ddb5cb7),
        toString: function() {
            return str;
        }
    };
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Get a key to uniquely identify a context value */ function $934e30cdbca38464$export$b8c322c5a7cfce78(description) {
    // The specification states that for the same input, multiple calls should
    // return different keys. Due to the nature of the JS dependency management
    // system, this creates problems where multiple versions of some package
    // could hold different keys for the same property.
    //
    // Therefore, we use Symbol.for which returns the same key for the same input.
    return Symbol.for(description);
}
var $934e30cdbca38464$var$BaseContext = /** @class */ function() {
    /**
     * Construct a new context which inherits values from an optional parent context.
     *
     * @param parentContext a context from which to inherit values
     */ function BaseContext(parentContext) {
        // for minification
        var self = this;
        self._currentContext = parentContext ? new Map(parentContext) : new Map();
        self.getValue = function(key) {
            return self._currentContext.get(key);
        };
        self.setValue = function(key, value) {
            var context = new BaseContext(self._currentContext);
            context._currentContext.set(key, value);
            return context;
        };
        self.deleteValue = function(key) {
            var context = new BaseContext(self._currentContext);
            context._currentContext.delete(key);
            return context;
        };
    }
    return BaseContext;
}();
var $934e30cdbca38464$export$78df28f9b2f9a7dc = new $934e30cdbca38464$var$BaseContext();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $9540f66f2eb7e1fe$var$consoleMap = [
    {
        n: "error",
        c: "error"
    },
    {
        n: "warn",
        c: "warn"
    },
    {
        n: "info",
        c: "info"
    },
    {
        n: "debug",
        c: "debug"
    },
    {
        n: "verbose",
        c: "trace"
    }
];
/**
 * A simple Immutable Console based diagnostic logger which will output any messages to the Console.
 * If you want to limit the amount of logging to a specific level or lower use the
 * {@link createLogLevelDiagLogger}
 */ var $9540f66f2eb7e1fe$export$c55926ac8e698339 = /** @class */ function() {
    function DiagConsoleLogger() {
        function _consoleFunc(funcName) {
            return function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                if (console) {
                    // Some environments only expose the console when the F12 developer console is open
                    // eslint-disable-next-line no-console
                    var theFunc = console[funcName];
                    if (typeof theFunc !== "function") // Not all environments support all functions
                    // eslint-disable-next-line no-console
                    theFunc = console.log;
                    // One last final check
                    if (typeof theFunc === "function") return theFunc.apply(console, args);
                }
            };
        }
        for(var i = 0; i < $9540f66f2eb7e1fe$var$consoleMap.length; i++)this[$9540f66f2eb7e1fe$var$consoleMap[i].n] = _consoleFunc($9540f66f2eb7e1fe$var$consoleMap[i].c);
    }
    return DiagConsoleLogger;
}();




/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The Type of value. It describes how the data is reported. */ var $25cae033094ccbf5$export$f1921b45c66f982c;
(function(ValueType) {
    ValueType[ValueType["INT"] = 0] = "INT";
    ValueType[ValueType["DOUBLE"] = 1] = "DOUBLE";
})($25cae033094ccbf5$export$f1921b45c66f982c || ($25cae033094ccbf5$export$f1921b45c66f982c = {}));





/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */ var $26a42c328c7d67cf$export$94df7a7a96a92f7b;
(function(SamplingDecision) {
    /**
     * `Span.isRecording() === false`, span will not be recorded and all events
     * and attributes will be dropped.
     */ SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
    /**
     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
     * MUST NOT be set.
     */ SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
    /**
     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
     * MUST be set.
     */ SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})($26a42c328c7d67cf$export$94df7a7a96a92f7b || ($26a42c328c7d67cf$export$94df7a7a96a92f7b = {}));


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $c7d276c8670f28c2$export$4da4ea8145910e8b;
(function(SpanKind) {
    /** Default value. Indicates that the span is used internally. */ SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote request.
     */ SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */ SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
    /**
     * Indicates that the span describes producer sending a message to a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */ SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
    /**
     * Indicates that the span describes consumer receiving a message from a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */ SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})($c7d276c8670f28c2$export$4da4ea8145910e8b || ($c7d276c8670f28c2$export$4da4ea8145910e8b = {}));


/**
 * An enumeration of status codes.
 */ var $4a0044d2fb535a6a$export$1e28dd9b5d01db83;
(function(SpanStatusCode) {
    /**
     * The default status.
     */ SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
    /**
     * The operation has been validated by an Application developer or
     * Operator to have completed successfully.
     */ SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
    /**
     * The operation contains an error.
     */ SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
})($4a0044d2fb535a6a$export$1e28dd9b5d01db83 || ($4a0044d2fb535a6a$export$1e28dd9b5d01db83 = {}));


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $06dc16c226890360$export$bf9049ad2b0883ff;
(function(TraceFlags) {
    /** Represents no flag set. */ TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
    /** Bit to represent whether trace is sampled in trace flags. */ TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
})($06dc16c226890360$export$bf9049ad2b0883ff || ($06dc16c226890360$export$bf9049ad2b0883ff = {}));



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $fe8274c1e0ccb802$export$55cc39fb0d4bb4c0 = "0000000000000000";
var $fe8274c1e0ccb802$export$22be96e88d95e128 = "00000000000000000000000000000000";
var $fe8274c1e0ccb802$export$8591e4c852b66703 = {
    traceId: $fe8274c1e0ccb802$export$22be96e88d95e128,
    spanId: $fe8274c1e0ccb802$export$55cc39fb0d4bb4c0,
    traceFlags: (0, $06dc16c226890360$export$bf9049ad2b0883ff).NONE
};


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/**
 * The NonRecordingSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */ var $42d3c3f1fe42fcae$export$972d28f7c6a8c6c7 = /** @class */ function() {
    function NonRecordingSpan(_spanContext) {
        if (_spanContext === void 0) _spanContext = (0, $fe8274c1e0ccb802$export$8591e4c852b66703);
        this._spanContext = _spanContext;
    }
    // Returns a SpanContext.
    NonRecordingSpan.prototype.spanContext = function() {
        return this._spanContext;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setAttribute = function(_key, _value) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setAttributes = function(_attributes) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.addEvent = function(_name, _attributes) {
        return this;
    };
    NonRecordingSpan.prototype.addLink = function(_link) {
        return this;
    };
    NonRecordingSpan.prototype.addLinks = function(_links) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setStatus = function(_status) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.updateName = function(_name) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.end = function(_endTime) {};
    // isRecording always returns false for NonRecordingSpan.
    NonRecordingSpan.prototype.isRecording = function() {
        return false;
    };
    // By default does nothing
    NonRecordingSpan.prototype.recordException = function(_exception, _time) {};
    return NonRecordingSpan;
}();


var $9019f25568a7d9bd$var$VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var $9019f25568a7d9bd$var$VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
function $9019f25568a7d9bd$export$29dd34cf1269f6da(traceId) {
    return $9019f25568a7d9bd$var$VALID_TRACEID_REGEX.test(traceId) && traceId !== (0, $fe8274c1e0ccb802$export$22be96e88d95e128);
}
function $9019f25568a7d9bd$export$8e51c6d8f0586aff(spanId) {
    return $9019f25568a7d9bd$var$VALID_SPANID_REGEX.test(spanId) && spanId !== (0, $fe8274c1e0ccb802$export$55cc39fb0d4bb4c0);
}
function $9019f25568a7d9bd$export$e4373b9a2c09216c(spanContext) {
    return $9019f25568a7d9bd$export$29dd34cf1269f6da(spanContext.traceId) && $9019f25568a7d9bd$export$8e51c6d8f0586aff(spanContext.spanId);
}
function $9019f25568a7d9bd$export$c19cc0f1911bdb85(spanContext) {
    return new (0, $42d3c3f1fe42fcae$export$972d28f7c6a8c6c7)(spanContext);
}



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $93f530ca77f439c2$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $93f530ca77f439c2$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var $93f530ca77f439c2$export$a27e5df35d1539a6 = /** @class */ function() {
    function NoopContextManager() {}
    NoopContextManager.prototype.active = function() {
        return 0, $934e30cdbca38464$export$78df28f9b2f9a7dc;
    };
    NoopContextManager.prototype.with = function(_context, fn, thisArg) {
        var args = [];
        for(var _i = 3; _i < arguments.length; _i++)args[_i - 3] = arguments[_i];
        return fn.call.apply(fn, $93f530ca77f439c2$var$__spreadArray([
            thisArg
        ], $93f530ca77f439c2$var$__read(args), false));
    };
    NoopContextManager.prototype.bind = function(_context, target) {
        return target;
    };
    NoopContextManager.prototype.enable = function() {
        return this;
    };
    NoopContextManager.prototype.disable = function() {
        return this;
    };
    return NoopContextManager;
}();




var $2c1e00df66d39ade$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $2c1e00df66d39ade$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var $2c1e00df66d39ade$var$API_NAME = "context";
var $2c1e00df66d39ade$var$NOOP_CONTEXT_MANAGER = new (0, $93f530ca77f439c2$export$a27e5df35d1539a6)();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */ var $2c1e00df66d39ade$export$4148866f0a453927 = /** @class */ function() {
    /** Empty private constructor prevents end users from constructing a new instance of the API */ function ContextAPI() {}
    /** Get the singleton instance of the Context API */ ContextAPI.getInstance = function() {
        if (!this._instance) this._instance = new ContextAPI();
        return this._instance;
    };
    /**
     * Set the current context manager.
     *
     * @returns true if the context manager was successfully registered, else false
     */ ContextAPI.prototype.setGlobalContextManager = function(contextManager) {
        return (0, $9ca752071c19610d$export$d586ae880b433238)($2c1e00df66d39ade$var$API_NAME, contextManager, (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance());
    };
    /**
     * Get the currently active context
     */ ContextAPI.prototype.active = function() {
        return this._getContextManager().active();
    };
    /**
     * Execute a function with an active context
     *
     * @param context context to be active during function execution
     * @param fn function to execute in a context
     * @param thisArg optional receiver to be used for calling fn
     * @param args optional arguments forwarded to fn
     */ ContextAPI.prototype.with = function(context, fn, thisArg) {
        var _a;
        var args = [];
        for(var _i = 3; _i < arguments.length; _i++)args[_i - 3] = arguments[_i];
        return (_a = this._getContextManager()).with.apply(_a, $2c1e00df66d39ade$var$__spreadArray([
            context,
            fn,
            thisArg
        ], $2c1e00df66d39ade$var$__read(args), false));
    };
    /**
     * Bind a context to a target function or event emitter
     *
     * @param context context to bind to the event emitter or function. Defaults to the currently active context
     * @param target function or event emitter to bind
     */ ContextAPI.prototype.bind = function(context, target) {
        return this._getContextManager().bind(context, target);
    };
    ContextAPI.prototype._getContextManager = function() {
        return (0, $9ca752071c19610d$export$a4e55266d2135a7f)($2c1e00df66d39ade$var$API_NAME) || $2c1e00df66d39ade$var$NOOP_CONTEXT_MANAGER;
    };
    /** Disable and remove the global context manager */ ContextAPI.prototype.disable = function() {
        this._getContextManager().disable();
        (0, $9ca752071c19610d$export$d42ac835f38d1fb2)($2c1e00df66d39ade$var$API_NAME, (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance());
    };
    return ContextAPI;
}();


var $c903d3361d9a81c0$export$a078c61943f9dbbe = (0, $2c1e00df66d39ade$export$4148866f0a453927).getInstance();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.

var $f846a5aaeff49c57$export$c042e7c2f59bc046 = (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $12d56a20e98a76a5$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses
 * constant NoopMetrics for all of its methods.
 */ var $12d56a20e98a76a5$export$c23c6f85dd4fc1e9 = /** @class */ function() {
    function NoopMeter() {}
    /**
     * @see {@link Meter.createGauge}
     */ NoopMeter.prototype.createGauge = function(_name, _options) {
        return $12d56a20e98a76a5$export$dd01300aacbcec1c;
    };
    /**
     * @see {@link Meter.createHistogram}
     */ NoopMeter.prototype.createHistogram = function(_name, _options) {
        return $12d56a20e98a76a5$export$689c32a6a552e1a6;
    };
    /**
     * @see {@link Meter.createCounter}
     */ NoopMeter.prototype.createCounter = function(_name, _options) {
        return $12d56a20e98a76a5$export$e6d19fe5233efc54;
    };
    /**
     * @see {@link Meter.createUpDownCounter}
     */ NoopMeter.prototype.createUpDownCounter = function(_name, _options) {
        return $12d56a20e98a76a5$export$2f189cd99d2b7429;
    };
    /**
     * @see {@link Meter.createObservableGauge}
     */ NoopMeter.prototype.createObservableGauge = function(_name, _options) {
        return $12d56a20e98a76a5$export$ea67e3c6ff624776;
    };
    /**
     * @see {@link Meter.createObservableCounter}
     */ NoopMeter.prototype.createObservableCounter = function(_name, _options) {
        return $12d56a20e98a76a5$export$163422b94c3edbcb;
    };
    /**
     * @see {@link Meter.createObservableUpDownCounter}
     */ NoopMeter.prototype.createObservableUpDownCounter = function(_name, _options) {
        return $12d56a20e98a76a5$export$5b8be9ab17b673b3;
    };
    /**
     * @see {@link Meter.addBatchObservableCallback}
     */ NoopMeter.prototype.addBatchObservableCallback = function(_callback, _observables) {};
    /**
     * @see {@link Meter.removeBatchObservableCallback}
     */ NoopMeter.prototype.removeBatchObservableCallback = function(_callback) {};
    return NoopMeter;
}();
var $12d56a20e98a76a5$export$834a616d1cf278b = /** @class */ function() {
    function NoopMetric() {}
    return NoopMetric;
}();
var $12d56a20e98a76a5$export$b556ba0f560c45b = /** @class */ function(_super) {
    $12d56a20e98a76a5$var$__extends(NoopCounterMetric, _super);
    function NoopCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopCounterMetric.prototype.add = function(_value, _attributes) {};
    return NoopCounterMetric;
}($12d56a20e98a76a5$export$834a616d1cf278b);
var $12d56a20e98a76a5$export$df09a35db160df98 = /** @class */ function(_super) {
    $12d56a20e98a76a5$var$__extends(NoopUpDownCounterMetric, _super);
    function NoopUpDownCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopUpDownCounterMetric.prototype.add = function(_value, _attributes) {};
    return NoopUpDownCounterMetric;
}($12d56a20e98a76a5$export$834a616d1cf278b);
var $12d56a20e98a76a5$export$b7f4a3c7ea16c24 = /** @class */ function(_super) {
    $12d56a20e98a76a5$var$__extends(NoopGaugeMetric, _super);
    function NoopGaugeMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopGaugeMetric.prototype.record = function(_value, _attributes) {};
    return NoopGaugeMetric;
}($12d56a20e98a76a5$export$834a616d1cf278b);
var $12d56a20e98a76a5$export$ef064c3e0426c607 = /** @class */ function(_super) {
    $12d56a20e98a76a5$var$__extends(NoopHistogramMetric, _super);
    function NoopHistogramMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopHistogramMetric.prototype.record = function(_value, _attributes) {};
    return NoopHistogramMetric;
}($12d56a20e98a76a5$export$834a616d1cf278b);
var $12d56a20e98a76a5$export$a5a3e7829c289482 = /** @class */ function() {
    function NoopObservableMetric() {}
    NoopObservableMetric.prototype.addCallback = function(_callback) {};
    NoopObservableMetric.prototype.removeCallback = function(_callback) {};
    return NoopObservableMetric;
}();
var $12d56a20e98a76a5$export$7a7e4b169d5c93a8 = /** @class */ function(_super) {
    $12d56a20e98a76a5$var$__extends(NoopObservableCounterMetric, _super);
    function NoopObservableCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableCounterMetric;
}($12d56a20e98a76a5$export$a5a3e7829c289482);
var $12d56a20e98a76a5$export$6990a2f90809ffc1 = /** @class */ function(_super) {
    $12d56a20e98a76a5$var$__extends(NoopObservableGaugeMetric, _super);
    function NoopObservableGaugeMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableGaugeMetric;
}($12d56a20e98a76a5$export$a5a3e7829c289482);
var $12d56a20e98a76a5$export$3ec3555bc6f693a4 = /** @class */ function(_super) {
    $12d56a20e98a76a5$var$__extends(NoopObservableUpDownCounterMetric, _super);
    function NoopObservableUpDownCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableUpDownCounterMetric;
}($12d56a20e98a76a5$export$a5a3e7829c289482);
var $12d56a20e98a76a5$export$65e277d35235a01f = new $12d56a20e98a76a5$export$c23c6f85dd4fc1e9();
var $12d56a20e98a76a5$export$e6d19fe5233efc54 = new $12d56a20e98a76a5$export$b556ba0f560c45b();
var $12d56a20e98a76a5$export$dd01300aacbcec1c = new $12d56a20e98a76a5$export$b7f4a3c7ea16c24();
var $12d56a20e98a76a5$export$689c32a6a552e1a6 = new $12d56a20e98a76a5$export$ef064c3e0426c607();
var $12d56a20e98a76a5$export$2f189cd99d2b7429 = new $12d56a20e98a76a5$export$df09a35db160df98();
var $12d56a20e98a76a5$export$163422b94c3edbcb = new $12d56a20e98a76a5$export$7a7e4b169d5c93a8();
var $12d56a20e98a76a5$export$ea67e3c6ff624776 = new $12d56a20e98a76a5$export$6990a2f90809ffc1();
var $12d56a20e98a76a5$export$5b8be9ab17b673b3 = new $12d56a20e98a76a5$export$3ec3555bc6f693a4();
function $12d56a20e98a76a5$export$bc3a498ccbb5c2b5() {
    return $12d56a20e98a76a5$export$65e277d35235a01f;
}


/**
 * An implementation of the {@link MeterProvider} which returns an impotent Meter
 * for all calls to `getMeter`
 */ var $3ad3024196ff307f$export$51c513ea08316108 = /** @class */ function() {
    function NoopMeterProvider() {}
    NoopMeterProvider.prototype.getMeter = function(_name, _version, _options) {
        return 0, $12d56a20e98a76a5$export$65e277d35235a01f;
    };
    return NoopMeterProvider;
}();
var $3ad3024196ff307f$export$d21fe83355c56e18 = new $3ad3024196ff307f$export$51c513ea08316108();




var $7ac5a95b2a1a9bd6$var$API_NAME = "metrics";
/**
 * Singleton object which represents the entry point to the OpenTelemetry Metrics API
 */ var $7ac5a95b2a1a9bd6$export$1339f6eb6111c638 = /** @class */ function() {
    /** Empty private constructor prevents end users from constructing a new instance of the API */ function MetricsAPI() {}
    /** Get the singleton instance of the Metrics API */ MetricsAPI.getInstance = function() {
        if (!this._instance) this._instance = new MetricsAPI();
        return this._instance;
    };
    /**
     * Set the current global meter provider.
     * Returns true if the meter provider was successfully registered, else false.
     */ MetricsAPI.prototype.setGlobalMeterProvider = function(provider) {
        return (0, $9ca752071c19610d$export$d586ae880b433238)($7ac5a95b2a1a9bd6$var$API_NAME, provider, (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance());
    };
    /**
     * Returns the global meter provider.
     */ MetricsAPI.prototype.getMeterProvider = function() {
        return (0, $9ca752071c19610d$export$a4e55266d2135a7f)($7ac5a95b2a1a9bd6$var$API_NAME) || (0, $3ad3024196ff307f$export$d21fe83355c56e18);
    };
    /**
     * Returns a meter from the global meter provider.
     */ MetricsAPI.prototype.getMeter = function(name, version, options) {
        return this.getMeterProvider().getMeter(name, version, options);
    };
    /** Remove the global meter provider */ MetricsAPI.prototype.disable = function() {
        (0, $9ca752071c19610d$export$d42ac835f38d1fb2)($7ac5a95b2a1a9bd6$var$API_NAME, (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance());
    };
    return MetricsAPI;
}();


var $5a595f8022e2c266$export$b0c5c2fac8144e54 = (0, $7ac5a95b2a1a9bd6$export$1339f6eb6111c638).getInstance();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * No-op implementations of {@link TextMapPropagator}.
 */ var $12f72436c69ef3e7$export$8356c7eb3af7963b = /** @class */ function() {
    function NoopTextMapPropagator() {}
    /** Noop inject function does nothing */ NoopTextMapPropagator.prototype.inject = function(_context, _carrier) {};
    /** Noop extract function does nothing and returns the input context */ NoopTextMapPropagator.prototype.extract = function(context, _carrier) {
        return context;
    };
    NoopTextMapPropagator.prototype.fields = function() {
        return [];
    };
    return NoopTextMapPropagator;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $a0f789348e91e5dc$export$a0f575f55f38720a = {
    get: function(carrier, key) {
        if (carrier == null) return undefined;
        return carrier[key];
    },
    keys: function(carrier) {
        if (carrier == null) return [];
        return Object.keys(carrier);
    }
};
var $a0f789348e91e5dc$export$f70f1d111fccf1c1 = {
    set: function(carrier, key, value) {
        if (carrier == null) return;
        carrier[key] = value;
    }
};


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * Baggage key
 */ var $8ab57e672f0aaaa7$var$BAGGAGE_KEY = (0, $934e30cdbca38464$export$b8c322c5a7cfce78)("OpenTelemetry Baggage Key");
function $8ab57e672f0aaaa7$export$f3bffa0b5dd10d1e(context) {
    return context.getValue($8ab57e672f0aaaa7$var$BAGGAGE_KEY) || undefined;
}
function $8ab57e672f0aaaa7$export$120a1756099436ee() {
    return $8ab57e672f0aaaa7$export$f3bffa0b5dd10d1e((0, $2c1e00df66d39ade$export$4148866f0a453927).getInstance().active());
}
function $8ab57e672f0aaaa7$export$adc9ca19eab3f500(context, baggage) {
    return context.setValue($8ab57e672f0aaaa7$var$BAGGAGE_KEY, baggage);
}
function $8ab57e672f0aaaa7$export$4ca3a8a743c9f633(context) {
    return context.deleteValue($8ab57e672f0aaaa7$var$BAGGAGE_KEY);
}




var $8e1c6ff2aba1075e$var$API_NAME = "propagation";
var $8e1c6ff2aba1075e$var$NOOP_TEXT_MAP_PROPAGATOR = new (0, $12f72436c69ef3e7$export$8356c7eb3af7963b)();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */ var $8e1c6ff2aba1075e$export$471eda0a6213cac9 = /** @class */ function() {
    /** Empty private constructor prevents end users from constructing a new instance of the API */ function PropagationAPI() {
        this.createBaggage = (0, $d1ab8715d93ab9b4$export$1034a425c7384452);
        this.getBaggage = (0, $8ab57e672f0aaaa7$export$f3bffa0b5dd10d1e);
        this.getActiveBaggage = (0, $8ab57e672f0aaaa7$export$120a1756099436ee);
        this.setBaggage = (0, $8ab57e672f0aaaa7$export$adc9ca19eab3f500);
        this.deleteBaggage = (0, $8ab57e672f0aaaa7$export$4ca3a8a743c9f633);
    }
    /** Get the singleton instance of the Propagator API */ PropagationAPI.getInstance = function() {
        if (!this._instance) this._instance = new PropagationAPI();
        return this._instance;
    };
    /**
     * Set the current propagator.
     *
     * @returns true if the propagator was successfully registered, else false
     */ PropagationAPI.prototype.setGlobalPropagator = function(propagator) {
        return (0, $9ca752071c19610d$export$d586ae880b433238)($8e1c6ff2aba1075e$var$API_NAME, propagator, (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance());
    };
    /**
     * Inject context into a carrier to be propagated inter-process
     *
     * @param context Context carrying tracing data to inject
     * @param carrier carrier to inject context into
     * @param setter Function used to set values on the carrier
     */ PropagationAPI.prototype.inject = function(context, carrier, setter) {
        if (setter === void 0) setter = (0, $a0f789348e91e5dc$export$f70f1d111fccf1c1);
        return this._getGlobalPropagator().inject(context, carrier, setter);
    };
    /**
     * Extract context from a carrier
     *
     * @param context Context which the newly created context will inherit from
     * @param carrier Carrier to extract context from
     * @param getter Function used to extract keys from a carrier
     */ PropagationAPI.prototype.extract = function(context, carrier, getter) {
        if (getter === void 0) getter = (0, $a0f789348e91e5dc$export$a0f575f55f38720a);
        return this._getGlobalPropagator().extract(context, carrier, getter);
    };
    /**
     * Return a list of all fields which may be used by the propagator.
     */ PropagationAPI.prototype.fields = function() {
        return this._getGlobalPropagator().fields();
    };
    /** Remove the global propagator */ PropagationAPI.prototype.disable = function() {
        (0, $9ca752071c19610d$export$d42ac835f38d1fb2)($8e1c6ff2aba1075e$var$API_NAME, (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance());
    };
    PropagationAPI.prototype._getGlobalPropagator = function() {
        return (0, $9ca752071c19610d$export$a4e55266d2135a7f)($8e1c6ff2aba1075e$var$API_NAME) || $8e1c6ff2aba1075e$var$NOOP_TEXT_MAP_PROPAGATOR;
    };
    return PropagationAPI;
}();


var $341b7c0814521fae$export$3e49040daa9dba20 = (0, $8e1c6ff2aba1075e$export$471eda0a6213cac9).getInstance();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 


/**
 * span key
 */ var $efba308f067fe673$var$SPAN_KEY = (0, $934e30cdbca38464$export$b8c322c5a7cfce78)("OpenTelemetry Context Key SPAN");
function $efba308f067fe673$export$246e04ba06066af1(context) {
    return context.getValue($efba308f067fe673$var$SPAN_KEY) || undefined;
}
function $efba308f067fe673$export$1be426a8e585c83e() {
    return $efba308f067fe673$export$246e04ba06066af1((0, $2c1e00df66d39ade$export$4148866f0a453927).getInstance().active());
}
function $efba308f067fe673$export$8ab2f2e6ee8ed0a8(context, span) {
    return context.setValue($efba308f067fe673$var$SPAN_KEY, span);
}
function $efba308f067fe673$export$a6bbfe9a17f7941c(context) {
    return context.deleteValue($efba308f067fe673$var$SPAN_KEY);
}
function $efba308f067fe673$export$c90bf5428c14cdb1(context, spanContext) {
    return $efba308f067fe673$export$8ab2f2e6ee8ed0a8(context, new (0, $42d3c3f1fe42fcae$export$972d28f7c6a8c6c7)(spanContext));
}
function $efba308f067fe673$export$1a635f8f0b912781(context) {
    var _a;
    return (_a = $efba308f067fe673$export$246e04ba06066af1(context)) === null || _a === void 0 ? void 0 : _a.spanContext();
}




var $4af2d4e4dda2e75d$var$contextApi = (0, $2c1e00df66d39ade$export$4148866f0a453927).getInstance();
/**
 * No-op implementations of {@link Tracer}.
 */ var $4af2d4e4dda2e75d$export$714c1036cabcd223 = /** @class */ function() {
    function NoopTracer() {}
    // startSpan starts a noop span.
    NoopTracer.prototype.startSpan = function(name, options, context) {
        if (context === void 0) context = $4af2d4e4dda2e75d$var$contextApi.active();
        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
        if (root) return new (0, $42d3c3f1fe42fcae$export$972d28f7c6a8c6c7)();
        var parentFromContext = context && (0, $efba308f067fe673$export$1a635f8f0b912781)(context);
        if ($4af2d4e4dda2e75d$var$isSpanContext(parentFromContext) && (0, $9019f25568a7d9bd$export$e4373b9a2c09216c)(parentFromContext)) return new (0, $42d3c3f1fe42fcae$export$972d28f7c6a8c6c7)(parentFromContext);
        else return new (0, $42d3c3f1fe42fcae$export$972d28f7c6a8c6c7)();
    };
    NoopTracer.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) return;
        else if (arguments.length === 2) fn = arg2;
        else if (arguments.length === 3) {
            opts = arg2;
            fn = arg3;
        } else {
            opts = arg2;
            ctx = arg3;
            fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : $4af2d4e4dda2e75d$var$contextApi.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = (0, $efba308f067fe673$export$8ab2f2e6ee8ed0a8)(parentContext, span);
        return $4af2d4e4dda2e75d$var$contextApi.with(contextWithSpanSet, fn, undefined, span);
    };
    return NoopTracer;
}();
function $4af2d4e4dda2e75d$var$isSpanContext(spanContext) {
    return typeof spanContext === "object" && typeof spanContext["spanId"] === "string" && typeof spanContext["traceId"] === "string" && typeof spanContext["traceFlags"] === "number";
}


var $bb51fa02f6f6c2c6$var$NOOP_TRACER = new (0, $4af2d4e4dda2e75d$export$714c1036cabcd223)();
/**
 * Proxy tracer provided by the proxy tracer provider
 */ var $bb51fa02f6f6c2c6$export$df2c38268c6bb6b3 = /** @class */ function() {
    function ProxyTracer(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
    }
    ProxyTracer.prototype.startSpan = function(name, options, context) {
        return this._getTracer().startSpan(name, options, context);
    };
    ProxyTracer.prototype.startActiveSpan = function(_name, _options, _context, _fn) {
        var tracer = this._getTracer();
        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
    };
    /**
     * Try to get a tracer from the proxy tracer provider.
     * If the proxy tracer provider has no delegate, return a noop tracer.
     */ ProxyTracer.prototype._getTracer = function() {
        if (this._delegate) return this._delegate;
        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);
        if (!tracer) return $bb51fa02f6f6c2c6$var$NOOP_TRACER;
        this._delegate = tracer;
        return this._delegate;
    };
    return ProxyTracer;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/**
 * An implementation of the {@link TracerProvider} which returns an impotent
 * Tracer for all calls to `getTracer`.
 *
 * All operations are no-op.
 */ var $e65453c96dc5126c$export$87d8e93756f9e86e = /** @class */ function() {
    function NoopTracerProvider() {}
    NoopTracerProvider.prototype.getTracer = function(_name, _version, _options) {
        return new (0, $4af2d4e4dda2e75d$export$714c1036cabcd223)();
    };
    return NoopTracerProvider;
}();


var $b8ea63161ee7a92e$var$NOOP_TRACER_PROVIDER = new (0, $e65453c96dc5126c$export$87d8e93756f9e86e)();
/**
 * Tracer provider which provides {@link ProxyTracer}s.
 *
 * Before a delegate is set, tracers provided are NoOp.
 *   When a delegate is set, traces are provided from the delegate.
 *   When a delegate is set after tracers have already been provided,
 *   all tracers already provided will use the provided delegate implementation.
 */ var $b8ea63161ee7a92e$export$4137aabcb4254962 = /** @class */ function() {
    function ProxyTracerProvider() {}
    /**
     * Get a {@link ProxyTracer}
     */ ProxyTracerProvider.prototype.getTracer = function(name, version, options) {
        var _a;
        return (_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new (0, $bb51fa02f6f6c2c6$export$df2c38268c6bb6b3)(this, name, version, options);
    };
    ProxyTracerProvider.prototype.getDelegate = function() {
        var _a;
        return (_a = this._delegate) !== null && _a !== void 0 ? _a : $b8ea63161ee7a92e$var$NOOP_TRACER_PROVIDER;
    };
    /**
     * Set the delegate tracer provider
     */ ProxyTracerProvider.prototype.setDelegate = function(delegate) {
        this._delegate = delegate;
    };
    ProxyTracerProvider.prototype.getDelegateTracer = function(name, version, options) {
        var _a;
        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);
    };
    return ProxyTracerProvider;
}();





var $83116d02b018c52b$var$API_NAME = "trace";
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */ var $83116d02b018c52b$export$2cccde6fcc7b568a = /** @class */ function() {
    /** Empty private constructor prevents end users from constructing a new instance of the API */ function TraceAPI() {
        this._proxyTracerProvider = new (0, $b8ea63161ee7a92e$export$4137aabcb4254962)();
        this.wrapSpanContext = (0, $9019f25568a7d9bd$export$c19cc0f1911bdb85);
        this.isSpanContextValid = (0, $9019f25568a7d9bd$export$e4373b9a2c09216c);
        this.deleteSpan = (0, $efba308f067fe673$export$a6bbfe9a17f7941c);
        this.getSpan = (0, $efba308f067fe673$export$246e04ba06066af1);
        this.getActiveSpan = (0, $efba308f067fe673$export$1be426a8e585c83e);
        this.getSpanContext = (0, $efba308f067fe673$export$1a635f8f0b912781);
        this.setSpan = (0, $efba308f067fe673$export$8ab2f2e6ee8ed0a8);
        this.setSpanContext = (0, $efba308f067fe673$export$c90bf5428c14cdb1);
    }
    /** Get the singleton instance of the Trace API */ TraceAPI.getInstance = function() {
        if (!this._instance) this._instance = new TraceAPI();
        return this._instance;
    };
    /**
     * Set the current global tracer.
     *
     * @returns true if the tracer provider was successfully registered, else false
     */ TraceAPI.prototype.setGlobalTracerProvider = function(provider) {
        var success = (0, $9ca752071c19610d$export$d586ae880b433238)($83116d02b018c52b$var$API_NAME, this._proxyTracerProvider, (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance());
        if (success) this._proxyTracerProvider.setDelegate(provider);
        return success;
    };
    /**
     * Returns the global tracer provider.
     */ TraceAPI.prototype.getTracerProvider = function() {
        return (0, $9ca752071c19610d$export$a4e55266d2135a7f)($83116d02b018c52b$var$API_NAME) || this._proxyTracerProvider;
    };
    /**
     * Returns a tracer from the global tracer provider.
     */ TraceAPI.prototype.getTracer = function(name, version) {
        return this.getTracerProvider().getTracer(name, version);
    };
    /** Remove the global tracer provider */ TraceAPI.prototype.disable = function() {
        (0, $9ca752071c19610d$export$d42ac835f38d1fb2)($83116d02b018c52b$var$API_NAME, (0, $5e9120c1387d2385$export$5c8937ffc688cfd3).instance());
        this._proxyTracerProvider = new (0, $b8ea63161ee7a92e$export$4137aabcb4254962)();
    };
    return TraceAPI;
}();


var $d3d11f3bc96c5059$export$357889f174732d38 = (0, $83116d02b018c52b$export$2cccde6fcc7b568a).getInstance();


var // Default export.
$67c8837d86f3b191$export$2e2bcd8739ae039 = {
    context: (0, $c903d3361d9a81c0$export$a078c61943f9dbbe),
    diag: (0, $f846a5aaeff49c57$export$c042e7c2f59bc046),
    metrics: (0, $5a595f8022e2c266$export$b0c5c2fac8144e54),
    propagation: (0, $341b7c0814521fae$export$3e49040daa9dba20),
    trace: (0, $d3d11f3bc96c5059$export$357889f174732d38)
};


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 




/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Updates to this file should also be replicated to @opentelemetry/api and
// @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */ /** only globals that common to node and browsers are allowed */ // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var $174e98842fc4d9b0$export$5c524ddf7208c00c = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof $parcel$global === "object" ? $parcel$global : {};


var $abc0584afbe0e82e$export$be5e405504011951 = Symbol.for("io.opentelemetry.js.api.logs");
var $abc0584afbe0e82e$export$fb1208122242c205 = (0, $174e98842fc4d9b0$export$5c524ddf7208c00c);
function $abc0584afbe0e82e$export$bf9e00ce1090794f(requiredVersion, instance, fallback) {
    return function(version) {
        return version === requiredVersion ? instance : fallback;
    };
}
var $abc0584afbe0e82e$export$41e8763f7160bb4 = 1;


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $fb0992cdbc853f16$export$d16ba98760c74dd5 = /** @class */ function() {
    function NoopLogger() {}
    NoopLogger.prototype.emit = function(_logRecord) {};
    return NoopLogger;
}();
var $fb0992cdbc853f16$export$f5681b99b7ff4eb3 = new $fb0992cdbc853f16$export$d16ba98760c74dd5();


var $533ed5f338f3c2fc$export$8d7f6fb42e615208 = /** @class */ function() {
    function NoopLoggerProvider() {}
    NoopLoggerProvider.prototype.getLogger = function(_name, _version, _options) {
        return new (0, $fb0992cdbc853f16$export$d16ba98760c74dd5)();
    };
    return NoopLoggerProvider;
}();
var $533ed5f338f3c2fc$export$ade97358fd6ba8df = new $533ed5f338f3c2fc$export$8d7f6fb42e615208();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $9c0555f2eb181ab7$export$ed6b4cba4dd55d4b = /** @class */ function() {
    function ProxyLogger(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
    }
    /**
     * Emit a log record. This method should only be used by log appenders.
     *
     * @param logRecord
     */ ProxyLogger.prototype.emit = function(logRecord) {
        this._getLogger().emit(logRecord);
    };
    /**
     * Try to get a logger from the proxy logger provider.
     * If the proxy logger provider has no delegate, return a noop logger.
     */ ProxyLogger.prototype._getLogger = function() {
        if (this._delegate) return this._delegate;
        var logger = this._provider.getDelegateLogger(this.name, this.version, this.options);
        if (!logger) return 0, $fb0992cdbc853f16$export$f5681b99b7ff4eb3;
        this._delegate = logger;
        return this._delegate;
    };
    return ProxyLogger;
}();


var $91a89556c711fde2$export$f72276fc3bc2aaa4 = /** @class */ function() {
    function ProxyLoggerProvider() {}
    ProxyLoggerProvider.prototype.getLogger = function(name, version, options) {
        var _a;
        return (_a = this.getDelegateLogger(name, version, options)) !== null && _a !== void 0 ? _a : new (0, $9c0555f2eb181ab7$export$ed6b4cba4dd55d4b)(this, name, version, options);
    };
    ProxyLoggerProvider.prototype.getDelegate = function() {
        var _a;
        return (_a = this._delegate) !== null && _a !== void 0 ? _a : (0, $533ed5f338f3c2fc$export$ade97358fd6ba8df);
    };
    /**
     * Set the delegate logger provider
     */ ProxyLoggerProvider.prototype.setDelegate = function(delegate) {
        this._delegate = delegate;
    };
    ProxyLoggerProvider.prototype.getDelegateLogger = function(name, version, options) {
        var _a;
        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getLogger(name, version, options);
    };
    return ProxyLoggerProvider;
}();


var $ec458c8d60cd3b5f$export$f8e63508eb6a0fc1 = /** @class */ function() {
    function LogsAPI() {
        this._proxyLoggerProvider = new (0, $91a89556c711fde2$export$f72276fc3bc2aaa4)();
    }
    LogsAPI.getInstance = function() {
        if (!this._instance) this._instance = new LogsAPI();
        return this._instance;
    };
    LogsAPI.prototype.setGlobalLoggerProvider = function(provider) {
        if ((0, $abc0584afbe0e82e$export$fb1208122242c205)[0, $abc0584afbe0e82e$export$be5e405504011951]) return this.getLoggerProvider();
        (0, $abc0584afbe0e82e$export$fb1208122242c205)[0, $abc0584afbe0e82e$export$be5e405504011951] = (0, $abc0584afbe0e82e$export$bf9e00ce1090794f)((0, $abc0584afbe0e82e$export$41e8763f7160bb4), provider, (0, $533ed5f338f3c2fc$export$ade97358fd6ba8df));
        this._proxyLoggerProvider.setDelegate(provider);
        return provider;
    };
    /**
     * Returns the global logger provider.
     *
     * @returns LoggerProvider
     */ LogsAPI.prototype.getLoggerProvider = function() {
        var _a, _b;
        return (_b = (_a = (0, $abc0584afbe0e82e$export$fb1208122242c205)[0, $abc0584afbe0e82e$export$be5e405504011951]) === null || _a === void 0 ? void 0 : _a.call((0, $abc0584afbe0e82e$export$fb1208122242c205), (0, $abc0584afbe0e82e$export$41e8763f7160bb4))) !== null && _b !== void 0 ? _b : this._proxyLoggerProvider;
    };
    /**
     * Returns a logger from the global logger provider.
     *
     * @returns Logger
     */ LogsAPI.prototype.getLogger = function(name, version, options) {
        return this.getLoggerProvider().getLogger(name, version, options);
    };
    /** Remove the global logger provider */ LogsAPI.prototype.disable = function() {
        delete (0, $abc0584afbe0e82e$export$fb1208122242c205)[0, $abc0584afbe0e82e$export$be5e405504011951];
        this._proxyLoggerProvider = new (0, $91a89556c711fde2$export$f72276fc3bc2aaa4)();
    };
    return LogsAPI;
}();


var $910b1b62fcec8cc9$export$fa0831f497706bad = (0, $ec458c8d60cd3b5f$export$f8e63508eb6a0fc1).getInstance();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Enable instrumentations
 * @param instrumentations
 * @param tracerProvider
 * @param meterProvider
 */ function $18455cb4ab530903$export$56a6415128a54b1(instrumentations, tracerProvider, meterProvider, loggerProvider) {
    for(var i = 0, j = instrumentations.length; i < j; i++){
        var instrumentation = instrumentations[i];
        if (tracerProvider) instrumentation.setTracerProvider(tracerProvider);
        if (meterProvider) instrumentation.setMeterProvider(meterProvider);
        if (loggerProvider && instrumentation.setLoggerProvider) instrumentation.setLoggerProvider(loggerProvider);
        // instrumentations have been already enabled during creation
        // so enable only if user prevented that by setting enabled to false
        // this is to prevent double enabling but when calling register all
        // instrumentations should be now enabled
        if (!instrumentation.getConfig().enabled) instrumentation.enable();
    }
}
function $18455cb4ab530903$export$c7d87b302116dc69(instrumentations) {
    instrumentations.forEach(function(instrumentation) {
        return instrumentation.disable();
    });
}


function $dfa56a393e7e8c2d$export$fc0a1ca5231d826a(options) {
    var _a, _b;
    var tracerProvider = options.tracerProvider || (0, $d3d11f3bc96c5059$export$357889f174732d38).getTracerProvider();
    var meterProvider = options.meterProvider || (0, $5a595f8022e2c266$export$b0c5c2fac8144e54).getMeterProvider();
    var loggerProvider = options.loggerProvider || (0, $910b1b62fcec8cc9$export$fa0831f497706bad).getLoggerProvider();
    var instrumentations = (_b = (_a = options.instrumentations) === null || _a === void 0 ? void 0 : _a.flat()) !== null && _b !== void 0 ? _b : [];
    (0, $18455cb4ab530903$export$56a6415128a54b1)(instrumentations, tracerProvider, meterProvider, loggerProvider);
    return function() {
        (0, $18455cb4ab530903$export$c7d87b302116dc69)(instrumentations);
    };
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Creates a const map from the given values
 * @param values - An array of values to be used as keys and values in the map.
 * @returns A populated version of the map with the values and keys derived from the values.
 */ /*#__NO_SIDE_EFFECTS__*/ function $0c3d162a8cf71ab8$export$8796db7ca257d576(values) {
    // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any
    var res = {};
    var len = values.length;
    for(var lp = 0; lp < len; lp++){
        var val = values[lp];
        if (val) res[String(val).toUpperCase().replace(/[-.]/g, "_")] = val;
    }
    return res;
}


//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2
//----------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------
// Constant values for SemanticResourceAttributes
//----------------------------------------------------------------------------------------------------------
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3e449e72bc3fc4f$var$TMP_CLOUD_PROVIDER = "cloud.provider";
var $a3e449e72bc3fc4f$var$TMP_CLOUD_ACCOUNT_ID = "cloud.account.id";
var $a3e449e72bc3fc4f$var$TMP_CLOUD_REGION = "cloud.region";
var $a3e449e72bc3fc4f$var$TMP_CLOUD_AVAILABILITY_ZONE = "cloud.availability_zone";
var $a3e449e72bc3fc4f$var$TMP_CLOUD_PLATFORM = "cloud.platform";
var $a3e449e72bc3fc4f$var$TMP_AWS_ECS_CONTAINER_ARN = "aws.ecs.container.arn";
var $a3e449e72bc3fc4f$var$TMP_AWS_ECS_CLUSTER_ARN = "aws.ecs.cluster.arn";
var $a3e449e72bc3fc4f$var$TMP_AWS_ECS_LAUNCHTYPE = "aws.ecs.launchtype";
var $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_ARN = "aws.ecs.task.arn";
var $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_FAMILY = "aws.ecs.task.family";
var $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_REVISION = "aws.ecs.task.revision";
var $a3e449e72bc3fc4f$var$TMP_AWS_EKS_CLUSTER_ARN = "aws.eks.cluster.arn";
var $a3e449e72bc3fc4f$var$TMP_AWS_LOG_GROUP_NAMES = "aws.log.group.names";
var $a3e449e72bc3fc4f$var$TMP_AWS_LOG_GROUP_ARNS = "aws.log.group.arns";
var $a3e449e72bc3fc4f$var$TMP_AWS_LOG_STREAM_NAMES = "aws.log.stream.names";
var $a3e449e72bc3fc4f$var$TMP_AWS_LOG_STREAM_ARNS = "aws.log.stream.arns";
var $a3e449e72bc3fc4f$var$TMP_CONTAINER_NAME = "container.name";
var $a3e449e72bc3fc4f$var$TMP_CONTAINER_ID = "container.id";
var $a3e449e72bc3fc4f$var$TMP_CONTAINER_RUNTIME = "container.runtime";
var $a3e449e72bc3fc4f$var$TMP_CONTAINER_IMAGE_NAME = "container.image.name";
var $a3e449e72bc3fc4f$var$TMP_CONTAINER_IMAGE_TAG = "container.image.tag";
var $a3e449e72bc3fc4f$var$TMP_DEPLOYMENT_ENVIRONMENT = "deployment.environment";
var $a3e449e72bc3fc4f$var$TMP_DEVICE_ID = "device.id";
var $a3e449e72bc3fc4f$var$TMP_DEVICE_MODEL_IDENTIFIER = "device.model.identifier";
var $a3e449e72bc3fc4f$var$TMP_DEVICE_MODEL_NAME = "device.model.name";
var $a3e449e72bc3fc4f$var$TMP_FAAS_NAME = "faas.name";
var $a3e449e72bc3fc4f$var$TMP_FAAS_ID = "faas.id";
var $a3e449e72bc3fc4f$var$TMP_FAAS_VERSION = "faas.version";
var $a3e449e72bc3fc4f$var$TMP_FAAS_INSTANCE = "faas.instance";
var $a3e449e72bc3fc4f$var$TMP_FAAS_MAX_MEMORY = "faas.max_memory";
var $a3e449e72bc3fc4f$var$TMP_HOST_ID = "host.id";
var $a3e449e72bc3fc4f$var$TMP_HOST_NAME = "host.name";
var $a3e449e72bc3fc4f$var$TMP_HOST_TYPE = "host.type";
var $a3e449e72bc3fc4f$var$TMP_HOST_ARCH = "host.arch";
var $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_NAME = "host.image.name";
var $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_ID = "host.image.id";
var $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_VERSION = "host.image.version";
var $a3e449e72bc3fc4f$var$TMP_K8S_CLUSTER_NAME = "k8s.cluster.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_NODE_NAME = "k8s.node.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_NODE_UID = "k8s.node.uid";
var $a3e449e72bc3fc4f$var$TMP_K8S_NAMESPACE_NAME = "k8s.namespace.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_POD_UID = "k8s.pod.uid";
var $a3e449e72bc3fc4f$var$TMP_K8S_POD_NAME = "k8s.pod.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_CONTAINER_NAME = "k8s.container.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_REPLICASET_UID = "k8s.replicaset.uid";
var $a3e449e72bc3fc4f$var$TMP_K8S_REPLICASET_NAME = "k8s.replicaset.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_DEPLOYMENT_UID = "k8s.deployment.uid";
var $a3e449e72bc3fc4f$var$TMP_K8S_DEPLOYMENT_NAME = "k8s.deployment.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_STATEFULSET_UID = "k8s.statefulset.uid";
var $a3e449e72bc3fc4f$var$TMP_K8S_STATEFULSET_NAME = "k8s.statefulset.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_DAEMONSET_UID = "k8s.daemonset.uid";
var $a3e449e72bc3fc4f$var$TMP_K8S_DAEMONSET_NAME = "k8s.daemonset.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_JOB_UID = "k8s.job.uid";
var $a3e449e72bc3fc4f$var$TMP_K8S_JOB_NAME = "k8s.job.name";
var $a3e449e72bc3fc4f$var$TMP_K8S_CRONJOB_UID = "k8s.cronjob.uid";
var $a3e449e72bc3fc4f$var$TMP_K8S_CRONJOB_NAME = "k8s.cronjob.name";
var $a3e449e72bc3fc4f$var$TMP_OS_TYPE = "os.type";
var $a3e449e72bc3fc4f$var$TMP_OS_DESCRIPTION = "os.description";
var $a3e449e72bc3fc4f$var$TMP_OS_NAME = "os.name";
var $a3e449e72bc3fc4f$var$TMP_OS_VERSION = "os.version";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_PID = "process.pid";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_EXECUTABLE_NAME = "process.executable.name";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_EXECUTABLE_PATH = "process.executable.path";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND = "process.command";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND_LINE = "process.command_line";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND_ARGS = "process.command_args";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_OWNER = "process.owner";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_NAME = "process.runtime.name";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_VERSION = "process.runtime.version";
var $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_DESCRIPTION = "process.runtime.description";
var $a3e449e72bc3fc4f$var$TMP_SERVICE_NAME = "service.name";
var $a3e449e72bc3fc4f$var$TMP_SERVICE_NAMESPACE = "service.namespace";
var $a3e449e72bc3fc4f$var$TMP_SERVICE_INSTANCE_ID = "service.instance.id";
var $a3e449e72bc3fc4f$var$TMP_SERVICE_VERSION = "service.version";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_NAME = "telemetry.sdk.name";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_LANGUAGE = "telemetry.sdk.language";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_VERSION = "telemetry.sdk.version";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRY_AUTO_VERSION = "telemetry.auto.version";
var $a3e449e72bc3fc4f$var$TMP_WEBENGINE_NAME = "webengine.name";
var $a3e449e72bc3fc4f$var$TMP_WEBENGINE_VERSION = "webengine.version";
var $a3e449e72bc3fc4f$var$TMP_WEBENGINE_DESCRIPTION = "webengine.description";
var $a3e449e72bc3fc4f$export$9fa486cd651f5f18 = $a3e449e72bc3fc4f$var$TMP_CLOUD_PROVIDER;
var $a3e449e72bc3fc4f$export$3b9e160fb5fd0b48 = $a3e449e72bc3fc4f$var$TMP_CLOUD_ACCOUNT_ID;
var $a3e449e72bc3fc4f$export$7dda4a2b7e6f2925 = $a3e449e72bc3fc4f$var$TMP_CLOUD_REGION;
var $a3e449e72bc3fc4f$export$ba02b007970def42 = $a3e449e72bc3fc4f$var$TMP_CLOUD_AVAILABILITY_ZONE;
var $a3e449e72bc3fc4f$export$112df106e7dd2eda = $a3e449e72bc3fc4f$var$TMP_CLOUD_PLATFORM;
var $a3e449e72bc3fc4f$export$a43adfce130205e = $a3e449e72bc3fc4f$var$TMP_AWS_ECS_CONTAINER_ARN;
var $a3e449e72bc3fc4f$export$2ba3c01be08dc7b1 = $a3e449e72bc3fc4f$var$TMP_AWS_ECS_CLUSTER_ARN;
var $a3e449e72bc3fc4f$export$323329f2ad65b2aa = $a3e449e72bc3fc4f$var$TMP_AWS_ECS_LAUNCHTYPE;
var $a3e449e72bc3fc4f$export$5275732a76e56248 = $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_ARN;
var $a3e449e72bc3fc4f$export$fb3f0b7a7be1babd = $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_FAMILY;
var $a3e449e72bc3fc4f$export$3ed6f78d5dfa8242 = $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_REVISION;
var $a3e449e72bc3fc4f$export$a7708dae05d391dc = $a3e449e72bc3fc4f$var$TMP_AWS_EKS_CLUSTER_ARN;
var $a3e449e72bc3fc4f$export$bf434df1f3c89b1 = $a3e449e72bc3fc4f$var$TMP_AWS_LOG_GROUP_NAMES;
var $a3e449e72bc3fc4f$export$c522b98ccd83a439 = $a3e449e72bc3fc4f$var$TMP_AWS_LOG_GROUP_ARNS;
var $a3e449e72bc3fc4f$export$40794b06cac6b1bc = $a3e449e72bc3fc4f$var$TMP_AWS_LOG_STREAM_NAMES;
var $a3e449e72bc3fc4f$export$c9f081f4b744b01b = $a3e449e72bc3fc4f$var$TMP_AWS_LOG_STREAM_ARNS;
var $a3e449e72bc3fc4f$export$3e6fef409a60fc1e = $a3e449e72bc3fc4f$var$TMP_CONTAINER_NAME;
var $a3e449e72bc3fc4f$export$4d0381aa96fe1c3b = $a3e449e72bc3fc4f$var$TMP_CONTAINER_ID;
var $a3e449e72bc3fc4f$export$8806c0adf7bb0584 = $a3e449e72bc3fc4f$var$TMP_CONTAINER_RUNTIME;
var $a3e449e72bc3fc4f$export$44771c6519c06259 = $a3e449e72bc3fc4f$var$TMP_CONTAINER_IMAGE_NAME;
var $a3e449e72bc3fc4f$export$9f5798300d33c86b = $a3e449e72bc3fc4f$var$TMP_CONTAINER_IMAGE_TAG;
var $a3e449e72bc3fc4f$export$4783aaf4e8f7afa0 = $a3e449e72bc3fc4f$var$TMP_DEPLOYMENT_ENVIRONMENT;
var $a3e449e72bc3fc4f$export$6e497113334fabdb = $a3e449e72bc3fc4f$var$TMP_DEVICE_ID;
var $a3e449e72bc3fc4f$export$73c71cc1c141692b = $a3e449e72bc3fc4f$var$TMP_DEVICE_MODEL_IDENTIFIER;
var $a3e449e72bc3fc4f$export$44e87b3b8704bc8a = $a3e449e72bc3fc4f$var$TMP_DEVICE_MODEL_NAME;
var $a3e449e72bc3fc4f$export$fe110625e5aee93d = $a3e449e72bc3fc4f$var$TMP_FAAS_NAME;
var $a3e449e72bc3fc4f$export$6bbd0c1523702b22 = $a3e449e72bc3fc4f$var$TMP_FAAS_ID;
var $a3e449e72bc3fc4f$export$b1cb8996c7f671f1 = $a3e449e72bc3fc4f$var$TMP_FAAS_VERSION;
var $a3e449e72bc3fc4f$export$aa4a460944af09fe = $a3e449e72bc3fc4f$var$TMP_FAAS_INSTANCE;
var $a3e449e72bc3fc4f$export$a099969737f46339 = $a3e449e72bc3fc4f$var$TMP_FAAS_MAX_MEMORY;
var $a3e449e72bc3fc4f$export$e0a684ea09b55cf4 = $a3e449e72bc3fc4f$var$TMP_HOST_ID;
var $a3e449e72bc3fc4f$export$3b62edd76224926e = $a3e449e72bc3fc4f$var$TMP_HOST_NAME;
var $a3e449e72bc3fc4f$export$ba26ec134241ab05 = $a3e449e72bc3fc4f$var$TMP_HOST_TYPE;
var $a3e449e72bc3fc4f$export$4ef6e9b690c5d3ad = $a3e449e72bc3fc4f$var$TMP_HOST_ARCH;
var $a3e449e72bc3fc4f$export$80c1be409ca0daf7 = $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_NAME;
var $a3e449e72bc3fc4f$export$ae211b0849dd0d75 = $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_ID;
var $a3e449e72bc3fc4f$export$729ea06c32794759 = $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_VERSION;
var $a3e449e72bc3fc4f$export$9e0ac736c1d187bc = $a3e449e72bc3fc4f$var$TMP_K8S_CLUSTER_NAME;
var $a3e449e72bc3fc4f$export$e2479edf033ed1cd = $a3e449e72bc3fc4f$var$TMP_K8S_NODE_NAME;
var $a3e449e72bc3fc4f$export$a348ce0508cee2d8 = $a3e449e72bc3fc4f$var$TMP_K8S_NODE_UID;
var $a3e449e72bc3fc4f$export$f74f5d90b490f9a6 = $a3e449e72bc3fc4f$var$TMP_K8S_NAMESPACE_NAME;
var $a3e449e72bc3fc4f$export$341429c1b099564 = $a3e449e72bc3fc4f$var$TMP_K8S_POD_UID;
var $a3e449e72bc3fc4f$export$9e6f11bbfd666f4d = $a3e449e72bc3fc4f$var$TMP_K8S_POD_NAME;
var $a3e449e72bc3fc4f$export$ee1ae14ab5631334 = $a3e449e72bc3fc4f$var$TMP_K8S_CONTAINER_NAME;
var $a3e449e72bc3fc4f$export$845974e52d5d977b = $a3e449e72bc3fc4f$var$TMP_K8S_REPLICASET_UID;
var $a3e449e72bc3fc4f$export$1735237e4ef99ddc = $a3e449e72bc3fc4f$var$TMP_K8S_REPLICASET_NAME;
var $a3e449e72bc3fc4f$export$ff557043393b8413 = $a3e449e72bc3fc4f$var$TMP_K8S_DEPLOYMENT_UID;
var $a3e449e72bc3fc4f$export$1b29810364e6fd87 = $a3e449e72bc3fc4f$var$TMP_K8S_DEPLOYMENT_NAME;
var $a3e449e72bc3fc4f$export$fd37db901d73f6dc = $a3e449e72bc3fc4f$var$TMP_K8S_STATEFULSET_UID;
var $a3e449e72bc3fc4f$export$8030a8ee6a430fb9 = $a3e449e72bc3fc4f$var$TMP_K8S_STATEFULSET_NAME;
var $a3e449e72bc3fc4f$export$6369d5a7f9c03019 = $a3e449e72bc3fc4f$var$TMP_K8S_DAEMONSET_UID;
var $a3e449e72bc3fc4f$export$f55c2f841978e686 = $a3e449e72bc3fc4f$var$TMP_K8S_DAEMONSET_NAME;
var $a3e449e72bc3fc4f$export$1618e60c71672510 = $a3e449e72bc3fc4f$var$TMP_K8S_JOB_UID;
var $a3e449e72bc3fc4f$export$fae3f547adbfd628 = $a3e449e72bc3fc4f$var$TMP_K8S_JOB_NAME;
var $a3e449e72bc3fc4f$export$c6a5d371a9279cc4 = $a3e449e72bc3fc4f$var$TMP_K8S_CRONJOB_UID;
var $a3e449e72bc3fc4f$export$2411967a413e48d4 = $a3e449e72bc3fc4f$var$TMP_K8S_CRONJOB_NAME;
var $a3e449e72bc3fc4f$export$832bf06644fbf55d = $a3e449e72bc3fc4f$var$TMP_OS_TYPE;
var $a3e449e72bc3fc4f$export$5ea67b5ceab8e5b2 = $a3e449e72bc3fc4f$var$TMP_OS_DESCRIPTION;
var $a3e449e72bc3fc4f$export$ba2bcf7e30621987 = $a3e449e72bc3fc4f$var$TMP_OS_NAME;
var $a3e449e72bc3fc4f$export$e0381cc218bde593 = $a3e449e72bc3fc4f$var$TMP_OS_VERSION;
var $a3e449e72bc3fc4f$export$f184e78598ab0d4c = $a3e449e72bc3fc4f$var$TMP_PROCESS_PID;
var $a3e449e72bc3fc4f$export$e2e53a1071096d12 = $a3e449e72bc3fc4f$var$TMP_PROCESS_EXECUTABLE_NAME;
var $a3e449e72bc3fc4f$export$cc1c2bacfc72d251 = $a3e449e72bc3fc4f$var$TMP_PROCESS_EXECUTABLE_PATH;
var $a3e449e72bc3fc4f$export$1921c91b182b21e6 = $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND;
var $a3e449e72bc3fc4f$export$33d6a2745a92e4bf = $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND_LINE;
var $a3e449e72bc3fc4f$export$1a3243771890bbd7 = $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND_ARGS;
var $a3e449e72bc3fc4f$export$5bc9efe4d24f374b = $a3e449e72bc3fc4f$var$TMP_PROCESS_OWNER;
var $a3e449e72bc3fc4f$export$6c52ea893832d871 = $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_NAME;
var $a3e449e72bc3fc4f$export$7c038ff97737b111 = $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_VERSION;
var $a3e449e72bc3fc4f$export$cae71c4fbbf205fb = $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_DESCRIPTION;
var $a3e449e72bc3fc4f$export$48c68257f49298c9 = $a3e449e72bc3fc4f$var$TMP_SERVICE_NAME;
var $a3e449e72bc3fc4f$export$77c0752ab7c26c9 = $a3e449e72bc3fc4f$var$TMP_SERVICE_NAMESPACE;
var $a3e449e72bc3fc4f$export$bb5ecf41777e0d0c = $a3e449e72bc3fc4f$var$TMP_SERVICE_INSTANCE_ID;
var $a3e449e72bc3fc4f$export$202d10b361b87ab2 = $a3e449e72bc3fc4f$var$TMP_SERVICE_VERSION;
var $a3e449e72bc3fc4f$export$2d668a3bde1cddea = $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_NAME;
var $a3e449e72bc3fc4f$export$b5c1717bbc4c6044 = $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_LANGUAGE;
var $a3e449e72bc3fc4f$export$e0b67501ecc1df37 = $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_VERSION;
var $a3e449e72bc3fc4f$export$3d43fbbcabb62eca = $a3e449e72bc3fc4f$var$TMP_TELEMETRY_AUTO_VERSION;
var $a3e449e72bc3fc4f$export$a6b7ffad45e0c20b = $a3e449e72bc3fc4f$var$TMP_WEBENGINE_NAME;
var $a3e449e72bc3fc4f$export$589250d7a0c7cee4 = $a3e449e72bc3fc4f$var$TMP_WEBENGINE_VERSION;
var $a3e449e72bc3fc4f$export$3318c199ccb51731 = $a3e449e72bc3fc4f$var$TMP_WEBENGINE_DESCRIPTION;
var $a3e449e72bc3fc4f$export$85d6ffe28a084c78 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $a3e449e72bc3fc4f$var$TMP_CLOUD_PROVIDER,
    $a3e449e72bc3fc4f$var$TMP_CLOUD_ACCOUNT_ID,
    $a3e449e72bc3fc4f$var$TMP_CLOUD_REGION,
    $a3e449e72bc3fc4f$var$TMP_CLOUD_AVAILABILITY_ZONE,
    $a3e449e72bc3fc4f$var$TMP_CLOUD_PLATFORM,
    $a3e449e72bc3fc4f$var$TMP_AWS_ECS_CONTAINER_ARN,
    $a3e449e72bc3fc4f$var$TMP_AWS_ECS_CLUSTER_ARN,
    $a3e449e72bc3fc4f$var$TMP_AWS_ECS_LAUNCHTYPE,
    $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_ARN,
    $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_FAMILY,
    $a3e449e72bc3fc4f$var$TMP_AWS_ECS_TASK_REVISION,
    $a3e449e72bc3fc4f$var$TMP_AWS_EKS_CLUSTER_ARN,
    $a3e449e72bc3fc4f$var$TMP_AWS_LOG_GROUP_NAMES,
    $a3e449e72bc3fc4f$var$TMP_AWS_LOG_GROUP_ARNS,
    $a3e449e72bc3fc4f$var$TMP_AWS_LOG_STREAM_NAMES,
    $a3e449e72bc3fc4f$var$TMP_AWS_LOG_STREAM_ARNS,
    $a3e449e72bc3fc4f$var$TMP_CONTAINER_NAME,
    $a3e449e72bc3fc4f$var$TMP_CONTAINER_ID,
    $a3e449e72bc3fc4f$var$TMP_CONTAINER_RUNTIME,
    $a3e449e72bc3fc4f$var$TMP_CONTAINER_IMAGE_NAME,
    $a3e449e72bc3fc4f$var$TMP_CONTAINER_IMAGE_TAG,
    $a3e449e72bc3fc4f$var$TMP_DEPLOYMENT_ENVIRONMENT,
    $a3e449e72bc3fc4f$var$TMP_DEVICE_ID,
    $a3e449e72bc3fc4f$var$TMP_DEVICE_MODEL_IDENTIFIER,
    $a3e449e72bc3fc4f$var$TMP_DEVICE_MODEL_NAME,
    $a3e449e72bc3fc4f$var$TMP_FAAS_NAME,
    $a3e449e72bc3fc4f$var$TMP_FAAS_ID,
    $a3e449e72bc3fc4f$var$TMP_FAAS_VERSION,
    $a3e449e72bc3fc4f$var$TMP_FAAS_INSTANCE,
    $a3e449e72bc3fc4f$var$TMP_FAAS_MAX_MEMORY,
    $a3e449e72bc3fc4f$var$TMP_HOST_ID,
    $a3e449e72bc3fc4f$var$TMP_HOST_NAME,
    $a3e449e72bc3fc4f$var$TMP_HOST_TYPE,
    $a3e449e72bc3fc4f$var$TMP_HOST_ARCH,
    $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_NAME,
    $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_ID,
    $a3e449e72bc3fc4f$var$TMP_HOST_IMAGE_VERSION,
    $a3e449e72bc3fc4f$var$TMP_K8S_CLUSTER_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_NODE_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_NODE_UID,
    $a3e449e72bc3fc4f$var$TMP_K8S_NAMESPACE_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_POD_UID,
    $a3e449e72bc3fc4f$var$TMP_K8S_POD_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_CONTAINER_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_REPLICASET_UID,
    $a3e449e72bc3fc4f$var$TMP_K8S_REPLICASET_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_DEPLOYMENT_UID,
    $a3e449e72bc3fc4f$var$TMP_K8S_DEPLOYMENT_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_STATEFULSET_UID,
    $a3e449e72bc3fc4f$var$TMP_K8S_STATEFULSET_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_DAEMONSET_UID,
    $a3e449e72bc3fc4f$var$TMP_K8S_DAEMONSET_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_JOB_UID,
    $a3e449e72bc3fc4f$var$TMP_K8S_JOB_NAME,
    $a3e449e72bc3fc4f$var$TMP_K8S_CRONJOB_UID,
    $a3e449e72bc3fc4f$var$TMP_K8S_CRONJOB_NAME,
    $a3e449e72bc3fc4f$var$TMP_OS_TYPE,
    $a3e449e72bc3fc4f$var$TMP_OS_DESCRIPTION,
    $a3e449e72bc3fc4f$var$TMP_OS_NAME,
    $a3e449e72bc3fc4f$var$TMP_OS_VERSION,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_PID,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_EXECUTABLE_NAME,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_EXECUTABLE_PATH,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND_LINE,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_COMMAND_ARGS,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_OWNER,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_NAME,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_VERSION,
    $a3e449e72bc3fc4f$var$TMP_PROCESS_RUNTIME_DESCRIPTION,
    $a3e449e72bc3fc4f$var$TMP_SERVICE_NAME,
    $a3e449e72bc3fc4f$var$TMP_SERVICE_NAMESPACE,
    $a3e449e72bc3fc4f$var$TMP_SERVICE_INSTANCE_ID,
    $a3e449e72bc3fc4f$var$TMP_SERVICE_VERSION,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_NAME,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_LANGUAGE,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRY_SDK_VERSION,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRY_AUTO_VERSION,
    $a3e449e72bc3fc4f$var$TMP_WEBENGINE_NAME,
    $a3e449e72bc3fc4f$var$TMP_WEBENGINE_VERSION,
    $a3e449e72bc3fc4f$var$TMP_WEBENGINE_DESCRIPTION
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for CloudProviderValues enum definition
 *
 * Name of the cloud provider.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = "alibaba_cloud";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_AWS = "aws";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_AZURE = "azure";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_GCP = "gcp";
var $a3e449e72bc3fc4f$export$1f18298beaae37d3 = $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;
var $a3e449e72bc3fc4f$export$f56ad4bf836470f2 = $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_AWS;
var $a3e449e72bc3fc4f$export$a607df3e2371e436 = $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_AZURE;
var $a3e449e72bc3fc4f$export$b5cb559e526f402a = $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_GCP;
var $a3e449e72bc3fc4f$export$c2664345bd8aad14 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_AWS,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_AZURE,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPROVIDERVALUES_GCP
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for CloudPlatformValues enum definition
 *
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = "alibaba_cloud_ecs";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = "alibaba_cloud_fc";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_EC2 = "aws_ec2";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_ECS = "aws_ecs";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_EKS = "aws_eks";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = "aws_lambda";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = "aws_elastic_beanstalk";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_VM = "azure_vm";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = "azure_container_instances";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_AKS = "azure_aks";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = "azure_functions";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = "azure_app_service";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = "gcp_compute_engine";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = "gcp_cloud_run";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = "gcp_kubernetes_engine";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = "gcp_cloud_functions";
var $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = "gcp_app_engine";
var $a3e449e72bc3fc4f$export$b7ccb6b2de7534ed = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;
var $a3e449e72bc3fc4f$export$5e031b328860dffd = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;
var $a3e449e72bc3fc4f$export$f0e8dec51b6cf37d = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_EC2;
var $a3e449e72bc3fc4f$export$a325ac849a598ed7 = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_ECS;
var $a3e449e72bc3fc4f$export$9c3f60b2b4d542e1 = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_EKS;
var $a3e449e72bc3fc4f$export$1edcff8a13326911 = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;
var $a3e449e72bc3fc4f$export$2f7128c57ade0d50 = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;
var $a3e449e72bc3fc4f$export$10256094f96cd373 = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_VM;
var $a3e449e72bc3fc4f$export$ed505d4ca2b4d712 = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;
var $a3e449e72bc3fc4f$export$83131f1a1f001ee = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_AKS;
var $a3e449e72bc3fc4f$export$36f98571cef96af7 = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;
var $a3e449e72bc3fc4f$export$66faee8e64625c5d = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;
var $a3e449e72bc3fc4f$export$dd043c2707119e75 = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;
var $a3e449e72bc3fc4f$export$d0a1ecf47fa77b8b = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;
var $a3e449e72bc3fc4f$export$649c271f5295d71e = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;
var $a3e449e72bc3fc4f$export$e9becd93e8daa01a = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;
var $a3e449e72bc3fc4f$export$5862836e4b24761c = $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;
var $a3e449e72bc3fc4f$export$fe811090f8b1259c = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_EC2,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_ECS,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_EKS,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_VM,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_AKS,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,
    $a3e449e72bc3fc4f$var$TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for AwsEcsLaunchtypeValues enum definition
 *
 * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3e449e72bc3fc4f$var$TMP_AWSECSLAUNCHTYPEVALUES_EC2 = "ec2";
var $a3e449e72bc3fc4f$var$TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = "fargate";
var $a3e449e72bc3fc4f$export$54d16708f9a4cde = $a3e449e72bc3fc4f$var$TMP_AWSECSLAUNCHTYPEVALUES_EC2;
var $a3e449e72bc3fc4f$export$7bf660b6e44fe06e = $a3e449e72bc3fc4f$var$TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;
var $a3e449e72bc3fc4f$export$6945fb1e4f2852ef = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $a3e449e72bc3fc4f$var$TMP_AWSECSLAUNCHTYPEVALUES_EC2,
    $a3e449e72bc3fc4f$var$TMP_AWSECSLAUNCHTYPEVALUES_FARGATE
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for HostArchValues enum definition
 *
 * The CPU architecture the host system is running on.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_AMD64 = "amd64";
var $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_ARM32 = "arm32";
var $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_ARM64 = "arm64";
var $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_IA64 = "ia64";
var $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_PPC32 = "ppc32";
var $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_PPC64 = "ppc64";
var $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_X86 = "x86";
var $a3e449e72bc3fc4f$export$6050a837e7da966a = $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_AMD64;
var $a3e449e72bc3fc4f$export$3c7341cec70023f0 = $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_ARM32;
var $a3e449e72bc3fc4f$export$2fac5f715b596c6d = $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_ARM64;
var $a3e449e72bc3fc4f$export$231235882f6e6443 = $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_IA64;
var $a3e449e72bc3fc4f$export$c4a24e52d6385d55 = $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_PPC32;
var $a3e449e72bc3fc4f$export$18594ce63eac5c97 = $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_PPC64;
var $a3e449e72bc3fc4f$export$1af722303cbf3f49 = $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_X86;
var $a3e449e72bc3fc4f$export$f31e10d6db5b428b = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_AMD64,
    $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_ARM32,
    $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_ARM64,
    $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_IA64,
    $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_PPC32,
    $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_PPC64,
    $a3e449e72bc3fc4f$var$TMP_HOSTARCHVALUES_X86
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for OsTypeValues enum definition
 *
 * The operating system type.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_WINDOWS = "windows";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_LINUX = "linux";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_DARWIN = "darwin";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_FREEBSD = "freebsd";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_NETBSD = "netbsd";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_OPENBSD = "openbsd";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_DRAGONFLYBSD = "dragonflybsd";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_HPUX = "hpux";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_AIX = "aix";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_SOLARIS = "solaris";
var $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_Z_OS = "z_os";
var $a3e449e72bc3fc4f$export$9e247b47b87a5e98 = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_WINDOWS;
var $a3e449e72bc3fc4f$export$79d9a21d50f1d11b = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_LINUX;
var $a3e449e72bc3fc4f$export$29d1fb472dabfab5 = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_DARWIN;
var $a3e449e72bc3fc4f$export$41f1a684ef8f38a0 = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_FREEBSD;
var $a3e449e72bc3fc4f$export$d11e84640954119d = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_NETBSD;
var $a3e449e72bc3fc4f$export$cf6bab1412b5a24 = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_OPENBSD;
var $a3e449e72bc3fc4f$export$e902e17ab5ff9bad = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_DRAGONFLYBSD;
var $a3e449e72bc3fc4f$export$9a4c793b18e0bd5e = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_HPUX;
var $a3e449e72bc3fc4f$export$bdec18d31f5e2d9d = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_AIX;
var $a3e449e72bc3fc4f$export$6226a44babc07d2d = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_SOLARIS;
var $a3e449e72bc3fc4f$export$a81b7e7863a06968 = $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_Z_OS;
var $a3e449e72bc3fc4f$export$efc6a8b7a61f5577 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_WINDOWS,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_LINUX,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_DARWIN,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_FREEBSD,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_NETBSD,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_OPENBSD,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_DRAGONFLYBSD,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_HPUX,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_AIX,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_SOLARIS,
    $a3e449e72bc3fc4f$var$TMP_OSTYPEVALUES_Z_OS
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for TelemetrySdkLanguageValues enum definition
 *
 * The language of the telemetry SDK.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = "cpp";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = "dotnet";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = "erlang";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_GO = "go";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = "java";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = "nodejs";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = "php";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = "python";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = "ruby";
var $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = "webjs";
var $a3e449e72bc3fc4f$export$bb305b29d3ff12b2 = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;
var $a3e449e72bc3fc4f$export$36f70c7fec241585 = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;
var $a3e449e72bc3fc4f$export$9254854c1a90f699 = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;
var $a3e449e72bc3fc4f$export$870f3d5bf5403ac2 = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_GO;
var $a3e449e72bc3fc4f$export$a115dae9eb65ef38 = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;
var $a3e449e72bc3fc4f$export$f599ed80e3c8d29a = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;
var $a3e449e72bc3fc4f$export$42ae93f6bda608ef = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;
var $a3e449e72bc3fc4f$export$7f6f8205f1621418 = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;
var $a3e449e72bc3fc4f$export$3dd620b466e18cf = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;
var $a3e449e72bc3fc4f$export$1414beb1e03cac7c = $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;
var $a3e449e72bc3fc4f$export$b43162e16168dba6 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_GO,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,
    $a3e449e72bc3fc4f$var$TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS
]);


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // this is autogenerated file, see scripts/version-update.js
var $651b4df99e717702$export$a4ad2735b021c132 = "1.28.0";



var $51eead7a3777e5aa$var$_a;
var $51eead7a3777e5aa$export$3c44663382dce232 = ($51eead7a3777e5aa$var$_a = {}, $51eead7a3777e5aa$var$_a[0, $a3e449e72bc3fc4f$export$2d668a3bde1cddea] = "opentelemetry", $51eead7a3777e5aa$var$_a[0, $a3e449e72bc3fc4f$export$6c52ea893832d871] = "browser", $51eead7a3777e5aa$var$_a[0, $a3e449e72bc3fc4f$export$b5c1717bbc4c6044] = (0, $a3e449e72bc3fc4f$export$1414beb1e03cac7c), $51eead7a3777e5aa$var$_a[0, $a3e449e72bc3fc4f$export$e0b67501ecc1df37] = (0, $651b4df99e717702$export$a4ad2735b021c132), $51eead7a3777e5aa$var$_a);


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $61e831276b4681ea$export$b8c2abd2a6cf7c10() {
    return "unknown_service";
}


var $eaedecc9905e0881$var$__assign = undefined && undefined.__assign || function() {
    $eaedecc9905e0881$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $eaedecc9905e0881$var$__assign.apply(this, arguments);
};
var $eaedecc9905e0881$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $eaedecc9905e0881$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var $eaedecc9905e0881$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
/**
 * A Resource describes the entity for which a signals (metrics or trace) are
 * collected.
 */ var $eaedecc9905e0881$export$39a853cfb5a94a63 = /** @class */ function() {
    function Resource(/**
     * A dictionary of attributes with string keys and values that provide
     * information about the entity as numbers, strings or booleans
     * TODO: Consider to add check/validation on attributes.
     */ attributes, asyncAttributesPromise) {
        var _this = this;
        var _a;
        this._attributes = attributes;
        this.asyncAttributesPending = asyncAttributesPromise != null;
        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};
        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function(asyncAttributes) {
            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);
            _this.asyncAttributesPending = false;
            return asyncAttributes;
        }, function(err) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("a resource's async attributes promise rejected: %s", err);
            _this.asyncAttributesPending = false;
            return {};
        });
    }
    /**
     * Returns an empty Resource
     */ Resource.empty = function() {
        return Resource.EMPTY;
    };
    /**
     * Returns a Resource that identifies the SDK in use.
     */ Resource.default = function() {
        var _a;
        return new Resource((_a = {}, _a[0, $a3e449e72bc3fc4f$export$48c68257f49298c9] = (0, $61e831276b4681ea$export$b8c2abd2a6cf7c10)(), _a[0, $a3e449e72bc3fc4f$export$b5c1717bbc4c6044] = (0, $51eead7a3777e5aa$export$3c44663382dce232)[0, $a3e449e72bc3fc4f$export$b5c1717bbc4c6044], _a[0, $a3e449e72bc3fc4f$export$2d668a3bde1cddea] = (0, $51eead7a3777e5aa$export$3c44663382dce232)[0, $a3e449e72bc3fc4f$export$2d668a3bde1cddea], _a[0, $a3e449e72bc3fc4f$export$e0b67501ecc1df37] = (0, $51eead7a3777e5aa$export$3c44663382dce232)[0, $a3e449e72bc3fc4f$export$e0b67501ecc1df37], _a));
    };
    Object.defineProperty(Resource.prototype, "attributes", {
        get: function() {
            var _a;
            if (this.asyncAttributesPending) (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error("Accessing resource attributes before async attributes settled");
            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to
     * this Resource's attributes. This is useful in exporters to block until resource detection
     * has finished.
     */ Resource.prototype.waitForAsyncAttributes = function() {
        return $eaedecc9905e0881$var$__awaiter(this, void 0, void 0, function() {
            return $eaedecc9905e0881$var$__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!this.asyncAttributesPending) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            this._asyncAttributesPromise
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Returns a new, merged {@link Resource} by merging the current Resource
     * with the other Resource. In case of a collision, other Resource takes
     * precedence.
     *
     * @param other the Resource that will be merged with this.
     * @returns the newly merged Resource.
     */ Resource.prototype.merge = function(other) {
        var _this = this;
        var _a;
        if (!other) return this;
        // SpanAttributes from other resource overwrite attributes from this resource.
        var mergedSyncAttributes = $eaedecc9905e0881$var$__assign($eaedecc9905e0881$var$__assign({}, this._syncAttributes), (_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes);
        if (!this._asyncAttributesPromise && !other._asyncAttributesPromise) return new Resource(mergedSyncAttributes);
        var mergedAttributesPromise = Promise.all([
            this._asyncAttributesPromise,
            other._asyncAttributesPromise
        ]).then(function(_a) {
            var _b;
            var _c = $eaedecc9905e0881$var$__read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];
            return $eaedecc9905e0881$var$__assign($eaedecc9905e0881$var$__assign($eaedecc9905e0881$var$__assign($eaedecc9905e0881$var$__assign({}, _this._syncAttributes), thisAsyncAttributes), (_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes), otherAsyncAttributes);
        });
        return new Resource(mergedSyncAttributes, mergedAttributesPromise);
    };
    Resource.EMPTY = new Resource({});
    return Resource;
}();



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $70136620c777293c$export$ae936b9d47e5870e = function(val) {
    return val !== null && typeof val === "object" && typeof val.then === "function";
};


var $b13ce36311cda672$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $b13ce36311cda672$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var $b13ce36311cda672$export$864233df9af951f2 = function(config) {
    if (config === void 0) config = {};
    return $b13ce36311cda672$var$__awaiter(void 0, void 0, void 0, function() {
        var resources;
        return $b13ce36311cda672$var$__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        Promise.all((config.detectors || []).map(function(d) {
                            return $b13ce36311cda672$var$__awaiter(void 0, void 0, void 0, function() {
                                var resource, e_1;
                                return $b13ce36311cda672$var$__generator(this, function(_a) {
                                    switch(_a.label){
                                        case 0:
                                            _a.trys.push([
                                                0,
                                                2,
                                                ,
                                                3
                                            ]);
                                            return [
                                                4 /*yield*/ ,
                                                d.detect(config)
                                            ];
                                        case 1:
                                            resource = _a.sent();
                                            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug(d.constructor.name + " found resource.", resource);
                                            return [
                                                2 /*return*/ ,
                                                resource
                                            ];
                                        case 2:
                                            e_1 = _a.sent();
                                            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug(d.constructor.name + " failed: " + e_1.message);
                                            return [
                                                2 /*return*/ ,
                                                (0, $eaedecc9905e0881$export$39a853cfb5a94a63).empty()
                                            ];
                                        case 3:
                                            return [
                                                2 /*return*/ 
                                            ];
                                    }
                                });
                            });
                        }))
                    ];
                case 1:
                    resources = _a.sent();
                    // Future check if verbose logging is enabled issue #1903
                    $b13ce36311cda672$var$logResources(resources);
                    return [
                        2 /*return*/ ,
                        resources.reduce(function(acc, resource) {
                            return acc.merge(resource);
                        }, (0, $eaedecc9905e0881$export$39a853cfb5a94a63).empty())
                    ];
            }
        });
    });
};
var $b13ce36311cda672$export$a2167465c63b94e6 = function(config) {
    var _a;
    if (config === void 0) config = {};
    var resources = ((_a = config.detectors) !== null && _a !== void 0 ? _a : []).map(function(d) {
        try {
            var resourceOrPromise_1 = d.detect(config);
            var resource_1;
            if ((0, $70136620c777293c$export$ae936b9d47e5870e)(resourceOrPromise_1)) {
                var createPromise = function() {
                    return $b13ce36311cda672$var$__awaiter(void 0, void 0, void 0, function() {
                        var resolvedResource;
                        var _a;
                        return $b13ce36311cda672$var$__generator(this, function(_b) {
                            switch(_b.label){
                                case 0:
                                    return [
                                        4 /*yield*/ ,
                                        resourceOrPromise_1
                                    ];
                                case 1:
                                    resolvedResource = _b.sent();
                                    return [
                                        4 /*yield*/ ,
                                        (_a = resolvedResource.waitForAsyncAttributes) === null || _a === void 0 ? void 0 : _a.call(resolvedResource)
                                    ];
                                case 2:
                                    _b.sent();
                                    return [
                                        2 /*return*/ ,
                                        resolvedResource.attributes
                                    ];
                            }
                        });
                    });
                };
                resource_1 = new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)({}, createPromise());
            } else resource_1 = resourceOrPromise_1;
            if (resource_1.waitForAsyncAttributes) resource_1.waitForAsyncAttributes().then(function() {
                return (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug(d.constructor.name + " found resource.", resource_1);
            });
            else (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug(d.constructor.name + " found resource.", resource_1);
            return resource_1;
        } catch (e) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error(d.constructor.name + " failed: " + e.message);
            return (0, $eaedecc9905e0881$export$39a853cfb5a94a63).empty();
        }
    });
    var mergedResources = resources.reduce(function(acc, resource) {
        return acc.merge(resource);
    }, (0, $eaedecc9905e0881$export$39a853cfb5a94a63).empty());
    if (mergedResources.waitForAsyncAttributes) mergedResources.waitForAsyncAttributes().then(function() {
        // Future check if verbose logging is enabled issue #1903
        $b13ce36311cda672$var$logResources(resources);
    });
    return mergedResources;
};
/**
 * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.
 *
 * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.
 */ var $b13ce36311cda672$var$logResources = function(resources) {
    resources.forEach(function(resource) {
        // Print only populated resources
        if (Object.keys(resource.attributes).length > 0) {
            var resourceDebugString = JSON.stringify(resource.attributes, null, 4);
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).verbose(resourceDebugString);
        }
    });
};


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */ var $eb2b7d0a8ba2c2ae$export$94df7a7a96a92f7b;
(function(SamplingDecision) {
    /**
     * `Span.isRecording() === false`, span will not be recorded and all events
     * and attributes will be dropped.
     */ SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
    /**
     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
     * MUST NOT be set.
     */ SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
    /**
     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
     * MUST be set.
     */ SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})($eb2b7d0a8ba2c2ae$export$94df7a7a96a92f7b || ($eb2b7d0a8ba2c2ae$export$94df7a7a96a92f7b = {}));


/** Sampler that samples no traces. */ var $ffaf61536d9605bb$export$abc5f11618c4d6a3 = /** @class */ function() {
    function AlwaysOffSampler() {}
    AlwaysOffSampler.prototype.shouldSample = function() {
        return {
            decision: (0, $eb2b7d0a8ba2c2ae$export$94df7a7a96a92f7b).NOT_RECORD
        };
    };
    AlwaysOffSampler.prototype.toString = function() {
        return "AlwaysOffSampler";
    };
    return AlwaysOffSampler;
}();

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/** Sampler that samples all traces. */ var $47d1bc9271eaba6b$export$653f832afb4ffa27 = /** @class */ function() {
    function AlwaysOnSampler() {}
    AlwaysOnSampler.prototype.shouldSample = function() {
        return {
            decision: (0, $eb2b7d0a8ba2c2ae$export$94df7a7a96a92f7b).RECORD_AND_SAMPLED
        };
    };
    AlwaysOnSampler.prototype.toString = function() {
        return "AlwaysOnSampler";
    };
    return AlwaysOnSampler;
}();

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $bd02bd1d52e7aee5$export$85f6557964517f1a = /** @class */ function() {
    function Deferred() {
        var _this = this;
        this._promise = new Promise(function(resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
    }
    Object.defineProperty(Deferred.prototype, "promise", {
        get: function() {
            return this._promise;
        },
        enumerable: false,
        configurable: true
    });
    Deferred.prototype.resolve = function(val) {
        this._resolve(val);
    };
    Deferred.prototype.reject = function(err) {
        this._reject(err);
    };
    return Deferred;
}();


var $19af5f5a0ba515c8$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $19af5f5a0ba515c8$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.
 */ var $19af5f5a0ba515c8$export$c1f52ab4952184cd = /** @class */ function() {
    function BindOnceFuture(_callback, _that) {
        this._callback = _callback;
        this._that = _that;
        this._isCalled = false;
        this._deferred = new (0, $bd02bd1d52e7aee5$export$85f6557964517f1a)();
    }
    Object.defineProperty(BindOnceFuture.prototype, "isCalled", {
        get: function() {
            return this._isCalled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BindOnceFuture.prototype, "promise", {
        get: function() {
            return this._deferred.promise;
        },
        enumerable: false,
        configurable: true
    });
    BindOnceFuture.prototype.call = function() {
        var _a;
        var _this = this;
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (!this._isCalled) {
            this._isCalled = true;
            try {
                Promise.resolve((_a = this._callback).call.apply(_a, $19af5f5a0ba515c8$var$__spreadArray([
                    this._that
                ], $19af5f5a0ba515c8$var$__read(args), false))).then(function(val) {
                    return _this._deferred.resolve(val);
                }, function(err) {
                    return _this._deferred.reject(err);
                });
            } catch (err) {
                this._deferred.reject(err);
            }
        }
        return this._deferred.promise;
    };
    return BindOnceFuture;
}();

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1;
(function(ExportResultCode) {
    ExportResultCode[ExportResultCode["SUCCESS"] = 0] = "SUCCESS";
    ExportResultCode[ExportResultCode["FAILED"] = 1] = "FAILED";
})($ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1 || ($ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1 = {}));

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $4f01137b999274bc$export$243c1c4fe84ef188;
(function(TracesSamplerValues) {
    TracesSamplerValues["AlwaysOff"] = "always_off";
    TracesSamplerValues["AlwaysOn"] = "always_on";
    TracesSamplerValues["ParentBasedAlwaysOff"] = "parentbased_always_off";
    TracesSamplerValues["ParentBasedAlwaysOn"] = "parentbased_always_on";
    TracesSamplerValues["ParentBasedTraceIdRatio"] = "parentbased_traceidratio";
    TracesSamplerValues["TraceIdRatio"] = "traceidratio";
})($4f01137b999274bc$export$243c1c4fe84ef188 || ($4f01137b999274bc$export$243c1c4fe84ef188 = {}));


var $1d29d230e496f2b1$var$DEFAULT_LIST_SEPARATOR = ",";
/**
 * Environment interface to define all names
 */ var $1d29d230e496f2b1$var$ENVIRONMENT_BOOLEAN_KEYS = [
    "OTEL_SDK_DISABLED"
];
function $1d29d230e496f2b1$var$isEnvVarABoolean(key) {
    return $1d29d230e496f2b1$var$ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1;
}
var $1d29d230e496f2b1$var$ENVIRONMENT_NUMBERS_KEYS = [
    "OTEL_BSP_EXPORT_TIMEOUT",
    "OTEL_BSP_MAX_EXPORT_BATCH_SIZE",
    "OTEL_BSP_MAX_QUEUE_SIZE",
    "OTEL_BSP_SCHEDULE_DELAY",
    "OTEL_BLRP_EXPORT_TIMEOUT",
    "OTEL_BLRP_MAX_EXPORT_BATCH_SIZE",
    "OTEL_BLRP_MAX_QUEUE_SIZE",
    "OTEL_BLRP_SCHEDULE_DELAY",
    "OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT",
    "OTEL_ATTRIBUTE_COUNT_LIMIT",
    "OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT",
    "OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT",
    "OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT",
    "OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT",
    "OTEL_SPAN_EVENT_COUNT_LIMIT",
    "OTEL_SPAN_LINK_COUNT_LIMIT",
    "OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT",
    "OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT",
    "OTEL_EXPORTER_OTLP_TIMEOUT",
    "OTEL_EXPORTER_OTLP_TRACES_TIMEOUT",
    "OTEL_EXPORTER_OTLP_METRICS_TIMEOUT",
    "OTEL_EXPORTER_OTLP_LOGS_TIMEOUT",
    "OTEL_EXPORTER_JAEGER_AGENT_PORT"
];
function $1d29d230e496f2b1$var$isEnvVarANumber(key) {
    return $1d29d230e496f2b1$var$ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1;
}
var $1d29d230e496f2b1$var$ENVIRONMENT_LISTS_KEYS = [
    "OTEL_NO_PATCH_MODULES",
    "OTEL_PROPAGATORS",
    "OTEL_SEMCONV_STABILITY_OPT_IN"
];
function $1d29d230e496f2b1$var$isEnvVarAList(key) {
    return $1d29d230e496f2b1$var$ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;
}
var $1d29d230e496f2b1$export$d9446f3c1c12def1 = Infinity;
var $1d29d230e496f2b1$export$6ad612be99f9ed48 = 128;
var $1d29d230e496f2b1$export$c5bbf26b60de6148 = 128;
var $1d29d230e496f2b1$export$f200b88493991cbe = 128;
var $1d29d230e496f2b1$export$849dbeeeda01ae98 = {
    OTEL_SDK_DISABLED: false,
    CONTAINER_NAME: "",
    ECS_CONTAINER_METADATA_URI_V4: "",
    ECS_CONTAINER_METADATA_URI: "",
    HOSTNAME: "",
    KUBERNETES_SERVICE_HOST: "",
    NAMESPACE: "",
    OTEL_BSP_EXPORT_TIMEOUT: 30000,
    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,
    OTEL_BSP_MAX_QUEUE_SIZE: 2048,
    OTEL_BSP_SCHEDULE_DELAY: 5000,
    OTEL_BLRP_EXPORT_TIMEOUT: 30000,
    OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,
    OTEL_BLRP_MAX_QUEUE_SIZE: 2048,
    OTEL_BLRP_SCHEDULE_DELAY: 5000,
    OTEL_EXPORTER_JAEGER_AGENT_HOST: "",
    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,
    OTEL_EXPORTER_JAEGER_ENDPOINT: "",
    OTEL_EXPORTER_JAEGER_PASSWORD: "",
    OTEL_EXPORTER_JAEGER_USER: "",
    OTEL_EXPORTER_OTLP_ENDPOINT: "",
    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "",
    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "",
    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "",
    OTEL_EXPORTER_OTLP_HEADERS: "",
    OTEL_EXPORTER_OTLP_TRACES_HEADERS: "",
    OTEL_EXPORTER_OTLP_METRICS_HEADERS: "",
    OTEL_EXPORTER_OTLP_LOGS_HEADERS: "",
    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,
    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,
    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,
    OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,
    OTEL_EXPORTER_ZIPKIN_ENDPOINT: "http://localhost:9411/api/v2/spans",
    OTEL_LOG_LEVEL: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).INFO,
    OTEL_NO_PATCH_MODULES: [],
    OTEL_PROPAGATORS: [
        "tracecontext",
        "baggage"
    ],
    OTEL_RESOURCE_ATTRIBUTES: "",
    OTEL_SERVICE_NAME: "",
    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: $1d29d230e496f2b1$export$d9446f3c1c12def1,
    OTEL_ATTRIBUTE_COUNT_LIMIT: $1d29d230e496f2b1$export$6ad612be99f9ed48,
    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: $1d29d230e496f2b1$export$d9446f3c1c12def1,
    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: $1d29d230e496f2b1$export$6ad612be99f9ed48,
    OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: $1d29d230e496f2b1$export$d9446f3c1c12def1,
    OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: $1d29d230e496f2b1$export$6ad612be99f9ed48,
    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,
    OTEL_SPAN_LINK_COUNT_LIMIT: 128,
    OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: $1d29d230e496f2b1$export$c5bbf26b60de6148,
    OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: $1d29d230e496f2b1$export$f200b88493991cbe,
    OTEL_TRACES_EXPORTER: "",
    OTEL_TRACES_SAMPLER: (0, $4f01137b999274bc$export$243c1c4fe84ef188).ParentBasedAlwaysOn,
    OTEL_TRACES_SAMPLER_ARG: "",
    OTEL_LOGS_EXPORTER: "",
    OTEL_EXPORTER_OTLP_INSECURE: "",
    OTEL_EXPORTER_OTLP_TRACES_INSECURE: "",
    OTEL_EXPORTER_OTLP_METRICS_INSECURE: "",
    OTEL_EXPORTER_OTLP_LOGS_INSECURE: "",
    OTEL_EXPORTER_OTLP_CERTIFICATE: "",
    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: "",
    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: "",
    OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: "",
    OTEL_EXPORTER_OTLP_COMPRESSION: "",
    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: "",
    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: "",
    OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: "",
    OTEL_EXPORTER_OTLP_CLIENT_KEY: "",
    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: "",
    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: "",
    OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: "",
    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "",
    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: "",
    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: "",
    OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: "",
    OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf",
    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: "http/protobuf",
    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: "http/protobuf",
    OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: "http/protobuf",
    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: "cumulative",
    OTEL_SEMCONV_STABILITY_OPT_IN: []
};
/**
 * @param key
 * @param environment
 * @param values
 */ function $1d29d230e496f2b1$var$parseBoolean(key, environment, values) {
    if (typeof values[key] === "undefined") return;
    var value = String(values[key]);
    // support case-insensitive "true"
    environment[key] = value.toLowerCase() === "true";
}
/**
 * Parses a variable as number with number validation
 * @param name
 * @param environment
 * @param values
 * @param min
 * @param max
 */ function $1d29d230e496f2b1$var$parseNumber(name, environment, values, min, max) {
    if (min === void 0) min = -Infinity;
    if (max === void 0) max = Infinity;
    if (typeof values[name] !== "undefined") {
        var value = Number(values[name]);
        if (!isNaN(value)) {
            if (value < min) environment[name] = min;
            else if (value > max) environment[name] = max;
            else environment[name] = value;
        }
    }
}
/**
 * Parses list-like strings from input into output.
 * @param name
 * @param environment
 * @param values
 * @param separator
 */ function $1d29d230e496f2b1$var$parseStringList(name, output, input, separator) {
    if (separator === void 0) separator = $1d29d230e496f2b1$var$DEFAULT_LIST_SEPARATOR;
    var givenValue = input[name];
    if (typeof givenValue === "string") output[name] = givenValue.split(separator).map(function(v) {
        return v.trim();
    });
}
// The support string -> DiagLogLevel mappings
var $1d29d230e496f2b1$var$logLevelMap = {
    ALL: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).ALL,
    VERBOSE: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).VERBOSE,
    DEBUG: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).DEBUG,
    INFO: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).INFO,
    WARN: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).WARN,
    ERROR: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).ERROR,
    NONE: (0, $2fde396648409cca$export$b7d7b4c0f3c95263).NONE
};
/**
 * Environmentally sets log level if valid log level string is provided
 * @param key
 * @param environment
 * @param values
 */ function $1d29d230e496f2b1$var$setLogLevelFromEnv(key, environment, values) {
    var value = values[key];
    if (typeof value === "string") {
        var theLevel = $1d29d230e496f2b1$var$logLevelMap[value.toUpperCase()];
        if (theLevel != null) environment[key] = theLevel;
    }
}
function $1d29d230e496f2b1$export$99f17f8ee99049eb(values) {
    var environment = {};
    for(var env in $1d29d230e496f2b1$export$849dbeeeda01ae98){
        var key = env;
        switch(key){
            case "OTEL_LOG_LEVEL":
                $1d29d230e496f2b1$var$setLogLevelFromEnv(key, environment, values);
                break;
            default:
                if ($1d29d230e496f2b1$var$isEnvVarABoolean(key)) $1d29d230e496f2b1$var$parseBoolean(key, environment, values);
                else if ($1d29d230e496f2b1$var$isEnvVarANumber(key)) $1d29d230e496f2b1$var$parseNumber(key, environment, values);
                else if ($1d29d230e496f2b1$var$isEnvVarAList(key)) $1d29d230e496f2b1$var$parseStringList(key, environment, values);
                else {
                    var value = values[key];
                    if (typeof value !== "undefined" && value !== null) environment[key] = String(value);
                }
        }
    }
    return environment;
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Updates to this file should also be replicated to @opentelemetry/api too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */ /** only globals that common to node and browsers are allowed */ // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var $437a12772fb2f2b6$export$5c524ddf7208c00c = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof $parcel$global === "object" ? $parcel$global : {};


function $2bf6571a244c8719$export$4bd44a2aa29d3d6e() {
    var globalEnv = (0, $1d29d230e496f2b1$export$99f17f8ee99049eb)((0, $437a12772fb2f2b6$export$5c524ddf7208c00c));
    return Object.assign({}, (0, $1d29d230e496f2b1$export$849dbeeeda01ae98), globalEnv);
}
function $2bf6571a244c8719$export$728650dd4748d692() {
    return (0, $1d29d230e496f2b1$export$99f17f8ee99049eb)((0, $437a12772fb2f2b6$export$5c524ddf7208c00c));
}

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
function $9af380beed859c7e$export$cd67a16f6d11e5bd() {
    return function(ex) {
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error($9af380beed859c7e$var$stringifyException(ex));
    };
}
/**
 * Converts an exception into a string representation
 * @param {Exception} ex
 */ function $9af380beed859c7e$var$stringifyException(ex) {
    if (typeof ex === "string") return ex;
    else return JSON.stringify($9af380beed859c7e$var$flattenException(ex));
}
/**
 * Flattens an exception into key-value pairs by traversing the prototype chain
 * and coercing values to strings. Duplicate properties will not be overwritten;
 * the first insert wins.
 */ function $9af380beed859c7e$var$flattenException(ex) {
    var result = {};
    var current = ex;
    while(current !== null){
        Object.getOwnPropertyNames(current).forEach(function(propertyName) {
            if (result[propertyName]) return;
            var value = current[propertyName];
            if (value) result[propertyName] = String(value);
        });
        current = Object.getPrototypeOf(current);
    }
    return result;
}


/** The global error handler delegate */ var $5c139fbfce029b83$var$delegateHandler = (0, $9af380beed859c7e$export$cd67a16f6d11e5bd)();
function $5c139fbfce029b83$export$bdff946829732435(handler) {
    $5c139fbfce029b83$var$delegateHandler = handler;
}
function $5c139fbfce029b83$export$54c6946fc34b7cc2(ex) {
    try {
        $5c139fbfce029b83$var$delegateHandler(ex);
    } catch (_a) {} // eslint-disable-line no-empty
}

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $681dc49ded58dd0c$var$SUPPRESS_TRACING_KEY = (0, $934e30cdbca38464$export$b8c322c5a7cfce78)("OpenTelemetry SDK Context Key SUPPRESS_TRACING");
function $681dc49ded58dd0c$export$869298f9835abc68(context) {
    return context.setValue($681dc49ded58dd0c$var$SUPPRESS_TRACING_KEY, true);
}
function $681dc49ded58dd0c$export$a8cb26cef1019d30(context) {
    return context.deleteValue($681dc49ded58dd0c$var$SUPPRESS_TRACING_KEY);
}
function $681dc49ded58dd0c$export$7d5f2376f7cf513(context) {
    return context.getValue($681dc49ded58dd0c$var$SUPPRESS_TRACING_KEY) === true;
}

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $48f9168e3b3a85e0$export$13bcdd8a72da0e8f(_timer) {}


/**
 * Implementation of the {@link SpanProcessor} that batches spans exported by
 * the SDK then pushes them to the exporter pipeline.
 */ var $7fc8aaff85acee1b$export$54ea939f5d39e8a2 = /** @class */ function() {
    function BatchSpanProcessorBase(_exporter, config) {
        this._exporter = _exporter;
        this._isExporting = false;
        this._finishedSpans = [];
        this._droppedSpansCount = 0;
        var env = (0, $2bf6571a244c8719$export$4bd44a2aa29d3d6e)();
        this._maxExportBatchSize = typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === "number" ? config.maxExportBatchSize : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;
        this._maxQueueSize = typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === "number" ? config.maxQueueSize : env.OTEL_BSP_MAX_QUEUE_SIZE;
        this._scheduledDelayMillis = typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === "number" ? config.scheduledDelayMillis : env.OTEL_BSP_SCHEDULE_DELAY;
        this._exportTimeoutMillis = typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === "number" ? config.exportTimeoutMillis : env.OTEL_BSP_EXPORT_TIMEOUT;
        this._shutdownOnce = new (0, $19af5f5a0ba515c8$export$c1f52ab4952184cd)(this._shutdown, this);
        if (this._maxExportBatchSize > this._maxQueueSize) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize");
            this._maxExportBatchSize = this._maxQueueSize;
        }
    }
    BatchSpanProcessorBase.prototype.forceFlush = function() {
        if (this._shutdownOnce.isCalled) return this._shutdownOnce.promise;
        return this._flushAll();
    };
    // does nothing.
    BatchSpanProcessorBase.prototype.onStart = function(_span, _parentContext) {};
    BatchSpanProcessorBase.prototype.onEnd = function(span) {
        if (this._shutdownOnce.isCalled) return;
        if ((span.spanContext().traceFlags & (0, $06dc16c226890360$export$bf9049ad2b0883ff).SAMPLED) === 0) return;
        this._addToBuffer(span);
    };
    BatchSpanProcessorBase.prototype.shutdown = function() {
        return this._shutdownOnce.call();
    };
    BatchSpanProcessorBase.prototype._shutdown = function() {
        var _this = this;
        return Promise.resolve().then(function() {
            return _this.onShutdown();
        }).then(function() {
            return _this._flushAll();
        }).then(function() {
            return _this._exporter.shutdown();
        });
    };
    /** Add a span in the buffer. */ BatchSpanProcessorBase.prototype._addToBuffer = function(span) {
        if (this._finishedSpans.length >= this._maxQueueSize) {
            // limit reached, drop span
            if (this._droppedSpansCount === 0) (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("maxQueueSize reached, dropping spans");
            this._droppedSpansCount++;
            return;
        }
        if (this._droppedSpansCount > 0) {
            // some spans were dropped, log once with count of spans dropped
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Dropped " + this._droppedSpansCount + " spans because maxQueueSize reached");
            this._droppedSpansCount = 0;
        }
        this._finishedSpans.push(span);
        this._maybeStartTimer();
    };
    /**
     * Send all spans to the exporter respecting the batch size limit
     * This function is used only on forceFlush or shutdown,
     * for all other cases _flush should be used
     * */ BatchSpanProcessorBase.prototype._flushAll = function() {
        var _this = this;
        return new Promise(function(resolve, reject) {
            var promises = [];
            // calculate number of batches
            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);
            for(var i = 0, j = count; i < j; i++)promises.push(_this._flushOneBatch());
            Promise.all(promises).then(function() {
                resolve();
            }).catch(reject);
        });
    };
    BatchSpanProcessorBase.prototype._flushOneBatch = function() {
        var _this = this;
        this._clearTimer();
        if (this._finishedSpans.length === 0) return Promise.resolve();
        return new Promise(function(resolve, reject) {
            var timer = setTimeout(function() {
                // don't wait anymore for export, this way the next batch can start
                reject(new Error("Timeout"));
            }, _this._exportTimeoutMillis);
            // prevent downstream exporter calls from generating spans
            (0, $c903d3361d9a81c0$export$a078c61943f9dbbe).with((0, $681dc49ded58dd0c$export$869298f9835abc68)((0, $c903d3361d9a81c0$export$a078c61943f9dbbe).active()), function() {
                // Reset the finished spans buffer here because the next invocations of the _flush method
                // could pass the same finished spans to the exporter if the buffer is cleared
                // outside the execution of this callback.
                var spans;
                if (_this._finishedSpans.length <= _this._maxExportBatchSize) {
                    spans = _this._finishedSpans;
                    _this._finishedSpans = [];
                } else spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);
                var doExport = function() {
                    return _this._exporter.export(spans, function(result) {
                        var _a;
                        clearTimeout(timer);
                        if (result.code === (0, $ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1).SUCCESS) resolve();
                        else reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error("BatchSpanProcessor: span export failed"));
                    });
                };
                var pendingResources = null;
                for(var i = 0, len = spans.length; i < len; i++){
                    var span = spans[i];
                    if (span.resource.asyncAttributesPending && span.resource.waitForAsyncAttributes) {
                        pendingResources !== null && pendingResources !== void 0 ? pendingResources : pendingResources = [];
                        pendingResources.push(span.resource.waitForAsyncAttributes());
                    }
                }
                // Avoid scheduling a promise to make the behavior more predictable and easier to test
                if (pendingResources === null) doExport();
                else Promise.all(pendingResources).then(doExport, function(err) {
                    (0, $5c139fbfce029b83$export$54c6946fc34b7cc2)(err);
                    reject(err);
                });
            });
        });
    };
    BatchSpanProcessorBase.prototype._maybeStartTimer = function() {
        var _this = this;
        if (this._isExporting) return;
        var flush = function() {
            _this._isExporting = true;
            _this._flushOneBatch().finally(function() {
                _this._isExporting = false;
                if (_this._finishedSpans.length > 0) {
                    _this._clearTimer();
                    _this._maybeStartTimer();
                }
            }).catch(function(e) {
                _this._isExporting = false;
                (0, $5c139fbfce029b83$export$54c6946fc34b7cc2)(e);
            });
        };
        // we only wait if the queue doesn't have enough elements yet
        if (this._finishedSpans.length >= this._maxExportBatchSize) return flush();
        if (this._timer !== undefined) return;
        this._timer = setTimeout(function() {
            return flush();
        }, this._scheduledDelayMillis);
        (0, $48f9168e3b3a85e0$export$13bcdd8a72da0e8f)(this._timer);
    };
    BatchSpanProcessorBase.prototype._clearTimer = function() {
        if (this._timer !== undefined) {
            clearTimeout(this._timer);
            this._timer = undefined;
        }
    };
    return BatchSpanProcessorBase;
}();



var $24ab59accace2f6a$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $24ab59accace2f6a$export$237547059fd543f9 = /** @class */ function(_super) {
    $24ab59accace2f6a$var$__extends(BatchSpanProcessor, _super);
    function BatchSpanProcessor(_exporter, config) {
        var _this = _super.call(this, _exporter, config) || this;
        _this.onInit(config);
        return _this;
    }
    BatchSpanProcessor.prototype.onInit = function(config) {
        var _this = this;
        if ((config === null || config === void 0 ? void 0 : config.disableAutoFlushOnDocumentHide) !== true && typeof document !== "undefined") {
            this._visibilityChangeListener = function() {
                if (document.visibilityState === "hidden") _this.forceFlush().catch(function(error) {
                    (0, $5c139fbfce029b83$export$54c6946fc34b7cc2)(error);
                });
            };
            this._pageHideListener = function() {
                _this.forceFlush().catch(function(error) {
                    (0, $5c139fbfce029b83$export$54c6946fc34b7cc2)(error);
                });
            };
            document.addEventListener("visibilitychange", this._visibilityChangeListener);
            // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769
            document.addEventListener("pagehide", this._pageHideListener);
        }
    };
    BatchSpanProcessor.prototype.onShutdown = function() {
        if (typeof document !== "undefined") {
            if (this._visibilityChangeListener) document.removeEventListener("visibilitychange", this._visibilityChangeListener);
            if (this._pageHideListener) document.removeEventListener("pagehide", this._pageHideListener);
        }
    };
    return BatchSpanProcessor;
}((0, $7fc8aaff85acee1b$export$54ea939f5d39e8a2));

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/** Sampler that samples a given fraction of traces based of trace id deterministically. */ var $a0283d7e7b94aa53$export$f1624f887f708bbf = /** @class */ function() {
    function TraceIdRatioBasedSampler(_ratio) {
        if (_ratio === void 0) _ratio = 0;
        this._ratio = _ratio;
        this._ratio = this._normalize(_ratio);
        this._upperBound = Math.floor(this._ratio * 0xffffffff);
    }
    TraceIdRatioBasedSampler.prototype.shouldSample = function(context, traceId) {
        return {
            decision: (0, $9019f25568a7d9bd$export$29dd34cf1269f6da)(traceId) && this._accumulate(traceId) < this._upperBound ? (0, $eb2b7d0a8ba2c2ae$export$94df7a7a96a92f7b).RECORD_AND_SAMPLED : (0, $eb2b7d0a8ba2c2ae$export$94df7a7a96a92f7b).NOT_RECORD
        };
    };
    TraceIdRatioBasedSampler.prototype.toString = function() {
        return "TraceIdRatioBased{" + this._ratio + "}";
    };
    TraceIdRatioBasedSampler.prototype._normalize = function(ratio) {
        if (typeof ratio !== "number" || isNaN(ratio)) return 0;
        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;
    };
    TraceIdRatioBasedSampler.prototype._accumulate = function(traceId) {
        var accumulation = 0;
        for(var i = 0; i < traceId.length / 8; i++){
            var pos = i * 8;
            var part = parseInt(traceId.slice(pos, pos + 8), 16);
            accumulation = (accumulation ^ part) >>> 0;
        }
        return accumulation;
    };
    return TraceIdRatioBasedSampler;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $b7fe894827773e5b$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/** Combines multiple propagators into a single propagator. */ var $b7fe894827773e5b$export$4beb26f46770357f = /** @class */ function() {
    /**
     * Construct a composite propagator from a list of propagators.
     *
     * @param [config] Configuration object for composite propagator
     */ function CompositePropagator(config) {
        if (config === void 0) config = {};
        var _a;
        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];
        this._fields = Array.from(new Set(this._propagators// older propagators may not have fields function, null check to be sure
        .map(function(p) {
            return typeof p.fields === "function" ? p.fields() : [];
        }).reduce(function(x, y) {
            return x.concat(y);
        }, [])));
    }
    /**
     * Run each of the configured propagators with the given context and carrier.
     * Propagators are run in the order they are configured, so if multiple
     * propagators write the same carrier key, the propagator later in the list
     * will "win".
     *
     * @param context Context to inject
     * @param carrier Carrier into which context will be injected
     */ CompositePropagator.prototype.inject = function(context, carrier, setter) {
        var e_1, _a;
        try {
            for(var _b = $b7fe894827773e5b$var$__values(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()){
                var propagator = _c.value;
                try {
                    propagator.inject(context, carrier, setter);
                } catch (err) {
                    (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Failed to inject with " + propagator.constructor.name + ". Err: " + err.message);
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    /**
     * Run each of the configured propagators with the given context and carrier.
     * Propagators are run in the order they are configured, so if multiple
     * propagators write the same context key, the propagator later in the list
     * will "win".
     *
     * @param context Context to add values to
     * @param carrier Carrier from which to extract context
     */ CompositePropagator.prototype.extract = function(context, carrier, getter) {
        return this._propagators.reduce(function(ctx, propagator) {
            try {
                return propagator.extract(ctx, carrier, getter);
            } catch (err) {
                (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Failed to extract with " + propagator.constructor.name + ". Err: " + err.message);
            }
            return ctx;
        }, context);
    };
    CompositePropagator.prototype.fields = function() {
        // return a new array so our fields cannot be modified
        return this._fields.slice();
    };
    return CompositePropagator;
}();

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /* eslint-disable @typescript-eslint/no-explicit-any */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /* eslint-disable @typescript-eslint/no-explicit-any */ /**
 * based on lodash in order to support esm builds without esModuleInterop.
 * lodash is using MIT License.
 **/ var $b2cbbb20d3b6a51b$var$objectTag = "[object Object]";
var $b2cbbb20d3b6a51b$var$nullTag = "[object Null]";
var $b2cbbb20d3b6a51b$var$undefinedTag = "[object Undefined]";
var $b2cbbb20d3b6a51b$var$funcProto = Function.prototype;
var $b2cbbb20d3b6a51b$var$funcToString = $b2cbbb20d3b6a51b$var$funcProto.toString;
var $b2cbbb20d3b6a51b$var$objectCtorString = $b2cbbb20d3b6a51b$var$funcToString.call(Object);
var $b2cbbb20d3b6a51b$var$getPrototype = $b2cbbb20d3b6a51b$var$overArg(Object.getPrototypeOf, Object);
var $b2cbbb20d3b6a51b$var$objectProto = Object.prototype;
var $b2cbbb20d3b6a51b$var$hasOwnProperty = $b2cbbb20d3b6a51b$var$objectProto.hasOwnProperty;
var $b2cbbb20d3b6a51b$var$symToStringTag = Symbol ? Symbol.toStringTag : undefined;
var $b2cbbb20d3b6a51b$var$nativeObjectToString = $b2cbbb20d3b6a51b$var$objectProto.toString;
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function $b2cbbb20d3b6a51b$var$overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
function $b2cbbb20d3b6a51b$export$53b83ca8eaab0383(value) {
    if (!$b2cbbb20d3b6a51b$var$isObjectLike(value) || $b2cbbb20d3b6a51b$var$baseGetTag(value) !== $b2cbbb20d3b6a51b$var$objectTag) return false;
    var proto = $b2cbbb20d3b6a51b$var$getPrototype(value);
    if (proto === null) return true;
    var Ctor = $b2cbbb20d3b6a51b$var$hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && $b2cbbb20d3b6a51b$var$funcToString.call(Ctor) === $b2cbbb20d3b6a51b$var$objectCtorString;
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function $b2cbbb20d3b6a51b$var$isObjectLike(value) {
    return value != null && typeof value == "object";
}
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function $b2cbbb20d3b6a51b$var$baseGetTag(value) {
    if (value == null) return value === undefined ? $b2cbbb20d3b6a51b$var$undefinedTag : $b2cbbb20d3b6a51b$var$nullTag;
    return $b2cbbb20d3b6a51b$var$symToStringTag && $b2cbbb20d3b6a51b$var$symToStringTag in Object(value) ? $b2cbbb20d3b6a51b$var$getRawTag(value) : $b2cbbb20d3b6a51b$var$objectToString(value);
}
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function $b2cbbb20d3b6a51b$var$getRawTag(value) {
    var isOwn = $b2cbbb20d3b6a51b$var$hasOwnProperty.call(value, $b2cbbb20d3b6a51b$var$symToStringTag), tag = value[$b2cbbb20d3b6a51b$var$symToStringTag];
    var unmasked = false;
    try {
        value[$b2cbbb20d3b6a51b$var$symToStringTag] = undefined;
        unmasked = true;
    } catch (e) {
    // silence
    }
    var result = $b2cbbb20d3b6a51b$var$nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[$b2cbbb20d3b6a51b$var$symToStringTag] = tag;
        else delete value[$b2cbbb20d3b6a51b$var$symToStringTag];
    }
    return result;
}
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function $b2cbbb20d3b6a51b$var$objectToString(value) {
    return $b2cbbb20d3b6a51b$var$nativeObjectToString.call(value);
}


var $d38b70c327ed913f$var$MAX_LEVEL = 20;
function $d38b70c327ed913f$export$4950aa0f605343fb() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    var result = args.shift();
    var objects = new WeakMap();
    while(args.length > 0)result = $d38b70c327ed913f$var$mergeTwoObjects(result, args.shift(), 0, objects);
    return result;
}
function $d38b70c327ed913f$var$takeValue(value) {
    if ($d38b70c327ed913f$var$isArray(value)) return value.slice();
    return value;
}
/**
 * Merges two objects
 * @param one - first object
 * @param two - second object
 * @param level - current deep level
 * @param objects - objects holder that has been already referenced - to prevent
 * cyclic dependency
 */ function $d38b70c327ed913f$var$mergeTwoObjects(one, two, level, objects) {
    if (level === void 0) level = 0;
    var result;
    if (level > $d38b70c327ed913f$var$MAX_LEVEL) return undefined;
    level++;
    if ($d38b70c327ed913f$var$isPrimitive(one) || $d38b70c327ed913f$var$isPrimitive(two) || $d38b70c327ed913f$var$isFunction(two)) result = $d38b70c327ed913f$var$takeValue(two);
    else if ($d38b70c327ed913f$var$isArray(one)) {
        result = one.slice();
        if ($d38b70c327ed913f$var$isArray(two)) for(var i = 0, j = two.length; i < j; i++)result.push($d38b70c327ed913f$var$takeValue(two[i]));
        else if ($d38b70c327ed913f$var$isObject(two)) {
            var keys = Object.keys(two);
            for(var i = 0, j = keys.length; i < j; i++){
                var key = keys[i];
                result[key] = $d38b70c327ed913f$var$takeValue(two[key]);
            }
        }
    } else if ($d38b70c327ed913f$var$isObject(one)) {
        if ($d38b70c327ed913f$var$isObject(two)) {
            if (!$d38b70c327ed913f$var$shouldMerge(one, two)) return two;
            result = Object.assign({}, one);
            var keys = Object.keys(two);
            for(var i = 0, j = keys.length; i < j; i++){
                var key = keys[i];
                var twoValue = two[key];
                if ($d38b70c327ed913f$var$isPrimitive(twoValue)) {
                    if (typeof twoValue === "undefined") delete result[key];
                    else // result[key] = takeValue(twoValue);
                    result[key] = twoValue;
                } else {
                    var obj1 = result[key];
                    var obj2 = twoValue;
                    if ($d38b70c327ed913f$var$wasObjectReferenced(one, key, objects) || $d38b70c327ed913f$var$wasObjectReferenced(two, key, objects)) delete result[key];
                    else {
                        if ($d38b70c327ed913f$var$isObject(obj1) && $d38b70c327ed913f$var$isObject(obj2)) {
                            var arr1 = objects.get(obj1) || [];
                            var arr2 = objects.get(obj2) || [];
                            arr1.push({
                                obj: one,
                                key: key
                            });
                            arr2.push({
                                obj: two,
                                key: key
                            });
                            objects.set(obj1, arr1);
                            objects.set(obj2, arr2);
                        }
                        result[key] = $d38b70c327ed913f$var$mergeTwoObjects(result[key], twoValue, level, objects);
                    }
                }
            }
        } else result = two;
    }
    return result;
}
/**
 * Function to check if object has been already reference
 * @param obj
 * @param key
 * @param objects
 */ function $d38b70c327ed913f$var$wasObjectReferenced(obj, key, objects) {
    var arr = objects.get(obj[key]) || [];
    for(var i = 0, j = arr.length; i < j; i++){
        var info = arr[i];
        if (info.key === key && info.obj === obj) return true;
    }
    return false;
}
function $d38b70c327ed913f$var$isArray(value) {
    return Array.isArray(value);
}
function $d38b70c327ed913f$var$isFunction(value) {
    return typeof value === "function";
}
function $d38b70c327ed913f$var$isObject(value) {
    return !$d38b70c327ed913f$var$isPrimitive(value) && !$d38b70c327ed913f$var$isArray(value) && !$d38b70c327ed913f$var$isFunction(value) && typeof value === "object";
}
function $d38b70c327ed913f$var$isPrimitive(value) {
    return typeof value === "string" || typeof value === "number" || typeof value === "boolean" || typeof value === "undefined" || value instanceof Date || value instanceof RegExp || value === null;
}
function $d38b70c327ed913f$var$shouldMerge(one, two) {
    if (!(0, $b2cbbb20d3b6a51b$export$53b83ca8eaab0383)(one) || !(0, $b2cbbb20d3b6a51b$export$53b83ca8eaab0383)(two)) return false;
    return true;
}

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $388b6cbcf2b0a785$export$3043215ef908d54f = "=";
var $388b6cbcf2b0a785$export$393a3f9e6e76438 = ";";
var $388b6cbcf2b0a785$export$1ab471785c2cf557 = ",";
var $388b6cbcf2b0a785$export$a6199dd4fe419e69 = "baggage";
var $388b6cbcf2b0a785$export$9a50757016085e99 = 180;
var $388b6cbcf2b0a785$export$c7d9e39bb295c1f = 4096;
var $388b6cbcf2b0a785$export$dd0527bee1f518e7 = 8192;




var $a3db70c75001cde7$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function $a3db70c75001cde7$export$790fc82b2ff5bf87(keyPairs) {
    return keyPairs.reduce(function(hValue, current) {
        var value = "" + hValue + (hValue !== "" ? (0, $388b6cbcf2b0a785$export$1ab471785c2cf557) : "") + current;
        return value.length > (0, $388b6cbcf2b0a785$export$dd0527bee1f518e7) ? hValue : value;
    }, "");
}
function $a3db70c75001cde7$export$ed4c06f0919b1951(baggage) {
    return baggage.getAllEntries().map(function(_a) {
        var _b = $a3db70c75001cde7$var$__read(_a, 2), key = _b[0], value = _b[1];
        var entry = encodeURIComponent(key) + "=" + encodeURIComponent(value.value);
        // include opaque metadata if provided
        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation
        if (value.metadata !== undefined) entry += (0, $388b6cbcf2b0a785$export$393a3f9e6e76438) + value.metadata.toString();
        return entry;
    });
}
function $a3db70c75001cde7$export$62659c450b08e504(entry) {
    var valueProps = entry.split((0, $388b6cbcf2b0a785$export$393a3f9e6e76438));
    if (valueProps.length <= 0) return;
    var keyPairPart = valueProps.shift();
    if (!keyPairPart) return;
    var separatorIndex = keyPairPart.indexOf((0, $388b6cbcf2b0a785$export$3043215ef908d54f));
    if (separatorIndex <= 0) return;
    var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());
    var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());
    var metadata;
    if (valueProps.length > 0) metadata = (0, $d1ab8715d93ab9b4$export$c491cedc1b2b6e9e)(valueProps.join((0, $388b6cbcf2b0a785$export$393a3f9e6e76438)));
    return {
        key: key,
        value: value,
        metadata: metadata
    };
}
function $a3db70c75001cde7$export$1259660ed6830e21(value) {
    if (typeof value !== "string" || value.length === 0) return {};
    return value.split((0, $388b6cbcf2b0a785$export$1ab471785c2cf557)).map(function(entry) {
        return $a3db70c75001cde7$export$62659c450b08e504(entry);
    }).filter(function(keyPair) {
        return keyPair !== undefined && keyPair.value.length > 0;
    }).reduce(function(headers, keyPair) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        headers[keyPair.key] = keyPair.value;
        return headers;
    }, {});
}


/**
 * Propagates {@link Baggage} through Context format propagation.
 *
 * Based on the Baggage specification:
 * https://w3c.github.io/baggage/
 */ var $736381edcc247406$export$604bcc7f2bff6bb = /** @class */ function() {
    function W3CBaggagePropagator() {}
    W3CBaggagePropagator.prototype.inject = function(context, carrier, setter) {
        var baggage = (0, $341b7c0814521fae$export$3e49040daa9dba20).getBaggage(context);
        if (!baggage || (0, $681dc49ded58dd0c$export$7d5f2376f7cf513)(context)) return;
        var keyPairs = (0, $a3db70c75001cde7$export$ed4c06f0919b1951)(baggage).filter(function(pair) {
            return pair.length <= (0, $388b6cbcf2b0a785$export$c7d9e39bb295c1f);
        }).slice(0, (0, $388b6cbcf2b0a785$export$9a50757016085e99));
        var headerValue = (0, $a3db70c75001cde7$export$790fc82b2ff5bf87)(keyPairs);
        if (headerValue.length > 0) setter.set(carrier, (0, $388b6cbcf2b0a785$export$a6199dd4fe419e69), headerValue);
    };
    W3CBaggagePropagator.prototype.extract = function(context, carrier, getter) {
        var headerValue = getter.get(carrier, (0, $388b6cbcf2b0a785$export$a6199dd4fe419e69));
        var baggageString = Array.isArray(headerValue) ? headerValue.join((0, $388b6cbcf2b0a785$export$1ab471785c2cf557)) : headerValue;
        if (!baggageString) return context;
        var baggage = {};
        if (baggageString.length === 0) return context;
        var pairs = baggageString.split((0, $388b6cbcf2b0a785$export$1ab471785c2cf557));
        pairs.forEach(function(entry) {
            var keyPair = (0, $a3db70c75001cde7$export$62659c450b08e504)(entry);
            if (keyPair) {
                var baggageEntry = {
                    value: keyPair.value
                };
                if (keyPair.metadata) baggageEntry.metadata = keyPair.metadata;
                baggage[keyPair.key] = baggageEntry;
            }
        });
        if (Object.entries(baggage).length === 0) return context;
        return (0, $341b7c0814521fae$export$3e49040daa9dba20).setBaggage(context, (0, $341b7c0814521fae$export$3e49040daa9dba20).createBaggage(baggage));
    };
    W3CBaggagePropagator.prototype.fields = function() {
        return [
            (0, $388b6cbcf2b0a785$export$a6199dd4fe419e69)
        ];
    };
    return W3CBaggagePropagator;
}();

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $5e0534a43867e622$var$VALID_KEY_CHAR_RANGE = "[_0-9a-z-*/]";
var $5e0534a43867e622$var$VALID_KEY = "[a-z]" + $5e0534a43867e622$var$VALID_KEY_CHAR_RANGE + "{0,255}";
var $5e0534a43867e622$var$VALID_VENDOR_KEY = "[a-z0-9]" + $5e0534a43867e622$var$VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + $5e0534a43867e622$var$VALID_KEY_CHAR_RANGE + "{0,13}";
var $5e0534a43867e622$var$VALID_KEY_REGEX = new RegExp("^(?:" + $5e0534a43867e622$var$VALID_KEY + "|" + $5e0534a43867e622$var$VALID_VENDOR_KEY + ")$");
var $5e0534a43867e622$var$VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
var $5e0534a43867e622$var$INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
function $5e0534a43867e622$export$469cc9c479301ba6(key) {
    return $5e0534a43867e622$var$VALID_KEY_REGEX.test(key);
}
function $5e0534a43867e622$export$b76e9316566cc26e(value) {
    return $5e0534a43867e622$var$VALID_VALUE_BASE_REGEX.test(value) && !$5e0534a43867e622$var$INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);
}


var $47db04e79b168501$var$MAX_TRACE_STATE_ITEMS = 32;
var $47db04e79b168501$var$MAX_TRACE_STATE_LEN = 512;
var $47db04e79b168501$var$LIST_MEMBERS_SEPARATOR = ",";
var $47db04e79b168501$var$LIST_MEMBER_KEY_VALUE_SPLITTER = "=";
/**
 * TraceState must be a class and not a simple object type because of the spec
 * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).
 *
 * Here is the list of allowed mutations:
 * - New key-value pair should be added into the beginning of the list
 * - The value of any key can be updated. Modified keys MUST be moved to the
 * beginning of the list.
 */ var $47db04e79b168501$export$b0addedc390b67c2 = /** @class */ function() {
    function TraceState(rawTraceState) {
        this._internalState = new Map();
        if (rawTraceState) this._parse(rawTraceState);
    }
    TraceState.prototype.set = function(key, value) {
        // TODO: Benchmark the different approaches(map vs list) and
        // use the faster one.
        var traceState = this._clone();
        if (traceState._internalState.has(key)) traceState._internalState.delete(key);
        traceState._internalState.set(key, value);
        return traceState;
    };
    TraceState.prototype.unset = function(key) {
        var traceState = this._clone();
        traceState._internalState.delete(key);
        return traceState;
    };
    TraceState.prototype.get = function(key) {
        return this._internalState.get(key);
    };
    TraceState.prototype.serialize = function() {
        var _this = this;
        return this._keys().reduce(function(agg, key) {
            agg.push(key + $47db04e79b168501$var$LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
            return agg;
        }, []).join($47db04e79b168501$var$LIST_MEMBERS_SEPARATOR);
    };
    TraceState.prototype._parse = function(rawTraceState) {
        if (rawTraceState.length > $47db04e79b168501$var$MAX_TRACE_STATE_LEN) return;
        this._internalState = rawTraceState.split($47db04e79b168501$var$LIST_MEMBERS_SEPARATOR).reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning
        .reduce(function(agg, part) {
            var listMember = part.trim(); // Optional Whitespace (OWS) handling
            var i = listMember.indexOf($47db04e79b168501$var$LIST_MEMBER_KEY_VALUE_SPLITTER);
            if (i !== -1) {
                var key = listMember.slice(0, i);
                var value = listMember.slice(i + 1, part.length);
                if ((0, $5e0534a43867e622$export$469cc9c479301ba6)(key) && (0, $5e0534a43867e622$export$b76e9316566cc26e)(value)) agg.set(key, value);
            }
            return agg;
        }, new Map());
        // Because of the reverse() requirement, trunc must be done after map is created
        if (this._internalState.size > $47db04e79b168501$var$MAX_TRACE_STATE_ITEMS) this._internalState = new Map(Array.from(this._internalState.entries()).reverse() // Use reverse same as original tracestate parse chain
        .slice(0, $47db04e79b168501$var$MAX_TRACE_STATE_ITEMS));
    };
    TraceState.prototype._keys = function() {
        return Array.from(this._internalState.keys()).reverse();
    };
    TraceState.prototype._clone = function() {
        var traceState = new TraceState();
        traceState._internalState = new Map(this._internalState);
        return traceState;
    };
    return TraceState;
}();


var $2aca640bec4a6daf$export$830e05fa2746348 = "traceparent";
var $2aca640bec4a6daf$export$2b12ed38dcfae2ae = "tracestate";
var $2aca640bec4a6daf$var$VERSION = "00";
var $2aca640bec4a6daf$var$VERSION_PART = "(?!ff)[\\da-f]{2}";
var $2aca640bec4a6daf$var$TRACE_ID_PART = "(?![0]{32})[\\da-f]{32}";
var $2aca640bec4a6daf$var$PARENT_ID_PART = "(?![0]{16})[\\da-f]{16}";
var $2aca640bec4a6daf$var$FLAGS_PART = "[\\da-f]{2}";
var $2aca640bec4a6daf$var$TRACE_PARENT_REGEX = new RegExp("^\\s?(" + $2aca640bec4a6daf$var$VERSION_PART + ")-(" + $2aca640bec4a6daf$var$TRACE_ID_PART + ")-(" + $2aca640bec4a6daf$var$PARENT_ID_PART + ")-(" + $2aca640bec4a6daf$var$FLAGS_PART + ")(-.*)?\\s?$");
function $2aca640bec4a6daf$export$f4d87f8901a93f5d(traceParent) {
    var match = $2aca640bec4a6daf$var$TRACE_PARENT_REGEX.exec(traceParent);
    if (!match) return null;
    // According to the specification the implementation should be compatible
    // with future versions. If there are more parts, we only reject it if it's using version 00
    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent
    if (match[1] === "00" && match[5]) return null;
    return {
        traceId: match[2],
        spanId: match[3],
        traceFlags: parseInt(match[4], 16)
    };
}
/**
 * Propagates {@link SpanContext} through Trace Context format propagation.
 *
 * Based on the Trace Context specification:
 * https://www.w3.org/TR/trace-context/
 */ var $2aca640bec4a6daf$export$737c747d043a1f7b = /** @class */ function() {
    function W3CTraceContextPropagator() {}
    W3CTraceContextPropagator.prototype.inject = function(context, carrier, setter) {
        var spanContext = (0, $d3d11f3bc96c5059$export$357889f174732d38).getSpanContext(context);
        if (!spanContext || (0, $681dc49ded58dd0c$export$7d5f2376f7cf513)(context) || !(0, $9019f25568a7d9bd$export$e4373b9a2c09216c)(spanContext)) return;
        var traceParent = $2aca640bec4a6daf$var$VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-0" + Number(spanContext.traceFlags || (0, $06dc16c226890360$export$bf9049ad2b0883ff).NONE).toString(16);
        setter.set(carrier, $2aca640bec4a6daf$export$830e05fa2746348, traceParent);
        if (spanContext.traceState) setter.set(carrier, $2aca640bec4a6daf$export$2b12ed38dcfae2ae, spanContext.traceState.serialize());
    };
    W3CTraceContextPropagator.prototype.extract = function(context, carrier, getter) {
        var traceParentHeader = getter.get(carrier, $2aca640bec4a6daf$export$830e05fa2746348);
        if (!traceParentHeader) return context;
        var traceParent = Array.isArray(traceParentHeader) ? traceParentHeader[0] : traceParentHeader;
        if (typeof traceParent !== "string") return context;
        var spanContext = $2aca640bec4a6daf$export$f4d87f8901a93f5d(traceParent);
        if (!spanContext) return context;
        spanContext.isRemote = true;
        var traceStateHeader = getter.get(carrier, $2aca640bec4a6daf$export$2b12ed38dcfae2ae);
        if (traceStateHeader) {
            // If more than one `tracestate` header is found, we merge them into a
            // single header.
            var state = Array.isArray(traceStateHeader) ? traceStateHeader.join(",") : traceStateHeader;
            spanContext.traceState = new (0, $47db04e79b168501$export$b0addedc390b67c2)(typeof state === "string" ? state : undefined);
        }
        return (0, $d3d11f3bc96c5059$export$357889f174732d38).setSpanContext(context, spanContext);
    };
    W3CTraceContextPropagator.prototype.fields = function() {
        return [
            $2aca640bec4a6daf$export$830e05fa2746348,
            $2aca640bec4a6daf$export$2b12ed38dcfae2ae
        ];
    };
    return W3CTraceContextPropagator;
}();



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $b48e61364f31e119$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $b48e61364f31e119$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function $b48e61364f31e119$export$b0663eba150d60c9(attributes) {
    var e_1, _a;
    var out = {};
    if (typeof attributes !== "object" || attributes == null) return out;
    try {
        for(var _b = $b48e61364f31e119$var$__values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()){
            var _d = $b48e61364f31e119$var$__read(_c.value, 2), key = _d[0], val = _d[1];
            if (!$b48e61364f31e119$export$d3dd8ead6a0318c3(key)) {
                (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Invalid attribute key: " + key);
                continue;
            }
            if (!$b48e61364f31e119$export$1daad3d2aacf48c5(val)) {
                (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Invalid attribute value set for key: " + key);
                continue;
            }
            if (Array.isArray(val)) out[key] = val.slice();
            else out[key] = val;
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return out;
}
function $b48e61364f31e119$export$d3dd8ead6a0318c3(key) {
    return typeof key === "string" && key.length > 0;
}
function $b48e61364f31e119$export$1daad3d2aacf48c5(val) {
    if (val == null) return true;
    if (Array.isArray(val)) return $b48e61364f31e119$var$isHomogeneousAttributeValueArray(val);
    return $b48e61364f31e119$var$isValidPrimitiveAttributeValue(val);
}
function $b48e61364f31e119$var$isHomogeneousAttributeValueArray(arr) {
    var e_2, _a;
    var type;
    try {
        for(var arr_1 = $b48e61364f31e119$var$__values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()){
            var element = arr_1_1.value;
            // null/undefined elements are allowed
            if (element == null) continue;
            if (!type) {
                if ($b48e61364f31e119$var$isValidPrimitiveAttributeValue(element)) {
                    type = typeof element;
                    continue;
                }
                // encountered an invalid primitive
                return false;
            }
            if (typeof element === type) continue;
            return false;
        }
    } catch (e_2_1) {
        e_2 = {
            error: e_2_1
        };
    } finally{
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        } finally{
            if (e_2) throw e_2.error;
        }
    }
    return true;
}
function $b48e61364f31e119$var$isValidPrimitiveAttributeValue(val) {
    switch(typeof val){
        case "number":
        case "boolean":
        case "string":
            return true;
    }
    return false;
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $fb570aa63c9bb090$export$b22daef4119238cd = performance;


var $d06339726fb5d441$var$NANOSECOND_DIGITS = 9;
var $d06339726fb5d441$var$NANOSECOND_DIGITS_IN_MILLIS = 6;
var $d06339726fb5d441$var$MILLISECONDS_TO_NANOSECONDS = Math.pow(10, $d06339726fb5d441$var$NANOSECOND_DIGITS_IN_MILLIS);
var $d06339726fb5d441$var$SECOND_TO_NANOSECONDS = Math.pow(10, $d06339726fb5d441$var$NANOSECOND_DIGITS);
function $d06339726fb5d441$export$e7ec5c82995537b1(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round(epochMillis % 1000 * $d06339726fb5d441$var$MILLISECONDS_TO_NANOSECONDS);
    return [
        seconds,
        nanos
    ];
}
function $d06339726fb5d441$export$e752b05e58096a2f() {
    var timeOrigin = (0, $fb570aa63c9bb090$export$b22daef4119238cd).timeOrigin;
    if (typeof timeOrigin !== "number") {
        var perf = (0, $fb570aa63c9bb090$export$b22daef4119238cd);
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
function $d06339726fb5d441$export$24b3f7dcd2848fa8(performanceNow) {
    var timeOrigin = $d06339726fb5d441$export$e7ec5c82995537b1($d06339726fb5d441$export$e752b05e58096a2f());
    var now = $d06339726fb5d441$export$e7ec5c82995537b1(typeof performanceNow === "number" ? performanceNow : (0, $fb570aa63c9bb090$export$b22daef4119238cd).now());
    return $d06339726fb5d441$export$f07bb1dbc72184c3(timeOrigin, now);
}
function $d06339726fb5d441$export$5f4c8a8ba0e36226(time) {
    // process.hrtime
    if ($d06339726fb5d441$export$390c59432f173a9f(time)) return time;
    else if (typeof time === "number") {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < $d06339726fb5d441$export$e752b05e58096a2f()) return $d06339726fb5d441$export$24b3f7dcd2848fa8(time);
        else // epoch milliseconds or performance.timeOrigin
        return $d06339726fb5d441$export$e7ec5c82995537b1(time);
    } else if (time instanceof Date) return $d06339726fb5d441$export$e7ec5c82995537b1(time.getTime());
    else throw TypeError("Invalid input type");
}
function $d06339726fb5d441$export$b783ad6617389e3e(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += $d06339726fb5d441$var$SECOND_TO_NANOSECONDS;
    }
    return [
        seconds,
        nanos
    ];
}
function $d06339726fb5d441$export$973c1c4fad6103e(time) {
    var precision = $d06339726fb5d441$var$NANOSECOND_DIGITS;
    var tmp = "" + "0".repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substr(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace("000Z", nanoString);
}
function $d06339726fb5d441$export$2d91441ae30ebcfc(time) {
    return time[0] * $d06339726fb5d441$var$SECOND_TO_NANOSECONDS + time[1];
}
function $d06339726fb5d441$export$30b3706e4e35edf0(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
function $d06339726fb5d441$export$95601fd64fa689b7(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
function $d06339726fb5d441$export$390c59432f173a9f(value) {
    return Array.isArray(value) && value.length === 2 && typeof value[0] === "number" && typeof value[1] === "number";
}
function $d06339726fb5d441$export$a5e58227c317ebb9(value) {
    return $d06339726fb5d441$export$390c59432f173a9f(value) || typeof value === "number" || value instanceof Date;
}
function $d06339726fb5d441$export$f07bb1dbc72184c3(time1, time2) {
    var out = [
        time1[0] + time2[0],
        time1[1] + time2[1]
    ];
    // Nanoseconds
    if (out[1] >= $d06339726fb5d441$var$SECOND_TO_NANOSECONDS) {
        out[1] -= $d06339726fb5d441$var$SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2
//----------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------
// Constant values for SemanticAttributes
//----------------------------------------------------------------------------------------------------------
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_AWS_LAMBDA_INVOKED_ARN = "aws.lambda.invoked_arn";
var $29f26dae6e075eca$var$TMP_DB_SYSTEM = "db.system";
var $29f26dae6e075eca$var$TMP_DB_CONNECTION_STRING = "db.connection_string";
var $29f26dae6e075eca$var$TMP_DB_USER = "db.user";
var $29f26dae6e075eca$var$TMP_DB_JDBC_DRIVER_CLASSNAME = "db.jdbc.driver_classname";
var $29f26dae6e075eca$var$TMP_DB_NAME = "db.name";
var $29f26dae6e075eca$var$TMP_DB_STATEMENT = "db.statement";
var $29f26dae6e075eca$var$TMP_DB_OPERATION = "db.operation";
var $29f26dae6e075eca$var$TMP_DB_MSSQL_INSTANCE_NAME = "db.mssql.instance_name";
var $29f26dae6e075eca$var$TMP_DB_CASSANDRA_KEYSPACE = "db.cassandra.keyspace";
var $29f26dae6e075eca$var$TMP_DB_CASSANDRA_PAGE_SIZE = "db.cassandra.page_size";
var $29f26dae6e075eca$var$TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = "db.cassandra.consistency_level";
var $29f26dae6e075eca$var$TMP_DB_CASSANDRA_TABLE = "db.cassandra.table";
var $29f26dae6e075eca$var$TMP_DB_CASSANDRA_IDEMPOTENCE = "db.cassandra.idempotence";
var $29f26dae6e075eca$var$TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = "db.cassandra.speculative_execution_count";
var $29f26dae6e075eca$var$TMP_DB_CASSANDRA_COORDINATOR_ID = "db.cassandra.coordinator.id";
var $29f26dae6e075eca$var$TMP_DB_CASSANDRA_COORDINATOR_DC = "db.cassandra.coordinator.dc";
var $29f26dae6e075eca$var$TMP_DB_HBASE_NAMESPACE = "db.hbase.namespace";
var $29f26dae6e075eca$var$TMP_DB_REDIS_DATABASE_INDEX = "db.redis.database_index";
var $29f26dae6e075eca$var$TMP_DB_MONGODB_COLLECTION = "db.mongodb.collection";
var $29f26dae6e075eca$var$TMP_DB_SQL_TABLE = "db.sql.table";
var $29f26dae6e075eca$var$TMP_EXCEPTION_TYPE = "exception.type";
var $29f26dae6e075eca$var$TMP_EXCEPTION_MESSAGE = "exception.message";
var $29f26dae6e075eca$var$TMP_EXCEPTION_STACKTRACE = "exception.stacktrace";
var $29f26dae6e075eca$var$TMP_EXCEPTION_ESCAPED = "exception.escaped";
var $29f26dae6e075eca$var$TMP_FAAS_TRIGGER = "faas.trigger";
var $29f26dae6e075eca$var$TMP_FAAS_EXECUTION = "faas.execution";
var $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_COLLECTION = "faas.document.collection";
var $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_OPERATION = "faas.document.operation";
var $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_TIME = "faas.document.time";
var $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_NAME = "faas.document.name";
var $29f26dae6e075eca$var$TMP_FAAS_TIME = "faas.time";
var $29f26dae6e075eca$var$TMP_FAAS_CRON = "faas.cron";
var $29f26dae6e075eca$var$TMP_FAAS_COLDSTART = "faas.coldstart";
var $29f26dae6e075eca$var$TMP_FAAS_INVOKED_NAME = "faas.invoked_name";
var $29f26dae6e075eca$var$TMP_FAAS_INVOKED_PROVIDER = "faas.invoked_provider";
var $29f26dae6e075eca$var$TMP_FAAS_INVOKED_REGION = "faas.invoked_region";
var $29f26dae6e075eca$var$TMP_NET_TRANSPORT = "net.transport";
var $29f26dae6e075eca$var$TMP_NET_PEER_IP = "net.peer.ip";
var $29f26dae6e075eca$var$TMP_NET_PEER_PORT = "net.peer.port";
var $29f26dae6e075eca$var$TMP_NET_PEER_NAME = "net.peer.name";
var $29f26dae6e075eca$var$TMP_NET_HOST_IP = "net.host.ip";
var $29f26dae6e075eca$var$TMP_NET_HOST_PORT = "net.host.port";
var $29f26dae6e075eca$var$TMP_NET_HOST_NAME = "net.host.name";
var $29f26dae6e075eca$var$TMP_NET_HOST_CONNECTION_TYPE = "net.host.connection.type";
var $29f26dae6e075eca$var$TMP_NET_HOST_CONNECTION_SUBTYPE = "net.host.connection.subtype";
var $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_NAME = "net.host.carrier.name";
var $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_MCC = "net.host.carrier.mcc";
var $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_MNC = "net.host.carrier.mnc";
var $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_ICC = "net.host.carrier.icc";
var $29f26dae6e075eca$var$TMP_PEER_SERVICE = "peer.service";
var $29f26dae6e075eca$var$TMP_ENDUSER_ID = "enduser.id";
var $29f26dae6e075eca$var$TMP_ENDUSER_ROLE = "enduser.role";
var $29f26dae6e075eca$var$TMP_ENDUSER_SCOPE = "enduser.scope";
var $29f26dae6e075eca$var$TMP_THREAD_ID = "thread.id";
var $29f26dae6e075eca$var$TMP_THREAD_NAME = "thread.name";
var $29f26dae6e075eca$var$TMP_CODE_FUNCTION = "code.function";
var $29f26dae6e075eca$var$TMP_CODE_NAMESPACE = "code.namespace";
var $29f26dae6e075eca$var$TMP_CODE_FILEPATH = "code.filepath";
var $29f26dae6e075eca$var$TMP_CODE_LINENO = "code.lineno";
var $29f26dae6e075eca$var$TMP_HTTP_METHOD = "http.method";
var $29f26dae6e075eca$var$TMP_HTTP_URL = "http.url";
var $29f26dae6e075eca$var$TMP_HTTP_TARGET = "http.target";
var $29f26dae6e075eca$var$TMP_HTTP_HOST = "http.host";
var $29f26dae6e075eca$var$TMP_HTTP_SCHEME = "http.scheme";
var $29f26dae6e075eca$var$TMP_HTTP_STATUS_CODE = "http.status_code";
var $29f26dae6e075eca$var$TMP_HTTP_FLAVOR = "http.flavor";
var $29f26dae6e075eca$var$TMP_HTTP_USER_AGENT = "http.user_agent";
var $29f26dae6e075eca$var$TMP_HTTP_REQUEST_CONTENT_LENGTH = "http.request_content_length";
var $29f26dae6e075eca$var$TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = "http.request_content_length_uncompressed";
var $29f26dae6e075eca$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH = "http.response_content_length";
var $29f26dae6e075eca$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = "http.response_content_length_uncompressed";
var $29f26dae6e075eca$var$TMP_HTTP_SERVER_NAME = "http.server_name";
var $29f26dae6e075eca$var$TMP_HTTP_ROUTE = "http.route";
var $29f26dae6e075eca$var$TMP_HTTP_CLIENT_IP = "http.client_ip";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TABLE_NAMES = "aws.dynamodb.table_names";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = "aws.dynamodb.consumed_capacity";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = "aws.dynamodb.item_collection_metrics";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = "aws.dynamodb.provisioned_read_capacity";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = "aws.dynamodb.provisioned_write_capacity";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_CONSISTENT_READ = "aws.dynamodb.consistent_read";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROJECTION = "aws.dynamodb.projection";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_LIMIT = "aws.dynamodb.limit";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = "aws.dynamodb.attributes_to_get";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_INDEX_NAME = "aws.dynamodb.index_name";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SELECT = "aws.dynamodb.select";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = "aws.dynamodb.global_secondary_indexes";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = "aws.dynamodb.local_secondary_indexes";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = "aws.dynamodb.exclusive_start_table";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TABLE_COUNT = "aws.dynamodb.table_count";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SCAN_FORWARD = "aws.dynamodb.scan_forward";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SEGMENT = "aws.dynamodb.segment";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = "aws.dynamodb.total_segments";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_COUNT = "aws.dynamodb.count";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SCANNED_COUNT = "aws.dynamodb.scanned_count";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = "aws.dynamodb.attribute_definitions";
var $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = "aws.dynamodb.global_secondary_index_updates";
var $29f26dae6e075eca$var$TMP_MESSAGING_SYSTEM = "messaging.system";
var $29f26dae6e075eca$var$TMP_MESSAGING_DESTINATION = "messaging.destination";
var $29f26dae6e075eca$var$TMP_MESSAGING_DESTINATION_KIND = "messaging.destination_kind";
var $29f26dae6e075eca$var$TMP_MESSAGING_TEMP_DESTINATION = "messaging.temp_destination";
var $29f26dae6e075eca$var$TMP_MESSAGING_PROTOCOL = "messaging.protocol";
var $29f26dae6e075eca$var$TMP_MESSAGING_PROTOCOL_VERSION = "messaging.protocol_version";
var $29f26dae6e075eca$var$TMP_MESSAGING_URL = "messaging.url";
var $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_ID = "messaging.message_id";
var $29f26dae6e075eca$var$TMP_MESSAGING_CONVERSATION_ID = "messaging.conversation_id";
var $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = "messaging.message_payload_size_bytes";
var $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = "messaging.message_payload_compressed_size_bytes";
var $29f26dae6e075eca$var$TMP_MESSAGING_OPERATION = "messaging.operation";
var $29f26dae6e075eca$var$TMP_MESSAGING_CONSUMER_ID = "messaging.consumer_id";
var $29f26dae6e075eca$var$TMP_MESSAGING_RABBITMQ_ROUTING_KEY = "messaging.rabbitmq.routing_key";
var $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_MESSAGE_KEY = "messaging.kafka.message_key";
var $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_CONSUMER_GROUP = "messaging.kafka.consumer_group";
var $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_CLIENT_ID = "messaging.kafka.client_id";
var $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_PARTITION = "messaging.kafka.partition";
var $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_TOMBSTONE = "messaging.kafka.tombstone";
var $29f26dae6e075eca$var$TMP_RPC_SYSTEM = "rpc.system";
var $29f26dae6e075eca$var$TMP_RPC_SERVICE = "rpc.service";
var $29f26dae6e075eca$var$TMP_RPC_METHOD = "rpc.method";
var $29f26dae6e075eca$var$TMP_RPC_GRPC_STATUS_CODE = "rpc.grpc.status_code";
var $29f26dae6e075eca$var$TMP_RPC_JSONRPC_VERSION = "rpc.jsonrpc.version";
var $29f26dae6e075eca$var$TMP_RPC_JSONRPC_REQUEST_ID = "rpc.jsonrpc.request_id";
var $29f26dae6e075eca$var$TMP_RPC_JSONRPC_ERROR_CODE = "rpc.jsonrpc.error_code";
var $29f26dae6e075eca$var$TMP_RPC_JSONRPC_ERROR_MESSAGE = "rpc.jsonrpc.error_message";
var $29f26dae6e075eca$var$TMP_MESSAGE_TYPE = "message.type";
var $29f26dae6e075eca$var$TMP_MESSAGE_ID = "message.id";
var $29f26dae6e075eca$var$TMP_MESSAGE_COMPRESSED_SIZE = "message.compressed_size";
var $29f26dae6e075eca$var$TMP_MESSAGE_UNCOMPRESSED_SIZE = "message.uncompressed_size";
var $29f26dae6e075eca$export$170bb395abfdb74 = $29f26dae6e075eca$var$TMP_AWS_LAMBDA_INVOKED_ARN;
var $29f26dae6e075eca$export$4d8f9683caa766fd = $29f26dae6e075eca$var$TMP_DB_SYSTEM;
var $29f26dae6e075eca$export$d367aaf68e61a0d5 = $29f26dae6e075eca$var$TMP_DB_CONNECTION_STRING;
var $29f26dae6e075eca$export$310240ea93b3fe22 = $29f26dae6e075eca$var$TMP_DB_USER;
var $29f26dae6e075eca$export$aa8b483f52799ba9 = $29f26dae6e075eca$var$TMP_DB_JDBC_DRIVER_CLASSNAME;
var $29f26dae6e075eca$export$d1ee0266d0ce708f = $29f26dae6e075eca$var$TMP_DB_NAME;
var $29f26dae6e075eca$export$ce244300665216c6 = $29f26dae6e075eca$var$TMP_DB_STATEMENT;
var $29f26dae6e075eca$export$dfb6a782675c717b = $29f26dae6e075eca$var$TMP_DB_OPERATION;
var $29f26dae6e075eca$export$ce5040faeb6d8f08 = $29f26dae6e075eca$var$TMP_DB_MSSQL_INSTANCE_NAME;
var $29f26dae6e075eca$export$e241e7101e6d4783 = $29f26dae6e075eca$var$TMP_DB_CASSANDRA_KEYSPACE;
var $29f26dae6e075eca$export$8823a63ac409681b = $29f26dae6e075eca$var$TMP_DB_CASSANDRA_PAGE_SIZE;
var $29f26dae6e075eca$export$b838c3d1859a7260 = $29f26dae6e075eca$var$TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;
var $29f26dae6e075eca$export$3f3068d83ae4cca5 = $29f26dae6e075eca$var$TMP_DB_CASSANDRA_TABLE;
var $29f26dae6e075eca$export$17334025dcb96205 = $29f26dae6e075eca$var$TMP_DB_CASSANDRA_IDEMPOTENCE;
var $29f26dae6e075eca$export$a63f22381e3297f2 = $29f26dae6e075eca$var$TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;
var $29f26dae6e075eca$export$e06ccece5268ed3 = $29f26dae6e075eca$var$TMP_DB_CASSANDRA_COORDINATOR_ID;
var $29f26dae6e075eca$export$ab77f08d0cc7144 = $29f26dae6e075eca$var$TMP_DB_CASSANDRA_COORDINATOR_DC;
var $29f26dae6e075eca$export$f83bf50700108cdb = $29f26dae6e075eca$var$TMP_DB_HBASE_NAMESPACE;
var $29f26dae6e075eca$export$f9c9b189f60bce02 = $29f26dae6e075eca$var$TMP_DB_REDIS_DATABASE_INDEX;
var $29f26dae6e075eca$export$b73e684c351bf304 = $29f26dae6e075eca$var$TMP_DB_MONGODB_COLLECTION;
var $29f26dae6e075eca$export$5b02e077c84b0dc7 = $29f26dae6e075eca$var$TMP_DB_SQL_TABLE;
var $29f26dae6e075eca$export$ecc84ea0f5a24384 = $29f26dae6e075eca$var$TMP_EXCEPTION_TYPE;
var $29f26dae6e075eca$export$ff69507dfa9dcf0c = $29f26dae6e075eca$var$TMP_EXCEPTION_MESSAGE;
var $29f26dae6e075eca$export$d9432f0c350b687d = $29f26dae6e075eca$var$TMP_EXCEPTION_STACKTRACE;
var $29f26dae6e075eca$export$4d3c212dd7c75f9d = $29f26dae6e075eca$var$TMP_EXCEPTION_ESCAPED;
var $29f26dae6e075eca$export$7e853a3dbd95b3a2 = $29f26dae6e075eca$var$TMP_FAAS_TRIGGER;
var $29f26dae6e075eca$export$68a5b08142e33c1d = $29f26dae6e075eca$var$TMP_FAAS_EXECUTION;
var $29f26dae6e075eca$export$f4b6288b42b8d4f8 = $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_COLLECTION;
var $29f26dae6e075eca$export$7e6d28b35ab8e751 = $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_OPERATION;
var $29f26dae6e075eca$export$b36094664197ebd9 = $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_TIME;
var $29f26dae6e075eca$export$2401d669e1b7f304 = $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_NAME;
var $29f26dae6e075eca$export$4630b1edb758007c = $29f26dae6e075eca$var$TMP_FAAS_TIME;
var $29f26dae6e075eca$export$4358b4189d5aa75e = $29f26dae6e075eca$var$TMP_FAAS_CRON;
var $29f26dae6e075eca$export$18a88fa49bf141a8 = $29f26dae6e075eca$var$TMP_FAAS_COLDSTART;
var $29f26dae6e075eca$export$ba620de28d483834 = $29f26dae6e075eca$var$TMP_FAAS_INVOKED_NAME;
var $29f26dae6e075eca$export$1ac1158b40ce77df = $29f26dae6e075eca$var$TMP_FAAS_INVOKED_PROVIDER;
var $29f26dae6e075eca$export$e8b3f54186b03f93 = $29f26dae6e075eca$var$TMP_FAAS_INVOKED_REGION;
var $29f26dae6e075eca$export$958ce88767ff5cae = $29f26dae6e075eca$var$TMP_NET_TRANSPORT;
var $29f26dae6e075eca$export$5f5e19d7784bcab5 = $29f26dae6e075eca$var$TMP_NET_PEER_IP;
var $29f26dae6e075eca$export$83ab392b303d5cc4 = $29f26dae6e075eca$var$TMP_NET_PEER_PORT;
var $29f26dae6e075eca$export$869dc6e245da8a3c = $29f26dae6e075eca$var$TMP_NET_PEER_NAME;
var $29f26dae6e075eca$export$8363f5dd3626d1c7 = $29f26dae6e075eca$var$TMP_NET_HOST_IP;
var $29f26dae6e075eca$export$7c05177443136588 = $29f26dae6e075eca$var$TMP_NET_HOST_PORT;
var $29f26dae6e075eca$export$67ebd91e5927c9b6 = $29f26dae6e075eca$var$TMP_NET_HOST_NAME;
var $29f26dae6e075eca$export$b4399aff72c58221 = $29f26dae6e075eca$var$TMP_NET_HOST_CONNECTION_TYPE;
var $29f26dae6e075eca$export$29124138bf62c161 = $29f26dae6e075eca$var$TMP_NET_HOST_CONNECTION_SUBTYPE;
var $29f26dae6e075eca$export$a1a35234333f42fa = $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_NAME;
var $29f26dae6e075eca$export$593e7f806b5bd9d0 = $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_MCC;
var $29f26dae6e075eca$export$92c4882b0877ce0 = $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_MNC;
var $29f26dae6e075eca$export$7158946157fdda52 = $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_ICC;
var $29f26dae6e075eca$export$706484bff197aa2f = $29f26dae6e075eca$var$TMP_PEER_SERVICE;
var $29f26dae6e075eca$export$37fdcbb3cc34507a = $29f26dae6e075eca$var$TMP_ENDUSER_ID;
var $29f26dae6e075eca$export$7486a34c0c780913 = $29f26dae6e075eca$var$TMP_ENDUSER_ROLE;
var $29f26dae6e075eca$export$c531f20a7a107be = $29f26dae6e075eca$var$TMP_ENDUSER_SCOPE;
var $29f26dae6e075eca$export$96304c684b1fe5bd = $29f26dae6e075eca$var$TMP_THREAD_ID;
var $29f26dae6e075eca$export$b1c76a722c30a73e = $29f26dae6e075eca$var$TMP_THREAD_NAME;
var $29f26dae6e075eca$export$f5b0a970f81eb82 = $29f26dae6e075eca$var$TMP_CODE_FUNCTION;
var $29f26dae6e075eca$export$ebd9bc6b684ae79f = $29f26dae6e075eca$var$TMP_CODE_NAMESPACE;
var $29f26dae6e075eca$export$f5c7dbf024e089b1 = $29f26dae6e075eca$var$TMP_CODE_FILEPATH;
var $29f26dae6e075eca$export$9bc82da636767e36 = $29f26dae6e075eca$var$TMP_CODE_LINENO;
var $29f26dae6e075eca$export$5ec7d06d671a3fbe = $29f26dae6e075eca$var$TMP_HTTP_METHOD;
var $29f26dae6e075eca$export$2f4ef7e39c2be395 = $29f26dae6e075eca$var$TMP_HTTP_URL;
var $29f26dae6e075eca$export$5284fc3356124326 = $29f26dae6e075eca$var$TMP_HTTP_TARGET;
var $29f26dae6e075eca$export$547e24d3f59a53ea = $29f26dae6e075eca$var$TMP_HTTP_HOST;
var $29f26dae6e075eca$export$a2928efa45f0acf4 = $29f26dae6e075eca$var$TMP_HTTP_SCHEME;
var $29f26dae6e075eca$export$d381c7525d715413 = $29f26dae6e075eca$var$TMP_HTTP_STATUS_CODE;
var $29f26dae6e075eca$export$1e443919b8f6a42e = $29f26dae6e075eca$var$TMP_HTTP_FLAVOR;
var $29f26dae6e075eca$export$7472b18f42d2d02f = $29f26dae6e075eca$var$TMP_HTTP_USER_AGENT;
var $29f26dae6e075eca$export$616f2909238995e9 = $29f26dae6e075eca$var$TMP_HTTP_REQUEST_CONTENT_LENGTH;
var $29f26dae6e075eca$export$4352992cf528a286 = $29f26dae6e075eca$var$TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;
var $29f26dae6e075eca$export$58d4fbfe35e08be0 = $29f26dae6e075eca$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH;
var $29f26dae6e075eca$export$b9d3e41cd56c56cc = $29f26dae6e075eca$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;
var $29f26dae6e075eca$export$ae4c9cf5cd38f75e = $29f26dae6e075eca$var$TMP_HTTP_SERVER_NAME;
var $29f26dae6e075eca$export$391e30d1bcbfedd6 = $29f26dae6e075eca$var$TMP_HTTP_ROUTE;
var $29f26dae6e075eca$export$f21601c3f29048e9 = $29f26dae6e075eca$var$TMP_HTTP_CLIENT_IP;
var $29f26dae6e075eca$export$22c9c5cd37ccec8d = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TABLE_NAMES;
var $29f26dae6e075eca$export$636d932d69359471 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;
var $29f26dae6e075eca$export$79414a2a1b36e0e4 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;
var $29f26dae6e075eca$export$a17bc449a5f10183 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;
var $29f26dae6e075eca$export$6d8e225848319009 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;
var $29f26dae6e075eca$export$2daa7ca667f19522 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_CONSISTENT_READ;
var $29f26dae6e075eca$export$d04f1e16b6682958 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROJECTION;
var $29f26dae6e075eca$export$9017e26d3dee82a7 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_LIMIT;
var $29f26dae6e075eca$export$734476f2cddb4e = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;
var $29f26dae6e075eca$export$6ffa6129be32f13f = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_INDEX_NAME;
var $29f26dae6e075eca$export$e439ba599235e943 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SELECT;
var $29f26dae6e075eca$export$691e052bf6ec1b50 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;
var $29f26dae6e075eca$export$4a8114ba4973adf9 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;
var $29f26dae6e075eca$export$3d3dcdb04b37b602 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;
var $29f26dae6e075eca$export$a3ed03c10bfca049 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TABLE_COUNT;
var $29f26dae6e075eca$export$70f2263412a5d6f8 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SCAN_FORWARD;
var $29f26dae6e075eca$export$cc291bca867c839c = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SEGMENT;
var $29f26dae6e075eca$export$2bd41520dd577767 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;
var $29f26dae6e075eca$export$e3002f59defbb848 = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_COUNT;
var $29f26dae6e075eca$export$338ee58c976503fa = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SCANNED_COUNT;
var $29f26dae6e075eca$export$9ef2d520d3111ebb = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;
var $29f26dae6e075eca$export$50eb8413f579535b = $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;
var $29f26dae6e075eca$export$e907440d5c8aa7ea = $29f26dae6e075eca$var$TMP_MESSAGING_SYSTEM;
var $29f26dae6e075eca$export$331bf1abb96af02c = $29f26dae6e075eca$var$TMP_MESSAGING_DESTINATION;
var $29f26dae6e075eca$export$ca3944a0a0fdb278 = $29f26dae6e075eca$var$TMP_MESSAGING_DESTINATION_KIND;
var $29f26dae6e075eca$export$b1f595d071164a5c = $29f26dae6e075eca$var$TMP_MESSAGING_TEMP_DESTINATION;
var $29f26dae6e075eca$export$734e634f7ff28b65 = $29f26dae6e075eca$var$TMP_MESSAGING_PROTOCOL;
var $29f26dae6e075eca$export$62c96eec39d4f8fa = $29f26dae6e075eca$var$TMP_MESSAGING_PROTOCOL_VERSION;
var $29f26dae6e075eca$export$8185788dec47d17c = $29f26dae6e075eca$var$TMP_MESSAGING_URL;
var $29f26dae6e075eca$export$6465ca78c6aedebd = $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_ID;
var $29f26dae6e075eca$export$9e29dbd41c4d02d5 = $29f26dae6e075eca$var$TMP_MESSAGING_CONVERSATION_ID;
var $29f26dae6e075eca$export$ded3a3185a1522d5 = $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;
var $29f26dae6e075eca$export$c42edeca94088e4d = $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;
var $29f26dae6e075eca$export$b0a29003262c7994 = $29f26dae6e075eca$var$TMP_MESSAGING_OPERATION;
var $29f26dae6e075eca$export$283c55d09fbdb92c = $29f26dae6e075eca$var$TMP_MESSAGING_CONSUMER_ID;
var $29f26dae6e075eca$export$78385ca43d0e8556 = $29f26dae6e075eca$var$TMP_MESSAGING_RABBITMQ_ROUTING_KEY;
var $29f26dae6e075eca$export$b6969aab3cf94e74 = $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_MESSAGE_KEY;
var $29f26dae6e075eca$export$45eb738152aa5dd4 = $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_CONSUMER_GROUP;
var $29f26dae6e075eca$export$bc66f788b071fbad = $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_CLIENT_ID;
var $29f26dae6e075eca$export$ff4aad497ab5213e = $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_PARTITION;
var $29f26dae6e075eca$export$256d25d7635b3a79 = $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_TOMBSTONE;
var $29f26dae6e075eca$export$8b1a1f43d7106aea = $29f26dae6e075eca$var$TMP_RPC_SYSTEM;
var $29f26dae6e075eca$export$7eb60929eaa797de = $29f26dae6e075eca$var$TMP_RPC_SERVICE;
var $29f26dae6e075eca$export$c6d175d5e9b8105b = $29f26dae6e075eca$var$TMP_RPC_METHOD;
var $29f26dae6e075eca$export$ccc8405c8a911fb7 = $29f26dae6e075eca$var$TMP_RPC_GRPC_STATUS_CODE;
var $29f26dae6e075eca$export$ce0f2ec42ba79570 = $29f26dae6e075eca$var$TMP_RPC_JSONRPC_VERSION;
var $29f26dae6e075eca$export$2e981273bb2873ea = $29f26dae6e075eca$var$TMP_RPC_JSONRPC_REQUEST_ID;
var $29f26dae6e075eca$export$214058615970c3e4 = $29f26dae6e075eca$var$TMP_RPC_JSONRPC_ERROR_CODE;
var $29f26dae6e075eca$export$2ad4f2a86baa9b1e = $29f26dae6e075eca$var$TMP_RPC_JSONRPC_ERROR_MESSAGE;
var $29f26dae6e075eca$export$e6c57355a990f7ee = $29f26dae6e075eca$var$TMP_MESSAGE_TYPE;
var $29f26dae6e075eca$export$ba8e66ad5476d59f = $29f26dae6e075eca$var$TMP_MESSAGE_ID;
var $29f26dae6e075eca$export$16f3d59837418b1f = $29f26dae6e075eca$var$TMP_MESSAGE_COMPRESSED_SIZE;
var $29f26dae6e075eca$export$4b889081ab98b61 = $29f26dae6e075eca$var$TMP_MESSAGE_UNCOMPRESSED_SIZE;
var $29f26dae6e075eca$export$949e366c5c69d2e9 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_AWS_LAMBDA_INVOKED_ARN,
    $29f26dae6e075eca$var$TMP_DB_SYSTEM,
    $29f26dae6e075eca$var$TMP_DB_CONNECTION_STRING,
    $29f26dae6e075eca$var$TMP_DB_USER,
    $29f26dae6e075eca$var$TMP_DB_JDBC_DRIVER_CLASSNAME,
    $29f26dae6e075eca$var$TMP_DB_NAME,
    $29f26dae6e075eca$var$TMP_DB_STATEMENT,
    $29f26dae6e075eca$var$TMP_DB_OPERATION,
    $29f26dae6e075eca$var$TMP_DB_MSSQL_INSTANCE_NAME,
    $29f26dae6e075eca$var$TMP_DB_CASSANDRA_KEYSPACE,
    $29f26dae6e075eca$var$TMP_DB_CASSANDRA_PAGE_SIZE,
    $29f26dae6e075eca$var$TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,
    $29f26dae6e075eca$var$TMP_DB_CASSANDRA_TABLE,
    $29f26dae6e075eca$var$TMP_DB_CASSANDRA_IDEMPOTENCE,
    $29f26dae6e075eca$var$TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,
    $29f26dae6e075eca$var$TMP_DB_CASSANDRA_COORDINATOR_ID,
    $29f26dae6e075eca$var$TMP_DB_CASSANDRA_COORDINATOR_DC,
    $29f26dae6e075eca$var$TMP_DB_HBASE_NAMESPACE,
    $29f26dae6e075eca$var$TMP_DB_REDIS_DATABASE_INDEX,
    $29f26dae6e075eca$var$TMP_DB_MONGODB_COLLECTION,
    $29f26dae6e075eca$var$TMP_DB_SQL_TABLE,
    $29f26dae6e075eca$var$TMP_EXCEPTION_TYPE,
    $29f26dae6e075eca$var$TMP_EXCEPTION_MESSAGE,
    $29f26dae6e075eca$var$TMP_EXCEPTION_STACKTRACE,
    $29f26dae6e075eca$var$TMP_EXCEPTION_ESCAPED,
    $29f26dae6e075eca$var$TMP_FAAS_TRIGGER,
    $29f26dae6e075eca$var$TMP_FAAS_EXECUTION,
    $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_COLLECTION,
    $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_OPERATION,
    $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_TIME,
    $29f26dae6e075eca$var$TMP_FAAS_DOCUMENT_NAME,
    $29f26dae6e075eca$var$TMP_FAAS_TIME,
    $29f26dae6e075eca$var$TMP_FAAS_CRON,
    $29f26dae6e075eca$var$TMP_FAAS_COLDSTART,
    $29f26dae6e075eca$var$TMP_FAAS_INVOKED_NAME,
    $29f26dae6e075eca$var$TMP_FAAS_INVOKED_PROVIDER,
    $29f26dae6e075eca$var$TMP_FAAS_INVOKED_REGION,
    $29f26dae6e075eca$var$TMP_NET_TRANSPORT,
    $29f26dae6e075eca$var$TMP_NET_PEER_IP,
    $29f26dae6e075eca$var$TMP_NET_PEER_PORT,
    $29f26dae6e075eca$var$TMP_NET_PEER_NAME,
    $29f26dae6e075eca$var$TMP_NET_HOST_IP,
    $29f26dae6e075eca$var$TMP_NET_HOST_PORT,
    $29f26dae6e075eca$var$TMP_NET_HOST_NAME,
    $29f26dae6e075eca$var$TMP_NET_HOST_CONNECTION_TYPE,
    $29f26dae6e075eca$var$TMP_NET_HOST_CONNECTION_SUBTYPE,
    $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_NAME,
    $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_MCC,
    $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_MNC,
    $29f26dae6e075eca$var$TMP_NET_HOST_CARRIER_ICC,
    $29f26dae6e075eca$var$TMP_PEER_SERVICE,
    $29f26dae6e075eca$var$TMP_ENDUSER_ID,
    $29f26dae6e075eca$var$TMP_ENDUSER_ROLE,
    $29f26dae6e075eca$var$TMP_ENDUSER_SCOPE,
    $29f26dae6e075eca$var$TMP_THREAD_ID,
    $29f26dae6e075eca$var$TMP_THREAD_NAME,
    $29f26dae6e075eca$var$TMP_CODE_FUNCTION,
    $29f26dae6e075eca$var$TMP_CODE_NAMESPACE,
    $29f26dae6e075eca$var$TMP_CODE_FILEPATH,
    $29f26dae6e075eca$var$TMP_CODE_LINENO,
    $29f26dae6e075eca$var$TMP_HTTP_METHOD,
    $29f26dae6e075eca$var$TMP_HTTP_URL,
    $29f26dae6e075eca$var$TMP_HTTP_TARGET,
    $29f26dae6e075eca$var$TMP_HTTP_HOST,
    $29f26dae6e075eca$var$TMP_HTTP_SCHEME,
    $29f26dae6e075eca$var$TMP_HTTP_STATUS_CODE,
    $29f26dae6e075eca$var$TMP_HTTP_FLAVOR,
    $29f26dae6e075eca$var$TMP_HTTP_USER_AGENT,
    $29f26dae6e075eca$var$TMP_HTTP_REQUEST_CONTENT_LENGTH,
    $29f26dae6e075eca$var$TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,
    $29f26dae6e075eca$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH,
    $29f26dae6e075eca$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,
    $29f26dae6e075eca$var$TMP_HTTP_SERVER_NAME,
    $29f26dae6e075eca$var$TMP_HTTP_ROUTE,
    $29f26dae6e075eca$var$TMP_HTTP_CLIENT_IP,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TABLE_NAMES,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_CONSISTENT_READ,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_PROJECTION,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_LIMIT,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_INDEX_NAME,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SELECT,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TABLE_COUNT,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SCAN_FORWARD,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SEGMENT,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_COUNT,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_SCANNED_COUNT,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,
    $29f26dae6e075eca$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,
    $29f26dae6e075eca$var$TMP_MESSAGING_SYSTEM,
    $29f26dae6e075eca$var$TMP_MESSAGING_DESTINATION,
    $29f26dae6e075eca$var$TMP_MESSAGING_DESTINATION_KIND,
    $29f26dae6e075eca$var$TMP_MESSAGING_TEMP_DESTINATION,
    $29f26dae6e075eca$var$TMP_MESSAGING_PROTOCOL,
    $29f26dae6e075eca$var$TMP_MESSAGING_PROTOCOL_VERSION,
    $29f26dae6e075eca$var$TMP_MESSAGING_URL,
    $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_ID,
    $29f26dae6e075eca$var$TMP_MESSAGING_CONVERSATION_ID,
    $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,
    $29f26dae6e075eca$var$TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,
    $29f26dae6e075eca$var$TMP_MESSAGING_OPERATION,
    $29f26dae6e075eca$var$TMP_MESSAGING_CONSUMER_ID,
    $29f26dae6e075eca$var$TMP_MESSAGING_RABBITMQ_ROUTING_KEY,
    $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_MESSAGE_KEY,
    $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_CONSUMER_GROUP,
    $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_CLIENT_ID,
    $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_PARTITION,
    $29f26dae6e075eca$var$TMP_MESSAGING_KAFKA_TOMBSTONE,
    $29f26dae6e075eca$var$TMP_RPC_SYSTEM,
    $29f26dae6e075eca$var$TMP_RPC_SERVICE,
    $29f26dae6e075eca$var$TMP_RPC_METHOD,
    $29f26dae6e075eca$var$TMP_RPC_GRPC_STATUS_CODE,
    $29f26dae6e075eca$var$TMP_RPC_JSONRPC_VERSION,
    $29f26dae6e075eca$var$TMP_RPC_JSONRPC_REQUEST_ID,
    $29f26dae6e075eca$var$TMP_RPC_JSONRPC_ERROR_CODE,
    $29f26dae6e075eca$var$TMP_RPC_JSONRPC_ERROR_MESSAGE,
    $29f26dae6e075eca$var$TMP_MESSAGE_TYPE,
    $29f26dae6e075eca$var$TMP_MESSAGE_ID,
    $29f26dae6e075eca$var$TMP_MESSAGE_COMPRESSED_SIZE,
    $29f26dae6e075eca$var$TMP_MESSAGE_UNCOMPRESSED_SIZE
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for DbSystemValues enum definition
 *
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_OTHER_SQL = "other_sql";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MSSQL = "mssql";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MYSQL = "mysql";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ORACLE = "oracle";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DB2 = "db2";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_POSTGRESQL = "postgresql";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_REDSHIFT = "redshift";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HIVE = "hive";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CLOUDSCAPE = "cloudscape";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HSQLDB = "hsqldb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_PROGRESS = "progress";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MAXDB = "maxdb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HANADB = "hanadb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INGRES = "ingres";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FIRSTSQL = "firstsql";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_EDB = "edb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CACHE = "cache";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ADABAS = "adabas";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FIREBIRD = "firebird";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DERBY = "derby";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FILEMAKER = "filemaker";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INFORMIX = "informix";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INSTANTDB = "instantdb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INTERBASE = "interbase";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MARIADB = "mariadb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_NETEZZA = "netezza";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_PERVASIVE = "pervasive";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_POINTBASE = "pointbase";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_SQLITE = "sqlite";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_SYBASE = "sybase";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_TERADATA = "teradata";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_VERTICA = "vertica";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_H2 = "h2";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COLDFUSION = "coldfusion";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CASSANDRA = "cassandra";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HBASE = "hbase";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MONGODB = "mongodb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_REDIS = "redis";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COUCHBASE = "couchbase";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COUCHDB = "couchdb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COSMOSDB = "cosmosdb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DYNAMODB = "dynamodb";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_NEO4J = "neo4j";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_GEODE = "geode";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ELASTICSEARCH = "elasticsearch";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MEMCACHED = "memcached";
var $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COCKROACHDB = "cockroachdb";
var $29f26dae6e075eca$export$a8dac6c506518069 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_OTHER_SQL;
var $29f26dae6e075eca$export$ea0447329a58abf0 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MSSQL;
var $29f26dae6e075eca$export$f10ddff4d378463e = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MYSQL;
var $29f26dae6e075eca$export$1187a6d6f356ed08 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ORACLE;
var $29f26dae6e075eca$export$c99652dcdf96b994 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DB2;
var $29f26dae6e075eca$export$fa83a16930a97d3b = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_POSTGRESQL;
var $29f26dae6e075eca$export$502f4a0041906d71 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_REDSHIFT;
var $29f26dae6e075eca$export$9ca2599ef62580aa = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HIVE;
var $29f26dae6e075eca$export$910728553bdc4f2 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CLOUDSCAPE;
var $29f26dae6e075eca$export$927252a026981dbc = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HSQLDB;
var $29f26dae6e075eca$export$1d4496dd2fb6e5bf = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_PROGRESS;
var $29f26dae6e075eca$export$eeac513ec469c0cd = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MAXDB;
var $29f26dae6e075eca$export$accdcd0fb0e8e3f2 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HANADB;
var $29f26dae6e075eca$export$3dcc190bf239314c = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INGRES;
var $29f26dae6e075eca$export$ff4c8094bbcf5fa7 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FIRSTSQL;
var $29f26dae6e075eca$export$3277e5141d071eb2 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_EDB;
var $29f26dae6e075eca$export$4a79cae41e08a0dd = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CACHE;
var $29f26dae6e075eca$export$cf3b85811d34c73b = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ADABAS;
var $29f26dae6e075eca$export$48eca9ca7c84a995 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FIREBIRD;
var $29f26dae6e075eca$export$bc5d7654a3e6dc01 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DERBY;
var $29f26dae6e075eca$export$422940b84b884f99 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FILEMAKER;
var $29f26dae6e075eca$export$a49658a36841921 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INFORMIX;
var $29f26dae6e075eca$export$dd1bda064bc12f55 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INSTANTDB;
var $29f26dae6e075eca$export$3845f6f803a923b1 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INTERBASE;
var $29f26dae6e075eca$export$1b74fece6a0567e8 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MARIADB;
var $29f26dae6e075eca$export$8fc04abe03bce8d5 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_NETEZZA;
var $29f26dae6e075eca$export$f9406b4f00b760b4 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_PERVASIVE;
var $29f26dae6e075eca$export$5bc787da6daf8e9c = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_POINTBASE;
var $29f26dae6e075eca$export$92e0362f5610565 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_SQLITE;
var $29f26dae6e075eca$export$ec03fbd64421b165 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_SYBASE;
var $29f26dae6e075eca$export$486b763280f7312f = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_TERADATA;
var $29f26dae6e075eca$export$424b3c529411045a = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_VERTICA;
var $29f26dae6e075eca$export$5b4c7807bd4e54d0 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_H2;
var $29f26dae6e075eca$export$998c3a6fdfbcf7df = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COLDFUSION;
var $29f26dae6e075eca$export$dc18027519a667a3 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CASSANDRA;
var $29f26dae6e075eca$export$a3cbb4bc103ae284 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HBASE;
var $29f26dae6e075eca$export$b1615e3bbcf0dea5 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MONGODB;
var $29f26dae6e075eca$export$e236e209844f1272 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_REDIS;
var $29f26dae6e075eca$export$a3861a07874f1889 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COUCHBASE;
var $29f26dae6e075eca$export$f84afd1ccf7f622f = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COUCHDB;
var $29f26dae6e075eca$export$408510df30ac38f0 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COSMOSDB;
var $29f26dae6e075eca$export$f704654eab77c7c7 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DYNAMODB;
var $29f26dae6e075eca$export$5eea4c4dfe97cf90 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_NEO4J;
var $29f26dae6e075eca$export$f6740c7ce8d8a59 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_GEODE;
var $29f26dae6e075eca$export$25d0355c3ecc82d5 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ELASTICSEARCH;
var $29f26dae6e075eca$export$3566ede46e0a8a41 = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MEMCACHED;
var $29f26dae6e075eca$export$2844c6dfa3d1660a = $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COCKROACHDB;
var $29f26dae6e075eca$export$53ce5c6571db6866 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_OTHER_SQL,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MSSQL,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MYSQL,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ORACLE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DB2,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_POSTGRESQL,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_REDSHIFT,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HIVE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CLOUDSCAPE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HSQLDB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_PROGRESS,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MAXDB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HANADB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INGRES,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FIRSTSQL,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_EDB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CACHE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ADABAS,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FIREBIRD,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DERBY,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_FILEMAKER,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INFORMIX,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INSTANTDB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_INTERBASE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MARIADB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_NETEZZA,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_PERVASIVE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_POINTBASE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_SQLITE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_SYBASE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_TERADATA,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_VERTICA,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_H2,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COLDFUSION,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_CASSANDRA,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_HBASE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MONGODB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_REDIS,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COUCHBASE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COUCHDB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COSMOSDB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_DYNAMODB,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_NEO4J,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_GEODE,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_ELASTICSEARCH,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_MEMCACHED,
    $29f26dae6e075eca$var$TMP_DBSYSTEMVALUES_COCKROACHDB
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for DbCassandraConsistencyLevelValues enum definition
 *
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = "all";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = "each_quorum";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = "quorum";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = "local_quorum";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = "one";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = "two";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = "three";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = "local_one";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = "any";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = "serial";
var $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = "local_serial";
var $29f26dae6e075eca$export$8c965dbb4c30de17 = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;
var $29f26dae6e075eca$export$28269849572f223a = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;
var $29f26dae6e075eca$export$c31be6925d18faf4 = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;
var $29f26dae6e075eca$export$dd2d046c43b425dc = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;
var $29f26dae6e075eca$export$d567e6085f609657 = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;
var $29f26dae6e075eca$export$2638f2ef2b3637ea = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;
var $29f26dae6e075eca$export$444dff27642c23a3 = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;
var $29f26dae6e075eca$export$be0e7a9b9b7460eb = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;
var $29f26dae6e075eca$export$9cda430306f12b08 = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;
var $29f26dae6e075eca$export$79a04d8aacdacbe9 = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;
var $29f26dae6e075eca$export$42bf18043dacb777 = $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;
var $29f26dae6e075eca$export$a6eeaa6fe6488373 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,
    $29f26dae6e075eca$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasTriggerValues enum definition
 *
 * Type of the trigger on which the function is executed.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_DATASOURCE = "datasource";
var $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_HTTP = "http";
var $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_PUBSUB = "pubsub";
var $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_TIMER = "timer";
var $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_OTHER = "other";
var $29f26dae6e075eca$export$a116a6c98ad82a77 = $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_DATASOURCE;
var $29f26dae6e075eca$export$1b8130a1d4406030 = $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_HTTP;
var $29f26dae6e075eca$export$2c3c25968f77e7b3 = $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_PUBSUB;
var $29f26dae6e075eca$export$f1adafe5047573a = $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_TIMER;
var $29f26dae6e075eca$export$2aa5343c84c7d0a6 = $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_OTHER;
var $29f26dae6e075eca$export$8bd13b593ef4858d = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_DATASOURCE,
    $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_HTTP,
    $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_PUBSUB,
    $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_TIMER,
    $29f26dae6e075eca$var$TMP_FAASTRIGGERVALUES_OTHER
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasDocumentOperationValues enum definition
 *
 * Describes the type of the operation that was performed on the data.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = "insert";
var $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = "edit";
var $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = "delete";
var $29f26dae6e075eca$export$58594a32d0721c01 = $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;
var $29f26dae6e075eca$export$fb5981e11be92c91 = $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;
var $29f26dae6e075eca$export$8617289d67ca4e43 = $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;
var $29f26dae6e075eca$export$d6463783e5bb27f9 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,
    $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,
    $29f26dae6e075eca$var$TMP_FAASDOCUMENTOPERATIONVALUES_DELETE
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasInvokedProviderValues enum definition
 *
 * The cloud provider of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = "alibaba_cloud";
var $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_AWS = "aws";
var $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_AZURE = "azure";
var $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_GCP = "gcp";
var $29f26dae6e075eca$export$a7a256059bf89bd1 = $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;
var $29f26dae6e075eca$export$8716f61e9f3c2aeb = $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_AWS;
var $29f26dae6e075eca$export$ec924dafe3d951e3 = $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_AZURE;
var $29f26dae6e075eca$export$40370ddcd5c5f6d7 = $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_GCP;
var $29f26dae6e075eca$export$668b545a1de0448 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,
    $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_AWS,
    $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_AZURE,
    $29f26dae6e075eca$var$TMP_FAASINVOKEDPROVIDERVALUES_GCP
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetTransportValues enum definition
 *
 * Transport protocol used. See note below.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP_TCP = "ip_tcp";
var $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP_UDP = "ip_udp";
var $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP = "ip";
var $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_UNIX = "unix";
var $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_PIPE = "pipe";
var $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_INPROC = "inproc";
var $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_OTHER = "other";
var $29f26dae6e075eca$export$98ad64057f1fab9f = $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP_TCP;
var $29f26dae6e075eca$export$efc9b6ce6290a881 = $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP_UDP;
var $29f26dae6e075eca$export$f3aeea475f2d61eb = $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP;
var $29f26dae6e075eca$export$2ff43587ce3a6428 = $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_UNIX;
var $29f26dae6e075eca$export$8a59379768b7dcc2 = $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_PIPE;
var $29f26dae6e075eca$export$24d541ca01c48083 = $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_INPROC;
var $29f26dae6e075eca$export$61986d2ea3f68e4 = $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_OTHER;
var $29f26dae6e075eca$export$3818cf83a3542239 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP_TCP,
    $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP_UDP,
    $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_IP,
    $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_UNIX,
    $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_PIPE,
    $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_INPROC,
    $29f26dae6e075eca$var$TMP_NETTRANSPORTVALUES_OTHER
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetHostConnectionTypeValues enum definition
 *
 * The internet connection type currently being used by the host.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = "wifi";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = "wired";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = "cell";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = "unavailable";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = "unknown";
var $29f26dae6e075eca$export$9f02ba1730e68d64 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;
var $29f26dae6e075eca$export$ff976cfa645183ea = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;
var $29f26dae6e075eca$export$9dac5d5db0d7302d = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;
var $29f26dae6e075eca$export$856320690b0a4ede = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;
var $29f26dae6e075eca$export$b93b5033f8372e2b = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;
var $29f26dae6e075eca$export$a5c9a789b3c34827 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetHostConnectionSubtypeValues enum definition
 *
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = "gprs";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = "edge";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = "umts";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = "cdma";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = "evdo_0";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = "evdo_a";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = "cdma2000_1xrtt";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = "hsdpa";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = "hsupa";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = "hspa";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = "iden";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = "evdo_b";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = "lte";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = "ehrpd";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = "hspap";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = "gsm";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = "td_scdma";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = "iwlan";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = "nr";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = "nrnsa";
var $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = "lte_ca";
var $29f26dae6e075eca$export$b3928d079bcf0650 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;
var $29f26dae6e075eca$export$869e5d9e2d7d058f = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;
var $29f26dae6e075eca$export$4fb8dba98d516457 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;
var $29f26dae6e075eca$export$4c80eef388ebaccf = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;
var $29f26dae6e075eca$export$fa867825f37e79db = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;
var $29f26dae6e075eca$export$27a67e3163ce1ca1 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;
var $29f26dae6e075eca$export$64eea596575c6ac7 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;
var $29f26dae6e075eca$export$ac76a80a244a93c4 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;
var $29f26dae6e075eca$export$1f6c75de7c7b16c8 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;
var $29f26dae6e075eca$export$546b89c4781a174b = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;
var $29f26dae6e075eca$export$76ada84046ded2cf = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;
var $29f26dae6e075eca$export$cbc44b2ef04c23f2 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;
var $29f26dae6e075eca$export$7df810136272d3ca = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;
var $29f26dae6e075eca$export$6d0261a99bb34b75 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;
var $29f26dae6e075eca$export$f5609166f18e0da4 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;
var $29f26dae6e075eca$export$bb1d1d2dc1514ff9 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;
var $29f26dae6e075eca$export$f39e3589dec1b486 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;
var $29f26dae6e075eca$export$2ea90d5cadafeb66 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;
var $29f26dae6e075eca$export$dacf20f714c7dfe3 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;
var $29f26dae6e075eca$export$3057d75e98c27a82 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;
var $29f26dae6e075eca$export$ac7da250598a79b7 = $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;
var $29f26dae6e075eca$export$2f6476d8343c332 = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,
    $29f26dae6e075eca$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for HttpFlavorValues enum definition
 *
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_1_0 = "1.0";
var $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_1_1 = "1.1";
var $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_2_0 = "2.0";
var $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_SPDY = "SPDY";
var $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_QUIC = "QUIC";
var $29f26dae6e075eca$export$a5eaf604e08c3278 = $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_1_0;
var $29f26dae6e075eca$export$90c81a0909f2ae50 = $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_1_1;
var $29f26dae6e075eca$export$76fedb424c637ab1 = $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_2_0;
var $29f26dae6e075eca$export$64a9fa17294d693a = $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_SPDY;
var $29f26dae6e075eca$export$71f9f90e022dd018 = $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_QUIC;
var $29f26dae6e075eca$export$98fa65d23b3ad768 = {
    HTTP_1_0: $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_1_0,
    HTTP_1_1: $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_1_1,
    HTTP_2_0: $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_HTTP_2_0,
    SPDY: $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_SPDY,
    QUIC: $29f26dae6e075eca$var$TMP_HTTPFLAVORVALUES_QUIC
};
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessagingDestinationKindValues enum definition
 *
 * The kind of message destination.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = "queue";
var $29f26dae6e075eca$var$TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = "topic";
var $29f26dae6e075eca$export$3c00656cec2b971b = $29f26dae6e075eca$var$TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;
var $29f26dae6e075eca$export$5b3434288d57e9db = $29f26dae6e075eca$var$TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;
var $29f26dae6e075eca$export$c97cf0959c06f2eb = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,
    $29f26dae6e075eca$var$TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessagingOperationValues enum definition
 *
 * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_MESSAGINGOPERATIONVALUES_RECEIVE = "receive";
var $29f26dae6e075eca$var$TMP_MESSAGINGOPERATIONVALUES_PROCESS = "process";
var $29f26dae6e075eca$export$84220b734749f5b0 = $29f26dae6e075eca$var$TMP_MESSAGINGOPERATIONVALUES_RECEIVE;
var $29f26dae6e075eca$export$e4e81e41cac54813 = $29f26dae6e075eca$var$TMP_MESSAGINGOPERATIONVALUES_PROCESS;
var $29f26dae6e075eca$export$4a89c511599cd2ec = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_MESSAGINGOPERATIONVALUES_RECEIVE,
    $29f26dae6e075eca$var$TMP_MESSAGINGOPERATIONVALUES_PROCESS
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for RpcGrpcStatusCodeValues enum definition
 *
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;
var $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;
var $29f26dae6e075eca$export$949d8f2733439fe0 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_OK;
var $29f26dae6e075eca$export$3ab4e217bae3a065 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;
var $29f26dae6e075eca$export$82114f8ba92008f1 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;
var $29f26dae6e075eca$export$4747f09ec996ed1a = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;
var $29f26dae6e075eca$export$2f64e796efee7806 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;
var $29f26dae6e075eca$export$c2b894d36cd1d993 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;
var $29f26dae6e075eca$export$e675f9346907cdbf = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;
var $29f26dae6e075eca$export$ee7173f54f1f7e52 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;
var $29f26dae6e075eca$export$a2e4b937aa6d8799 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;
var $29f26dae6e075eca$export$ef9ed8d6d4e5cd73 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;
var $29f26dae6e075eca$export$5186c1c5a9145ea6 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;
var $29f26dae6e075eca$export$e67583738364c597 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;
var $29f26dae6e075eca$export$90f86b1e23bb678f = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;
var $29f26dae6e075eca$export$133efbe81a3e3b7a = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;
var $29f26dae6e075eca$export$8d87e3aaaab1d8c1 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;
var $29f26dae6e075eca$export$2acca698ff2f1632 = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;
var $29f26dae6e075eca$export$fc7c44549e950bf = $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;
var $29f26dae6e075eca$export$759a06c32b696c70 = {
    OK: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_OK,
    CANCELLED: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,
    UNKNOWN: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,
    INVALID_ARGUMENT: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,
    DEADLINE_EXCEEDED: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,
    NOT_FOUND: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,
    ALREADY_EXISTS: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,
    PERMISSION_DENIED: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,
    RESOURCE_EXHAUSTED: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,
    FAILED_PRECONDITION: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,
    ABORTED: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,
    OUT_OF_RANGE: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,
    UNIMPLEMENTED: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,
    INTERNAL: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,
    UNAVAILABLE: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,
    DATA_LOSS: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,
    UNAUTHENTICATED: $29f26dae6e075eca$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED
};
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessageTypeValues enum definition
 *
 * Whether this is a received or sent message.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $29f26dae6e075eca$var$TMP_MESSAGETYPEVALUES_SENT = "SENT";
var $29f26dae6e075eca$var$TMP_MESSAGETYPEVALUES_RECEIVED = "RECEIVED";
var $29f26dae6e075eca$export$10fb24096e4ea8a3 = $29f26dae6e075eca$var$TMP_MESSAGETYPEVALUES_SENT;
var $29f26dae6e075eca$export$e520006d57a4745f = $29f26dae6e075eca$var$TMP_MESSAGETYPEVALUES_RECEIVED;
var $29f26dae6e075eca$export$c83b17f5976c727c = /*#__PURE__*/ (0, $0c3d162a8cf71ab8$export$8796db7ca257d576)([
    $29f26dae6e075eca$var$TMP_MESSAGETYPEVALUES_SENT,
    $29f26dae6e075eca$var$TMP_MESSAGETYPEVALUES_RECEIVED
]);


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Event name definitions
var $5ff1d0471318721d$export$a0fff09a5370d06f = "exception";


var $62fa49f17a71d6a0$var$__assign = undefined && undefined.__assign || function() {
    $62fa49f17a71d6a0$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $62fa49f17a71d6a0$var$__assign.apply(this, arguments);
};
var $62fa49f17a71d6a0$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $62fa49f17a71d6a0$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $62fa49f17a71d6a0$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * This class represents a span.
 */ var $62fa49f17a71d6a0$export$5f1714a13ed34c01 = /** @class */ function() {
    /**
     * Constructs a new Span instance.
     *
     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.
     * */ function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock, attributes) {
        if (links === void 0) links = [];
        this.attributes = {};
        this.links = [];
        this.events = [];
        this._droppedAttributesCount = 0;
        this._droppedEventsCount = 0;
        this._droppedLinksCount = 0;
        this.status = {
            code: (0, $4a0044d2fb535a6a$export$1e28dd9b5d01db83).UNSET
        };
        this.endTime = [
            0,
            0
        ];
        this._ended = false;
        this._duration = [
            -1,
            -1
        ];
        this.name = spanName;
        this._spanContext = spanContext;
        this.parentSpanId = parentSpanId;
        this.kind = kind;
        this.links = links;
        var now = Date.now();
        this._performanceStartTime = (0, $fb570aa63c9bb090$export$b22daef4119238cd).now();
        this._performanceOffset = now - (this._performanceStartTime + (0, $d06339726fb5d441$export$e752b05e58096a2f)());
        this._startTimeProvided = startTime != null;
        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);
        this.resource = parentTracer.resource;
        this.instrumentationLibrary = parentTracer.instrumentationLibrary;
        this._spanLimits = parentTracer.getSpanLimits();
        this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;
        if (attributes != null) this.setAttributes(attributes);
        this._spanProcessor = parentTracer.getActiveSpanProcessor();
        this._spanProcessor.onStart(this, context);
    }
    Span.prototype.spanContext = function() {
        return this._spanContext;
    };
    Span.prototype.setAttribute = function(key, value) {
        if (value == null || this._isSpanEnded()) return this;
        if (key.length === 0) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Invalid attribute key: " + key);
            return this;
        }
        if (!(0, $b48e61364f31e119$export$1daad3d2aacf48c5)(value)) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Invalid attribute value set for key: " + key);
            return this;
        }
        if (Object.keys(this.attributes).length >= this._spanLimits.attributeCountLimit && !Object.prototype.hasOwnProperty.call(this.attributes, key)) {
            this._droppedAttributesCount++;
            return this;
        }
        this.attributes[key] = this._truncateToSize(value);
        return this;
    };
    Span.prototype.setAttributes = function(attributes) {
        var e_1, _a;
        try {
            for(var _b = $62fa49f17a71d6a0$var$__values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()){
                var _d = $62fa49f17a71d6a0$var$__read(_c.value, 2), k = _d[0], v = _d[1];
                this.setAttribute(k, v);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return this;
    };
    /**
     *
     * @param name Span Name
     * @param [attributesOrStartTime] Span attributes or start time
     *     if type is {@type TimeInput} and 3rd param is undefined
     * @param [timeStamp] Specified time stamp for the event
     */ Span.prototype.addEvent = function(name, attributesOrStartTime, timeStamp) {
        if (this._isSpanEnded()) return this;
        if (this._spanLimits.eventCountLimit === 0) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("No events allowed.");
            this._droppedEventsCount++;
            return this;
        }
        if (this.events.length >= this._spanLimits.eventCountLimit) {
            if (this._droppedEventsCount === 0) (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("Dropping extra events.");
            this.events.shift();
            this._droppedEventsCount++;
        }
        if ((0, $d06339726fb5d441$export$a5e58227c317ebb9)(attributesOrStartTime)) {
            if (!(0, $d06339726fb5d441$export$a5e58227c317ebb9)(timeStamp)) timeStamp = attributesOrStartTime;
            attributesOrStartTime = undefined;
        }
        var attributes = (0, $b48e61364f31e119$export$b0663eba150d60c9)(attributesOrStartTime);
        this.events.push({
            name: name,
            attributes: attributes,
            time: this._getTime(timeStamp),
            droppedAttributesCount: 0
        });
        return this;
    };
    Span.prototype.addLink = function(link) {
        this.links.push(link);
        return this;
    };
    Span.prototype.addLinks = function(links) {
        var _a;
        (_a = this.links).push.apply(_a, $62fa49f17a71d6a0$var$__spreadArray([], $62fa49f17a71d6a0$var$__read(links), false));
        return this;
    };
    Span.prototype.setStatus = function(status) {
        if (this._isSpanEnded()) return this;
        this.status = $62fa49f17a71d6a0$var$__assign({}, status);
        // When using try-catch, the caught "error" is of type `any`. When then assigning `any` to `status.message`,
        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()
        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or
        // undefined to avoid an incorrect type causing issues downstream.
        if (this.status.message != null && typeof status.message !== "string") {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Dropping invalid status.message of type '" + typeof status.message + "', expected 'string'");
            delete this.status.message;
        }
        return this;
    };
    Span.prototype.updateName = function(name) {
        if (this._isSpanEnded()) return this;
        this.name = name;
        return this;
    };
    Span.prototype.end = function(endTime) {
        if (this._isSpanEnded()) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error(this.name + " " + this._spanContext.traceId + "-" + this._spanContext.spanId + " - You can only call end() on a span once.");
            return;
        }
        this._ended = true;
        this.endTime = this._getTime(endTime);
        this._duration = (0, $d06339726fb5d441$export$b783ad6617389e3e)(this.startTime, this.endTime);
        if (this._duration[0] < 0) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.", this.startTime, this.endTime);
            this.endTime = this.startTime.slice();
            this._duration = [
                0,
                0
            ];
        }
        if (this._droppedEventsCount > 0) (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Dropped " + this._droppedEventsCount + " events because eventCountLimit reached");
        this._spanProcessor.onEnd(this);
    };
    Span.prototype._getTime = function(inp) {
        if (typeof inp === "number" && inp <= (0, $fb570aa63c9bb090$export$b22daef4119238cd).now()) // must be a performance timestamp
        // apply correction and convert to hrtime
        return (0, $d06339726fb5d441$export$24b3f7dcd2848fa8)(inp + this._performanceOffset);
        if (typeof inp === "number") return (0, $d06339726fb5d441$export$e7ec5c82995537b1)(inp);
        if (inp instanceof Date) return (0, $d06339726fb5d441$export$e7ec5c82995537b1)(inp.getTime());
        if ((0, $d06339726fb5d441$export$390c59432f173a9f)(inp)) return inp;
        if (this._startTimeProvided) // if user provided a time for the start manually
        // we can't use duration to calculate event/end times
        return (0, $d06339726fb5d441$export$e7ec5c82995537b1)(Date.now());
        var msDuration = (0, $fb570aa63c9bb090$export$b22daef4119238cd).now() - this._performanceStartTime;
        return (0, $d06339726fb5d441$export$f07bb1dbc72184c3)(this.startTime, (0, $d06339726fb5d441$export$e7ec5c82995537b1)(msDuration));
    };
    Span.prototype.isRecording = function() {
        return this._ended === false;
    };
    Span.prototype.recordException = function(exception, time) {
        var attributes = {};
        if (typeof exception === "string") attributes[0, $29f26dae6e075eca$export$ff69507dfa9dcf0c] = exception;
        else if (exception) {
            if (exception.code) attributes[0, $29f26dae6e075eca$export$ecc84ea0f5a24384] = exception.code.toString();
            else if (exception.name) attributes[0, $29f26dae6e075eca$export$ecc84ea0f5a24384] = exception.name;
            if (exception.message) attributes[0, $29f26dae6e075eca$export$ff69507dfa9dcf0c] = exception.message;
            if (exception.stack) attributes[0, $29f26dae6e075eca$export$d9432f0c350b687d] = exception.stack;
        }
        // these are minimum requirements from spec
        if (attributes[0, $29f26dae6e075eca$export$ecc84ea0f5a24384] || attributes[0, $29f26dae6e075eca$export$ff69507dfa9dcf0c]) this.addEvent((0, $5ff1d0471318721d$export$a0fff09a5370d06f), attributes, time);
        else (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Failed to record an exception " + exception);
    };
    Object.defineProperty(Span.prototype, "duration", {
        get: function() {
            return this._duration;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Span.prototype, "ended", {
        get: function() {
            return this._ended;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Span.prototype, "droppedAttributesCount", {
        get: function() {
            return this._droppedAttributesCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Span.prototype, "droppedEventsCount", {
        get: function() {
            return this._droppedEventsCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Span.prototype, "droppedLinksCount", {
        get: function() {
            return this._droppedLinksCount;
        },
        enumerable: false,
        configurable: true
    });
    Span.prototype._isSpanEnded = function() {
        if (this._ended) (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Can not execute the operation on ended Span {traceId: " + this._spanContext.traceId + ", spanId: " + this._spanContext.spanId + "}");
        return this._ended;
    };
    // Utility function to truncate given value within size
    // for value type of string, will truncate to given limit
    // for type of non-string, will return same value
    Span.prototype._truncateToLimitUtil = function(value, limit) {
        if (value.length <= limit) return value;
        return value.substr(0, limit);
    };
    /**
     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then
     * return string with truncated to {@code attributeValueLengthLimit} characters
     *
     * If the given attribute value is array of strings then
     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters
     *
     * Otherwise return same Attribute {@code value}
     *
     * @param value Attribute value
     * @returns truncated attribute value if required, otherwise same value
     */ Span.prototype._truncateToSize = function(value) {
        var _this = this;
        var limit = this._attributeValueLengthLimit;
        // Check limit
        if (limit <= 0) {
            // Negative values are invalid, so do not truncate
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn("Attribute value limit must be positive, got " + limit);
            return value;
        }
        // String
        if (typeof value === "string") return this._truncateToLimitUtil(value, limit);
        // Array of strings
        if (Array.isArray(value)) return value.map(function(val) {
            return typeof val === "string" ? _this._truncateToLimitUtil(val, limit) : val;
        });
        // Other types, no need to apply value length limit
        return value;
    };
    return Span;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 



/**
 * A composite sampler that either respects the parent span's sampling decision
 * or delegates to `delegateSampler` for root spans.
 */ var $c354479e6402d939$export$2bc0b1b09c2e3b47 = /** @class */ function() {
    function ParentBasedSampler(config) {
        var _a, _b, _c, _d;
        this._root = config.root;
        if (!this._root) {
            (0, $5c139fbfce029b83$export$54c6946fc34b7cc2)(new Error("ParentBasedSampler must have a root sampler configured"));
            this._root = new (0, $47d1bc9271eaba6b$export$653f832afb4ffa27)();
        }
        this._remoteParentSampled = (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new (0, $47d1bc9271eaba6b$export$653f832afb4ffa27)();
        this._remoteParentNotSampled = (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new (0, $ffaf61536d9605bb$export$abc5f11618c4d6a3)();
        this._localParentSampled = (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new (0, $47d1bc9271eaba6b$export$653f832afb4ffa27)();
        this._localParentNotSampled = (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new (0, $ffaf61536d9605bb$export$abc5f11618c4d6a3)();
    }
    ParentBasedSampler.prototype.shouldSample = function(context, traceId, spanName, spanKind, attributes, links) {
        var parentContext = (0, $d3d11f3bc96c5059$export$357889f174732d38).getSpanContext(context);
        if (!parentContext || !(0, $9019f25568a7d9bd$export$e4373b9a2c09216c)(parentContext)) return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);
        if (parentContext.isRemote) {
            if (parentContext.traceFlags & (0, $06dc16c226890360$export$bf9049ad2b0883ff).SAMPLED) return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
        }
        if (parentContext.traceFlags & (0, $06dc16c226890360$export$bf9049ad2b0883ff).SAMPLED) return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
    };
    ParentBasedSampler.prototype.toString = function() {
        return "ParentBased{root=" + this._root.toString() + ", remoteParentSampled=" + this._remoteParentSampled.toString() + ", remoteParentNotSampled=" + this._remoteParentNotSampled.toString() + ", localParentSampled=" + this._localParentSampled.toString() + ", localParentNotSampled=" + this._localParentNotSampled.toString() + "}";
    };
    return ParentBasedSampler;
}();



var $8dc28a88f1c90fe9$var$env = (0, $2bf6571a244c8719$export$4bd44a2aa29d3d6e)();
var $8dc28a88f1c90fe9$var$FALLBACK_OTEL_TRACES_SAMPLER = (0, $4f01137b999274bc$export$243c1c4fe84ef188).AlwaysOn;
var $8dc28a88f1c90fe9$var$DEFAULT_RATIO = 1;
function $8dc28a88f1c90fe9$export$d25a2c2f78a5e968() {
    var _env = (0, $2bf6571a244c8719$export$4bd44a2aa29d3d6e)();
    return {
        sampler: $8dc28a88f1c90fe9$export$534308d7e73f0e71($8dc28a88f1c90fe9$var$env),
        forceFlushTimeoutMillis: 30000,
        generalLimits: {
            attributeValueLengthLimit: _env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,
            attributeCountLimit: _env.OTEL_ATTRIBUTE_COUNT_LIMIT
        },
        spanLimits: {
            attributeValueLengthLimit: _env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,
            attributeCountLimit: _env.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,
            linkCountLimit: _env.OTEL_SPAN_LINK_COUNT_LIMIT,
            eventCountLimit: _env.OTEL_SPAN_EVENT_COUNT_LIMIT,
            attributePerEventCountLimit: _env.OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,
            attributePerLinkCountLimit: _env.OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT
        },
        mergeResourceWithDefaults: true
    };
}
function $8dc28a88f1c90fe9$export$534308d7e73f0e71(environment) {
    if (environment === void 0) environment = (0, $2bf6571a244c8719$export$4bd44a2aa29d3d6e)();
    switch(environment.OTEL_TRACES_SAMPLER){
        case (0, $4f01137b999274bc$export$243c1c4fe84ef188).AlwaysOn:
            return new (0, $47d1bc9271eaba6b$export$653f832afb4ffa27)();
        case (0, $4f01137b999274bc$export$243c1c4fe84ef188).AlwaysOff:
            return new (0, $ffaf61536d9605bb$export$abc5f11618c4d6a3)();
        case (0, $4f01137b999274bc$export$243c1c4fe84ef188).ParentBasedAlwaysOn:
            return new (0, $c354479e6402d939$export$2bc0b1b09c2e3b47)({
                root: new (0, $47d1bc9271eaba6b$export$653f832afb4ffa27)()
            });
        case (0, $4f01137b999274bc$export$243c1c4fe84ef188).ParentBasedAlwaysOff:
            return new (0, $c354479e6402d939$export$2bc0b1b09c2e3b47)({
                root: new (0, $ffaf61536d9605bb$export$abc5f11618c4d6a3)()
            });
        case (0, $4f01137b999274bc$export$243c1c4fe84ef188).TraceIdRatio:
            return new (0, $a0283d7e7b94aa53$export$f1624f887f708bbf)($8dc28a88f1c90fe9$var$getSamplerProbabilityFromEnv(environment));
        case (0, $4f01137b999274bc$export$243c1c4fe84ef188).ParentBasedTraceIdRatio:
            return new (0, $c354479e6402d939$export$2bc0b1b09c2e3b47)({
                root: new (0, $a0283d7e7b94aa53$export$f1624f887f708bbf)($8dc28a88f1c90fe9$var$getSamplerProbabilityFromEnv(environment))
            });
        default:
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error('OTEL_TRACES_SAMPLER value "' + environment.OTEL_TRACES_SAMPLER + " invalid, defaulting to " + $8dc28a88f1c90fe9$var$FALLBACK_OTEL_TRACES_SAMPLER + '".');
            return new (0, $47d1bc9271eaba6b$export$653f832afb4ffa27)();
    }
}
function $8dc28a88f1c90fe9$var$getSamplerProbabilityFromEnv(environment) {
    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined || environment.OTEL_TRACES_SAMPLER_ARG === "") {
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to " + $8dc28a88f1c90fe9$var$DEFAULT_RATIO + ".");
        return $8dc28a88f1c90fe9$var$DEFAULT_RATIO;
    }
    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);
    if (isNaN(probability)) {
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is invalid, defaulting to " + $8dc28a88f1c90fe9$var$DEFAULT_RATIO + ".");
        return $8dc28a88f1c90fe9$var$DEFAULT_RATIO;
    }
    if (probability < 0 || probability > 1) {
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is out of range ([0..1]), defaulting to " + $8dc28a88f1c90fe9$var$DEFAULT_RATIO + ".");
        return $8dc28a88f1c90fe9$var$DEFAULT_RATIO;
    }
    return probability;
}



function $5fec42f54608bc30$export$7ec1ebcfa9d8bd6a(userConfig) {
    var perInstanceDefaults = {
        sampler: (0, $8dc28a88f1c90fe9$export$534308d7e73f0e71)()
    };
    var DEFAULT_CONFIG = (0, $8dc28a88f1c90fe9$export$d25a2c2f78a5e968)();
    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);
    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});
    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});
    return target;
}
function $5fec42f54608bc30$export$9f9fb435f8494555(userConfig) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    var spanLimits = Object.assign({}, userConfig.spanLimits);
    var parsedEnvConfig = (0, $2bf6571a244c8719$export$728650dd4748d692)();
    /**
     * Reassign span attribute count limit to use first non null value defined by user or use default value
     */ spanLimits.attributeCountLimit = (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : (0, $1d29d230e496f2b1$export$6ad612be99f9ed48);
    /**
     * Reassign span attribute value length limit to use first non null value defined by user or use default value
     */ spanLimits.attributeValueLengthLimit = (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : (0, $1d29d230e496f2b1$export$d9446f3c1c12def1);
    return Object.assign({}, userConfig, {
        spanLimits: spanLimits
    });
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $9fdc1f7644704bb8$var$SPAN_ID_BYTES = 8;
var $9fdc1f7644704bb8$var$TRACE_ID_BYTES = 16;
var $9fdc1f7644704bb8$export$97307207ef48da75 = /** @class */ function() {
    function RandomIdGenerator() {
        /**
         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex
         * characters corresponding to 128 bits.
         */ this.generateTraceId = $9fdc1f7644704bb8$var$getIdGenerator($9fdc1f7644704bb8$var$TRACE_ID_BYTES);
        /**
         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex
         * characters corresponding to 64 bits.
         */ this.generateSpanId = $9fdc1f7644704bb8$var$getIdGenerator($9fdc1f7644704bb8$var$SPAN_ID_BYTES);
    }
    return RandomIdGenerator;
}();
var $9fdc1f7644704bb8$var$SHARED_CHAR_CODES_ARRAY = Array(32);
function $9fdc1f7644704bb8$var$getIdGenerator(bytes) {
    return function generateId() {
        for(var i = 0; i < bytes * 2; i++){
            $9fdc1f7644704bb8$var$SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;
            // valid hex characters in the range 48-57 and 97-102
            if ($9fdc1f7644704bb8$var$SHARED_CHAR_CODES_ARRAY[i] >= 58) $9fdc1f7644704bb8$var$SHARED_CHAR_CODES_ARRAY[i] += 39;
        }
        return String.fromCharCode.apply(null, $9fdc1f7644704bb8$var$SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));
    };
}


/**
 * This class represents a basic tracer.
 */ var $94b146260db2f96d$export$c4b9363e2fc65361 = /** @class */ function() {
    /**
     * Constructs a new Tracer instance.
     */ function Tracer(instrumentationLibrary, config, _tracerProvider) {
        this._tracerProvider = _tracerProvider;
        var localConfig = (0, $5fec42f54608bc30$export$7ec1ebcfa9d8bd6a)(config);
        this._sampler = localConfig.sampler;
        this._generalLimits = localConfig.generalLimits;
        this._spanLimits = localConfig.spanLimits;
        this._idGenerator = config.idGenerator || new (0, $9fdc1f7644704bb8$export$97307207ef48da75)();
        this.resource = _tracerProvider.resource;
        this.instrumentationLibrary = instrumentationLibrary;
    }
    /**
     * Starts a new Span or returns the default NoopSpan based on the sampling
     * decision.
     */ Tracer.prototype.startSpan = function(name, options, context) {
        var _a, _b, _c;
        if (options === void 0) options = {};
        if (context === void 0) context = $c903d3361d9a81c0$export$a078c61943f9dbbe.active();
        // remove span from context in case a root span is requested via options
        if (options.root) context = $d3d11f3bc96c5059$export$357889f174732d38.deleteSpan(context);
        var parentSpan = $d3d11f3bc96c5059$export$357889f174732d38.getSpan(context);
        if ((0, $681dc49ded58dd0c$export$7d5f2376f7cf513)(context)) {
            $f846a5aaeff49c57$export$c042e7c2f59bc046.debug("Instrumentation suppressed, returning Noop Span");
            var nonRecordingSpan = $d3d11f3bc96c5059$export$357889f174732d38.wrapSpanContext($fe8274c1e0ccb802$export$8591e4c852b66703);
            return nonRecordingSpan;
        }
        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();
        var spanId = this._idGenerator.generateSpanId();
        var traceId;
        var traceState;
        var parentSpanId;
        if (!parentSpanContext || !$d3d11f3bc96c5059$export$357889f174732d38.isSpanContextValid(parentSpanContext)) // New root span.
        traceId = this._idGenerator.generateTraceId();
        else {
            // New child span.
            traceId = parentSpanContext.traceId;
            traceState = parentSpanContext.traceState;
            parentSpanId = parentSpanContext.spanId;
        }
        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : $c7d276c8670f28c2$export$4da4ea8145910e8b.INTERNAL;
        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function(link) {
            return {
                context: link.context,
                attributes: (0, $b48e61364f31e119$export$b0663eba150d60c9)(link.attributes)
            };
        });
        var attributes = (0, $b48e61364f31e119$export$b0663eba150d60c9)(options.attributes);
        // make sampling decision
        var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);
        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;
        var traceFlags = samplingResult.decision === $26a42c328c7d67cf$export$94df7a7a96a92f7b.RECORD_AND_SAMPLED ? $06dc16c226890360$export$bf9049ad2b0883ff.SAMPLED : $06dc16c226890360$export$bf9049ad2b0883ff.NONE;
        var spanContext = {
            traceId: traceId,
            spanId: spanId,
            traceFlags: traceFlags,
            traceState: traceState
        };
        if (samplingResult.decision === $26a42c328c7d67cf$export$94df7a7a96a92f7b.NOT_RECORD) {
            $f846a5aaeff49c57$export$c042e7c2f59bc046.debug("Recording is off, propagating context in a non-recording span");
            var nonRecordingSpan = $d3d11f3bc96c5059$export$357889f174732d38.wrapSpanContext(spanContext);
            return nonRecordingSpan;
        }
        // Set initial span attributes. The attributes object may have been mutated
        // by the sampler, so we sanitize the merged attributes before setting them.
        var initAttributes = (0, $b48e61364f31e119$export$b0663eba150d60c9)(Object.assign(attributes, samplingResult.attributes));
        var span = new (0, $62fa49f17a71d6a0$export$5f1714a13ed34c01)(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime, undefined, initAttributes);
        return span;
    };
    Tracer.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) return;
        else if (arguments.length === 2) fn = arg2;
        else if (arguments.length === 3) {
            opts = arg2;
            fn = arg3;
        } else {
            opts = arg2;
            ctx = arg3;
            fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : $c903d3361d9a81c0$export$a078c61943f9dbbe.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = $d3d11f3bc96c5059$export$357889f174732d38.setSpan(parentContext, span);
        return $c903d3361d9a81c0$export$a078c61943f9dbbe.with(contextWithSpanSet, fn, undefined, span);
    };
    /** Returns the active {@link GeneralLimits}. */ Tracer.prototype.getGeneralLimits = function() {
        return this._generalLimits;
    };
    /** Returns the active {@link SpanLimits}. */ Tracer.prototype.getSpanLimits = function() {
        return this._spanLimits;
    };
    Tracer.prototype.getActiveSpanProcessor = function() {
        return this._tracerProvider.getActiveSpanProcessor();
    };
    return Tracer;
}();



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $d9ea6f195f1e4f29$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/**
 * Implementation of the {@link SpanProcessor} that simply forwards all
 * received events to a list of {@link SpanProcessor}s.
 */ var $d9ea6f195f1e4f29$export$3012fe5a49154394 = /** @class */ function() {
    function MultiSpanProcessor(_spanProcessors) {
        this._spanProcessors = _spanProcessors;
    }
    MultiSpanProcessor.prototype.forceFlush = function() {
        var e_1, _a;
        var promises = [];
        try {
            for(var _b = $d9ea6f195f1e4f29$var$__values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()){
                var spanProcessor = _c.value;
                promises.push(spanProcessor.forceFlush());
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return new Promise(function(resolve) {
            Promise.all(promises).then(function() {
                resolve();
            }).catch(function(error) {
                (0, $5c139fbfce029b83$export$54c6946fc34b7cc2)(error || new Error("MultiSpanProcessor: forceFlush failed"));
                resolve();
            });
        });
    };
    MultiSpanProcessor.prototype.onStart = function(span, context) {
        var e_2, _a;
        try {
            for(var _b = $d9ea6f195f1e4f29$var$__values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()){
                var spanProcessor = _c.value;
                spanProcessor.onStart(span, context);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
    };
    MultiSpanProcessor.prototype.onEnd = function(span) {
        var e_3, _a;
        try {
            for(var _b = $d9ea6f195f1e4f29$var$__values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()){
                var spanProcessor = _c.value;
                spanProcessor.onEnd(span);
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
    };
    MultiSpanProcessor.prototype.shutdown = function() {
        var e_4, _a;
        var promises = [];
        try {
            for(var _b = $d9ea6f195f1e4f29$var$__values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()){
                var spanProcessor = _c.value;
                promises.push(spanProcessor.shutdown());
            }
        } catch (e_4_1) {
            e_4 = {
                error: e_4_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_4) throw e_4.error;
            }
        }
        return new Promise(function(resolve, reject) {
            Promise.all(promises).then(function() {
                resolve();
            }, reject);
        });
    };
    return MultiSpanProcessor;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** No-op implementation of SpanProcessor */ var $37d06802574fdfad$export$27767823ad33d189 = /** @class */ function() {
    function NoopSpanProcessor() {}
    NoopSpanProcessor.prototype.onStart = function(_span, _context) {};
    NoopSpanProcessor.prototype.onEnd = function(_span) {};
    NoopSpanProcessor.prototype.shutdown = function() {
        return Promise.resolve();
    };
    NoopSpanProcessor.prototype.forceFlush = function() {
        return Promise.resolve();
    };
    return NoopSpanProcessor;
}();




var $b1bfeeff9fce920d$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $b1bfeeff9fce920d$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var $b1bfeeff9fce920d$export$11a85395fcf5a7f0;
(function(ForceFlushState) {
    ForceFlushState[ForceFlushState["resolved"] = 0] = "resolved";
    ForceFlushState[ForceFlushState["timeout"] = 1] = "timeout";
    ForceFlushState[ForceFlushState["error"] = 2] = "error";
    ForceFlushState[ForceFlushState["unresolved"] = 3] = "unresolved";
})($b1bfeeff9fce920d$export$11a85395fcf5a7f0 || ($b1bfeeff9fce920d$export$11a85395fcf5a7f0 = {}));
/**
 * This class represents a basic tracer provider which platform libraries can extend
 */ var $b1bfeeff9fce920d$export$1f2f0f67f5ecff3b = /** @class */ function() {
    function BasicTracerProvider(config) {
        if (config === void 0) config = {};
        var _a, _b;
        this._registeredSpanProcessors = [];
        this._tracers = new Map();
        var mergedConfig = (0, $d38b70c327ed913f$export$4950aa0f605343fb)({}, (0, $8dc28a88f1c90fe9$export$d25a2c2f78a5e968)(), (0, $5fec42f54608bc30$export$9f9fb435f8494555)(config));
        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : (0, $eaedecc9905e0881$export$39a853cfb5a94a63).empty();
        if (mergedConfig.mergeResourceWithDefaults) this.resource = (0, $eaedecc9905e0881$export$39a853cfb5a94a63).default().merge(this.resource);
        this._config = Object.assign({}, mergedConfig, {
            resource: this.resource
        });
        if ((_b = config.spanProcessors) === null || _b === void 0 ? void 0 : _b.length) {
            this._registeredSpanProcessors = $b1bfeeff9fce920d$var$__spreadArray([], $b1bfeeff9fce920d$var$__read(config.spanProcessors), false);
            this.activeSpanProcessor = new (0, $d9ea6f195f1e4f29$export$3012fe5a49154394)(this._registeredSpanProcessors);
        } else {
            var defaultExporter = this._buildExporterFromEnv();
            if (defaultExporter !== undefined) {
                var batchProcessor = new (0, $24ab59accace2f6a$export$237547059fd543f9)(defaultExporter);
                this.activeSpanProcessor = batchProcessor;
            } else this.activeSpanProcessor = new (0, $37d06802574fdfad$export$27767823ad33d189)();
        }
    }
    BasicTracerProvider.prototype.getTracer = function(name, version, options) {
        var key = name + "@" + (version || "") + ":" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || "");
        if (!this._tracers.has(key)) this._tracers.set(key, new (0, $94b146260db2f96d$export$c4b9363e2fc65361)({
            name: name,
            version: version,
            schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl
        }, this._config, this));
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this._tracers.get(key);
    };
    /**
     * @deprecated please use {@link TracerConfig} spanProcessors property
     * Adds a new {@link SpanProcessor} to this tracer.
     * @param spanProcessor the new SpanProcessor to be added.
     */ BasicTracerProvider.prototype.addSpanProcessor = function(spanProcessor) {
        if (this._registeredSpanProcessors.length === 0) // since we might have enabled by default a batchProcessor, we disable it
        // before adding the new one
        this.activeSpanProcessor.shutdown().catch(function(err) {
            return (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error("Error while trying to shutdown current span processor", err);
        });
        this._registeredSpanProcessors.push(spanProcessor);
        this.activeSpanProcessor = new (0, $d9ea6f195f1e4f29$export$3012fe5a49154394)(this._registeredSpanProcessors);
    };
    BasicTracerProvider.prototype.getActiveSpanProcessor = function() {
        return this.activeSpanProcessor;
    };
    /**
     * Register this TracerProvider for use with the OpenTelemetry API.
     * Undefined values may be replaced with defaults, and
     * null values will be skipped.
     *
     * @param config Configuration object for SDK registration
     */ BasicTracerProvider.prototype.register = function(config) {
        if (config === void 0) config = {};
        (0, $d3d11f3bc96c5059$export$357889f174732d38).setGlobalTracerProvider(this);
        if (config.propagator === undefined) config.propagator = this._buildPropagatorFromEnv();
        if (config.contextManager) (0, $c903d3361d9a81c0$export$a078c61943f9dbbe).setGlobalContextManager(config.contextManager);
        if (config.propagator) (0, $341b7c0814521fae$export$3e49040daa9dba20).setGlobalPropagator(config.propagator);
    };
    BasicTracerProvider.prototype.forceFlush = function() {
        var timeout = this._config.forceFlushTimeoutMillis;
        var promises = this._registeredSpanProcessors.map(function(spanProcessor) {
            return new Promise(function(resolve) {
                var state;
                var timeoutInterval = setTimeout(function() {
                    resolve(new Error("Span processor did not completed within timeout period of " + timeout + " ms"));
                    state = $b1bfeeff9fce920d$export$11a85395fcf5a7f0.timeout;
                }, timeout);
                spanProcessor.forceFlush().then(function() {
                    clearTimeout(timeoutInterval);
                    if (state !== $b1bfeeff9fce920d$export$11a85395fcf5a7f0.timeout) {
                        state = $b1bfeeff9fce920d$export$11a85395fcf5a7f0.resolved;
                        resolve(state);
                    }
                }).catch(function(error) {
                    clearTimeout(timeoutInterval);
                    state = $b1bfeeff9fce920d$export$11a85395fcf5a7f0.error;
                    resolve(error);
                });
            });
        });
        return new Promise(function(resolve, reject) {
            Promise.all(promises).then(function(results) {
                var errors = results.filter(function(result) {
                    return result !== $b1bfeeff9fce920d$export$11a85395fcf5a7f0.resolved;
                });
                if (errors.length > 0) reject(errors);
                else resolve();
            }).catch(function(error) {
                return reject([
                    error
                ]);
            });
        });
    };
    BasicTracerProvider.prototype.shutdown = function() {
        return this.activeSpanProcessor.shutdown();
    };
    /**
     * TS cannot yet infer the type of this.constructor:
     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146
     * There is no need to override either of the getters in your child class.
     * The type of the registered component maps should be the same across all
     * classes in the inheritance tree.
     */ BasicTracerProvider.prototype._getPropagator = function(name) {
        var _a;
        return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();
    };
    BasicTracerProvider.prototype._getSpanExporter = function(name) {
        var _a;
        return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();
    };
    BasicTracerProvider.prototype._buildPropagatorFromEnv = function() {
        var _this = this;
        // per spec, propagators from env must be deduplicated
        var uniquePropagatorNames = Array.from(new Set((0, $2bf6571a244c8719$export$4bd44a2aa29d3d6e)().OTEL_PROPAGATORS));
        var propagators = uniquePropagatorNames.map(function(name) {
            var propagator = _this._getPropagator(name);
            if (!propagator) (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn('Propagator "' + name + '" requested through environment variable is unavailable.');
            return propagator;
        });
        var validPropagators = propagators.reduce(function(list, item) {
            if (item) list.push(item);
            return list;
        }, []);
        if (validPropagators.length === 0) return;
        else if (uniquePropagatorNames.length === 1) return validPropagators[0];
        else return new (0, $b7fe894827773e5b$export$4beb26f46770357f)({
            propagators: validPropagators
        });
    };
    BasicTracerProvider.prototype._buildExporterFromEnv = function() {
        var exporterName = (0, $2bf6571a244c8719$export$4bd44a2aa29d3d6e)().OTEL_TRACES_EXPORTER;
        if (exporterName === "none" || exporterName === "") return;
        var exporter = this._getSpanExporter(exporterName);
        if (!exporter) (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error('Exporter "' + exporterName + '" requested through environment variable is unavailable.');
        return exporter;
    };
    BasicTracerProvider._registeredPropagators = new Map([
        [
            "tracecontext",
            function() {
                return new (0, $2aca640bec4a6daf$export$737c747d043a1f7b)();
            }
        ],
        [
            "baggage",
            function() {
                return new (0, $736381edcc247406$export$604bcc7f2bff6bb)();
            }
        ]
    ]);
    BasicTracerProvider._registeredExporters = new Map();
    return BasicTracerProvider;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $520a64d9d4e39fa9$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $520a64d9d4e39fa9$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * Stack Context Manager for managing the state in web
 * it doesn't fully support the async calls though
 */ var $520a64d9d4e39fa9$export$3dfe62dd209faf13 = /** @class */ function() {
    function StackContextManager() {
        /**
         * whether the context manager is enabled or not
         */ this._enabled = false;
        /**
         * Keeps the reference to current context
         */ this._currentContext = (0, $934e30cdbca38464$export$78df28f9b2f9a7dc);
    }
    /**
     *
     * @param context
     * @param target Function to be executed within the context
     */ // eslint-disable-next-line @typescript-eslint/ban-types
    StackContextManager.prototype._bindFunction = function(context, target) {
        if (context === void 0) context = (0, $934e30cdbca38464$export$78df28f9b2f9a7dc);
        var manager = this;
        var contextWrapper = function() {
            var _this = this;
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            return manager.with(context, function() {
                return target.apply(_this, args);
            });
        };
        Object.defineProperty(contextWrapper, "length", {
            enumerable: false,
            configurable: true,
            writable: false,
            value: target.length
        });
        return contextWrapper;
    };
    /**
     * Returns the active context
     */ StackContextManager.prototype.active = function() {
        return this._currentContext;
    };
    /**
     * Binds a the certain context or the active one to the target function and then returns the target
     * @param context A context (span) to be bind to target
     * @param target a function or event emitter. When target or one of its callbacks is called,
     *  the provided context will be used as the active context for the duration of the call.
     */ StackContextManager.prototype.bind = function(context, target) {
        // if no specific context to propagate is given, we use the current one
        if (context === undefined) context = this.active();
        if (typeof target === "function") return this._bindFunction(context, target);
        return target;
    };
    /**
     * Disable the context manager (clears the current context)
     */ StackContextManager.prototype.disable = function() {
        this._currentContext = (0, $934e30cdbca38464$export$78df28f9b2f9a7dc);
        this._enabled = false;
        return this;
    };
    /**
     * Enables the context manager and creates a default(root) context
     */ StackContextManager.prototype.enable = function() {
        if (this._enabled) return this;
        this._enabled = true;
        this._currentContext = (0, $934e30cdbca38464$export$78df28f9b2f9a7dc);
        return this;
    };
    /**
     * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.
     * The context will be set as active
     * @param context
     * @param fn Callback function
     * @param thisArg optional receiver to be used for calling fn
     * @param args optional arguments forwarded to fn
     */ StackContextManager.prototype.with = function(context, fn, thisArg) {
        var args = [];
        for(var _i = 3; _i < arguments.length; _i++)args[_i - 3] = arguments[_i];
        var previousContext = this._currentContext;
        this._currentContext = context || (0, $934e30cdbca38464$export$78df28f9b2f9a7dc);
        try {
            return fn.call.apply(fn, $520a64d9d4e39fa9$var$__spreadArray([
                thisArg
            ], $520a64d9d4e39fa9$var$__read(args), false));
        } finally{
            this._currentContext = previousContext;
        }
    };
    return StackContextManager;
}();


var $a02addadea16a97a$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * This class represents a web tracer with {@link StackContextManager}
 */ var $a02addadea16a97a$export$a785009afeee3453 = /** @class */ function(_super) {
    $a02addadea16a97a$var$__extends(WebTracerProvider, _super);
    /**
     * Constructs a new Tracer instance.
     * @param config Web Tracer config
     */ function WebTracerProvider(config) {
        if (config === void 0) config = {};
        var _this = _super.call(this, config) || this;
        if (config.contextManager) throw "contextManager should be defined in register method not in constructor";
        if (config.propagator) throw "propagator should be defined in register method not in constructor";
        return _this;
    }
    /**
     * Register this TracerProvider for use with the OpenTelemetry API.
     * Undefined values may be replaced with defaults, and
     * null values will be skipped.
     *
     * @param config Configuration object for SDK registration
     */ WebTracerProvider.prototype.register = function(config) {
        if (config === void 0) config = {};
        if (config.contextManager === undefined) config.contextManager = new (0, $520a64d9d4e39fa9$export$3dfe62dd209faf13)();
        if (config.contextManager) config.contextManager.enable();
        _super.prototype.register.call(this, config);
    };
    return WebTracerProvider;
}((0, $b1bfeeff9fce920d$export$1f2f0f67f5ecff3b));


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Creates a const map from the given values
 * @param values - An array of values to be used as keys and values in the map.
 * @returns A populated version of the map with the values and keys derived from the values.
 */ /*#__NO_SIDE_EFFECTS__*/ function $fa2a9341e510c814$export$8796db7ca257d576(values) {
    // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any
    var res = {};
    var len = values.length;
    for(var lp = 0; lp < len; lp++){
        var val = values[lp];
        if (val) res[String(val).toUpperCase().replace(/[-.]/g, "_")] = val;
    }
    return res;
}


//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2
//----------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------
// Constant values for SemanticAttributes
//----------------------------------------------------------------------------------------------------------
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_AWS_LAMBDA_INVOKED_ARN = "aws.lambda.invoked_arn";
var $24d609c8531796f7$var$TMP_DB_SYSTEM = "db.system";
var $24d609c8531796f7$var$TMP_DB_CONNECTION_STRING = "db.connection_string";
var $24d609c8531796f7$var$TMP_DB_USER = "db.user";
var $24d609c8531796f7$var$TMP_DB_JDBC_DRIVER_CLASSNAME = "db.jdbc.driver_classname";
var $24d609c8531796f7$var$TMP_DB_NAME = "db.name";
var $24d609c8531796f7$var$TMP_DB_STATEMENT = "db.statement";
var $24d609c8531796f7$var$TMP_DB_OPERATION = "db.operation";
var $24d609c8531796f7$var$TMP_DB_MSSQL_INSTANCE_NAME = "db.mssql.instance_name";
var $24d609c8531796f7$var$TMP_DB_CASSANDRA_KEYSPACE = "db.cassandra.keyspace";
var $24d609c8531796f7$var$TMP_DB_CASSANDRA_PAGE_SIZE = "db.cassandra.page_size";
var $24d609c8531796f7$var$TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = "db.cassandra.consistency_level";
var $24d609c8531796f7$var$TMP_DB_CASSANDRA_TABLE = "db.cassandra.table";
var $24d609c8531796f7$var$TMP_DB_CASSANDRA_IDEMPOTENCE = "db.cassandra.idempotence";
var $24d609c8531796f7$var$TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = "db.cassandra.speculative_execution_count";
var $24d609c8531796f7$var$TMP_DB_CASSANDRA_COORDINATOR_ID = "db.cassandra.coordinator.id";
var $24d609c8531796f7$var$TMP_DB_CASSANDRA_COORDINATOR_DC = "db.cassandra.coordinator.dc";
var $24d609c8531796f7$var$TMP_DB_HBASE_NAMESPACE = "db.hbase.namespace";
var $24d609c8531796f7$var$TMP_DB_REDIS_DATABASE_INDEX = "db.redis.database_index";
var $24d609c8531796f7$var$TMP_DB_MONGODB_COLLECTION = "db.mongodb.collection";
var $24d609c8531796f7$var$TMP_DB_SQL_TABLE = "db.sql.table";
var $24d609c8531796f7$var$TMP_EXCEPTION_TYPE = "exception.type";
var $24d609c8531796f7$var$TMP_EXCEPTION_MESSAGE = "exception.message";
var $24d609c8531796f7$var$TMP_EXCEPTION_STACKTRACE = "exception.stacktrace";
var $24d609c8531796f7$var$TMP_EXCEPTION_ESCAPED = "exception.escaped";
var $24d609c8531796f7$var$TMP_FAAS_TRIGGER = "faas.trigger";
var $24d609c8531796f7$var$TMP_FAAS_EXECUTION = "faas.execution";
var $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_COLLECTION = "faas.document.collection";
var $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_OPERATION = "faas.document.operation";
var $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_TIME = "faas.document.time";
var $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_NAME = "faas.document.name";
var $24d609c8531796f7$var$TMP_FAAS_TIME = "faas.time";
var $24d609c8531796f7$var$TMP_FAAS_CRON = "faas.cron";
var $24d609c8531796f7$var$TMP_FAAS_COLDSTART = "faas.coldstart";
var $24d609c8531796f7$var$TMP_FAAS_INVOKED_NAME = "faas.invoked_name";
var $24d609c8531796f7$var$TMP_FAAS_INVOKED_PROVIDER = "faas.invoked_provider";
var $24d609c8531796f7$var$TMP_FAAS_INVOKED_REGION = "faas.invoked_region";
var $24d609c8531796f7$var$TMP_NET_TRANSPORT = "net.transport";
var $24d609c8531796f7$var$TMP_NET_PEER_IP = "net.peer.ip";
var $24d609c8531796f7$var$TMP_NET_PEER_PORT = "net.peer.port";
var $24d609c8531796f7$var$TMP_NET_PEER_NAME = "net.peer.name";
var $24d609c8531796f7$var$TMP_NET_HOST_IP = "net.host.ip";
var $24d609c8531796f7$var$TMP_NET_HOST_PORT = "net.host.port";
var $24d609c8531796f7$var$TMP_NET_HOST_NAME = "net.host.name";
var $24d609c8531796f7$var$TMP_NET_HOST_CONNECTION_TYPE = "net.host.connection.type";
var $24d609c8531796f7$var$TMP_NET_HOST_CONNECTION_SUBTYPE = "net.host.connection.subtype";
var $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_NAME = "net.host.carrier.name";
var $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_MCC = "net.host.carrier.mcc";
var $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_MNC = "net.host.carrier.mnc";
var $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_ICC = "net.host.carrier.icc";
var $24d609c8531796f7$var$TMP_PEER_SERVICE = "peer.service";
var $24d609c8531796f7$var$TMP_ENDUSER_ID = "enduser.id";
var $24d609c8531796f7$var$TMP_ENDUSER_ROLE = "enduser.role";
var $24d609c8531796f7$var$TMP_ENDUSER_SCOPE = "enduser.scope";
var $24d609c8531796f7$var$TMP_THREAD_ID = "thread.id";
var $24d609c8531796f7$var$TMP_THREAD_NAME = "thread.name";
var $24d609c8531796f7$var$TMP_CODE_FUNCTION = "code.function";
var $24d609c8531796f7$var$TMP_CODE_NAMESPACE = "code.namespace";
var $24d609c8531796f7$var$TMP_CODE_FILEPATH = "code.filepath";
var $24d609c8531796f7$var$TMP_CODE_LINENO = "code.lineno";
var $24d609c8531796f7$var$TMP_HTTP_METHOD = "http.method";
var $24d609c8531796f7$var$TMP_HTTP_URL = "http.url";
var $24d609c8531796f7$var$TMP_HTTP_TARGET = "http.target";
var $24d609c8531796f7$var$TMP_HTTP_HOST = "http.host";
var $24d609c8531796f7$var$TMP_HTTP_SCHEME = "http.scheme";
var $24d609c8531796f7$var$TMP_HTTP_STATUS_CODE = "http.status_code";
var $24d609c8531796f7$var$TMP_HTTP_FLAVOR = "http.flavor";
var $24d609c8531796f7$var$TMP_HTTP_USER_AGENT = "http.user_agent";
var $24d609c8531796f7$var$TMP_HTTP_REQUEST_CONTENT_LENGTH = "http.request_content_length";
var $24d609c8531796f7$var$TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = "http.request_content_length_uncompressed";
var $24d609c8531796f7$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH = "http.response_content_length";
var $24d609c8531796f7$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = "http.response_content_length_uncompressed";
var $24d609c8531796f7$var$TMP_HTTP_SERVER_NAME = "http.server_name";
var $24d609c8531796f7$var$TMP_HTTP_ROUTE = "http.route";
var $24d609c8531796f7$var$TMP_HTTP_CLIENT_IP = "http.client_ip";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TABLE_NAMES = "aws.dynamodb.table_names";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = "aws.dynamodb.consumed_capacity";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = "aws.dynamodb.item_collection_metrics";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = "aws.dynamodb.provisioned_read_capacity";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = "aws.dynamodb.provisioned_write_capacity";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_CONSISTENT_READ = "aws.dynamodb.consistent_read";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROJECTION = "aws.dynamodb.projection";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_LIMIT = "aws.dynamodb.limit";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = "aws.dynamodb.attributes_to_get";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_INDEX_NAME = "aws.dynamodb.index_name";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SELECT = "aws.dynamodb.select";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = "aws.dynamodb.global_secondary_indexes";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = "aws.dynamodb.local_secondary_indexes";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = "aws.dynamodb.exclusive_start_table";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TABLE_COUNT = "aws.dynamodb.table_count";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SCAN_FORWARD = "aws.dynamodb.scan_forward";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SEGMENT = "aws.dynamodb.segment";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = "aws.dynamodb.total_segments";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_COUNT = "aws.dynamodb.count";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SCANNED_COUNT = "aws.dynamodb.scanned_count";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = "aws.dynamodb.attribute_definitions";
var $24d609c8531796f7$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = "aws.dynamodb.global_secondary_index_updates";
var $24d609c8531796f7$var$TMP_MESSAGING_SYSTEM = "messaging.system";
var $24d609c8531796f7$var$TMP_MESSAGING_DESTINATION = "messaging.destination";
var $24d609c8531796f7$var$TMP_MESSAGING_DESTINATION_KIND = "messaging.destination_kind";
var $24d609c8531796f7$var$TMP_MESSAGING_TEMP_DESTINATION = "messaging.temp_destination";
var $24d609c8531796f7$var$TMP_MESSAGING_PROTOCOL = "messaging.protocol";
var $24d609c8531796f7$var$TMP_MESSAGING_PROTOCOL_VERSION = "messaging.protocol_version";
var $24d609c8531796f7$var$TMP_MESSAGING_URL = "messaging.url";
var $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_ID = "messaging.message_id";
var $24d609c8531796f7$var$TMP_MESSAGING_CONVERSATION_ID = "messaging.conversation_id";
var $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = "messaging.message_payload_size_bytes";
var $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = "messaging.message_payload_compressed_size_bytes";
var $24d609c8531796f7$var$TMP_MESSAGING_OPERATION = "messaging.operation";
var $24d609c8531796f7$var$TMP_MESSAGING_CONSUMER_ID = "messaging.consumer_id";
var $24d609c8531796f7$var$TMP_MESSAGING_RABBITMQ_ROUTING_KEY = "messaging.rabbitmq.routing_key";
var $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_MESSAGE_KEY = "messaging.kafka.message_key";
var $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_CONSUMER_GROUP = "messaging.kafka.consumer_group";
var $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_CLIENT_ID = "messaging.kafka.client_id";
var $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_PARTITION = "messaging.kafka.partition";
var $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_TOMBSTONE = "messaging.kafka.tombstone";
var $24d609c8531796f7$var$TMP_RPC_SYSTEM = "rpc.system";
var $24d609c8531796f7$var$TMP_RPC_SERVICE = "rpc.service";
var $24d609c8531796f7$var$TMP_RPC_METHOD = "rpc.method";
var $24d609c8531796f7$var$TMP_RPC_GRPC_STATUS_CODE = "rpc.grpc.status_code";
var $24d609c8531796f7$var$TMP_RPC_JSONRPC_VERSION = "rpc.jsonrpc.version";
var $24d609c8531796f7$var$TMP_RPC_JSONRPC_REQUEST_ID = "rpc.jsonrpc.request_id";
var $24d609c8531796f7$var$TMP_RPC_JSONRPC_ERROR_CODE = "rpc.jsonrpc.error_code";
var $24d609c8531796f7$var$TMP_RPC_JSONRPC_ERROR_MESSAGE = "rpc.jsonrpc.error_message";
var $24d609c8531796f7$var$TMP_MESSAGE_TYPE = "message.type";
var $24d609c8531796f7$var$TMP_MESSAGE_ID = "message.id";
var $24d609c8531796f7$var$TMP_MESSAGE_COMPRESSED_SIZE = "message.compressed_size";
var $24d609c8531796f7$var$TMP_MESSAGE_UNCOMPRESSED_SIZE = "message.uncompressed_size";
var $24d609c8531796f7$export$170bb395abfdb74 = $24d609c8531796f7$var$TMP_AWS_LAMBDA_INVOKED_ARN;
var $24d609c8531796f7$export$4d8f9683caa766fd = $24d609c8531796f7$var$TMP_DB_SYSTEM;
var $24d609c8531796f7$export$d367aaf68e61a0d5 = $24d609c8531796f7$var$TMP_DB_CONNECTION_STRING;
var $24d609c8531796f7$export$310240ea93b3fe22 = $24d609c8531796f7$var$TMP_DB_USER;
var $24d609c8531796f7$export$aa8b483f52799ba9 = $24d609c8531796f7$var$TMP_DB_JDBC_DRIVER_CLASSNAME;
var $24d609c8531796f7$export$d1ee0266d0ce708f = $24d609c8531796f7$var$TMP_DB_NAME;
var $24d609c8531796f7$export$ce244300665216c6 = $24d609c8531796f7$var$TMP_DB_STATEMENT;
var $24d609c8531796f7$export$dfb6a782675c717b = $24d609c8531796f7$var$TMP_DB_OPERATION;
var $24d609c8531796f7$export$ce5040faeb6d8f08 = $24d609c8531796f7$var$TMP_DB_MSSQL_INSTANCE_NAME;
var $24d609c8531796f7$export$e241e7101e6d4783 = $24d609c8531796f7$var$TMP_DB_CASSANDRA_KEYSPACE;
var $24d609c8531796f7$export$8823a63ac409681b = $24d609c8531796f7$var$TMP_DB_CASSANDRA_PAGE_SIZE;
var $24d609c8531796f7$export$b838c3d1859a7260 = $24d609c8531796f7$var$TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;
var $24d609c8531796f7$export$3f3068d83ae4cca5 = $24d609c8531796f7$var$TMP_DB_CASSANDRA_TABLE;
var $24d609c8531796f7$export$17334025dcb96205 = $24d609c8531796f7$var$TMP_DB_CASSANDRA_IDEMPOTENCE;
var $24d609c8531796f7$export$a63f22381e3297f2 = $24d609c8531796f7$var$TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;
var $24d609c8531796f7$export$e06ccece5268ed3 = $24d609c8531796f7$var$TMP_DB_CASSANDRA_COORDINATOR_ID;
var $24d609c8531796f7$export$ab77f08d0cc7144 = $24d609c8531796f7$var$TMP_DB_CASSANDRA_COORDINATOR_DC;
var $24d609c8531796f7$export$f83bf50700108cdb = $24d609c8531796f7$var$TMP_DB_HBASE_NAMESPACE;
var $24d609c8531796f7$export$f9c9b189f60bce02 = $24d609c8531796f7$var$TMP_DB_REDIS_DATABASE_INDEX;
var $24d609c8531796f7$export$b73e684c351bf304 = $24d609c8531796f7$var$TMP_DB_MONGODB_COLLECTION;
var $24d609c8531796f7$export$5b02e077c84b0dc7 = $24d609c8531796f7$var$TMP_DB_SQL_TABLE;
var $24d609c8531796f7$export$ecc84ea0f5a24384 = $24d609c8531796f7$var$TMP_EXCEPTION_TYPE;
var $24d609c8531796f7$export$ff69507dfa9dcf0c = $24d609c8531796f7$var$TMP_EXCEPTION_MESSAGE;
var $24d609c8531796f7$export$d9432f0c350b687d = $24d609c8531796f7$var$TMP_EXCEPTION_STACKTRACE;
var $24d609c8531796f7$export$4d3c212dd7c75f9d = $24d609c8531796f7$var$TMP_EXCEPTION_ESCAPED;
var $24d609c8531796f7$export$7e853a3dbd95b3a2 = $24d609c8531796f7$var$TMP_FAAS_TRIGGER;
var $24d609c8531796f7$export$68a5b08142e33c1d = $24d609c8531796f7$var$TMP_FAAS_EXECUTION;
var $24d609c8531796f7$export$f4b6288b42b8d4f8 = $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_COLLECTION;
var $24d609c8531796f7$export$7e6d28b35ab8e751 = $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_OPERATION;
var $24d609c8531796f7$export$b36094664197ebd9 = $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_TIME;
var $24d609c8531796f7$export$2401d669e1b7f304 = $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_NAME;
var $24d609c8531796f7$export$4630b1edb758007c = $24d609c8531796f7$var$TMP_FAAS_TIME;
var $24d609c8531796f7$export$4358b4189d5aa75e = $24d609c8531796f7$var$TMP_FAAS_CRON;
var $24d609c8531796f7$export$18a88fa49bf141a8 = $24d609c8531796f7$var$TMP_FAAS_COLDSTART;
var $24d609c8531796f7$export$ba620de28d483834 = $24d609c8531796f7$var$TMP_FAAS_INVOKED_NAME;
var $24d609c8531796f7$export$1ac1158b40ce77df = $24d609c8531796f7$var$TMP_FAAS_INVOKED_PROVIDER;
var $24d609c8531796f7$export$e8b3f54186b03f93 = $24d609c8531796f7$var$TMP_FAAS_INVOKED_REGION;
var $24d609c8531796f7$export$958ce88767ff5cae = $24d609c8531796f7$var$TMP_NET_TRANSPORT;
var $24d609c8531796f7$export$5f5e19d7784bcab5 = $24d609c8531796f7$var$TMP_NET_PEER_IP;
var $24d609c8531796f7$export$83ab392b303d5cc4 = $24d609c8531796f7$var$TMP_NET_PEER_PORT;
var $24d609c8531796f7$export$869dc6e245da8a3c = $24d609c8531796f7$var$TMP_NET_PEER_NAME;
var $24d609c8531796f7$export$8363f5dd3626d1c7 = $24d609c8531796f7$var$TMP_NET_HOST_IP;
var $24d609c8531796f7$export$7c05177443136588 = $24d609c8531796f7$var$TMP_NET_HOST_PORT;
var $24d609c8531796f7$export$67ebd91e5927c9b6 = $24d609c8531796f7$var$TMP_NET_HOST_NAME;
var $24d609c8531796f7$export$b4399aff72c58221 = $24d609c8531796f7$var$TMP_NET_HOST_CONNECTION_TYPE;
var $24d609c8531796f7$export$29124138bf62c161 = $24d609c8531796f7$var$TMP_NET_HOST_CONNECTION_SUBTYPE;
var $24d609c8531796f7$export$a1a35234333f42fa = $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_NAME;
var $24d609c8531796f7$export$593e7f806b5bd9d0 = $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_MCC;
var $24d609c8531796f7$export$92c4882b0877ce0 = $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_MNC;
var $24d609c8531796f7$export$7158946157fdda52 = $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_ICC;
var $24d609c8531796f7$export$706484bff197aa2f = $24d609c8531796f7$var$TMP_PEER_SERVICE;
var $24d609c8531796f7$export$37fdcbb3cc34507a = $24d609c8531796f7$var$TMP_ENDUSER_ID;
var $24d609c8531796f7$export$7486a34c0c780913 = $24d609c8531796f7$var$TMP_ENDUSER_ROLE;
var $24d609c8531796f7$export$c531f20a7a107be = $24d609c8531796f7$var$TMP_ENDUSER_SCOPE;
var $24d609c8531796f7$export$96304c684b1fe5bd = $24d609c8531796f7$var$TMP_THREAD_ID;
var $24d609c8531796f7$export$b1c76a722c30a73e = $24d609c8531796f7$var$TMP_THREAD_NAME;
var $24d609c8531796f7$export$f5b0a970f81eb82 = $24d609c8531796f7$var$TMP_CODE_FUNCTION;
var $24d609c8531796f7$export$ebd9bc6b684ae79f = $24d609c8531796f7$var$TMP_CODE_NAMESPACE;
var $24d609c8531796f7$export$f5c7dbf024e089b1 = $24d609c8531796f7$var$TMP_CODE_FILEPATH;
var $24d609c8531796f7$export$9bc82da636767e36 = $24d609c8531796f7$var$TMP_CODE_LINENO;
var $24d609c8531796f7$export$5ec7d06d671a3fbe = $24d609c8531796f7$var$TMP_HTTP_METHOD;
var $24d609c8531796f7$export$2f4ef7e39c2be395 = $24d609c8531796f7$var$TMP_HTTP_URL;
var $24d609c8531796f7$export$5284fc3356124326 = $24d609c8531796f7$var$TMP_HTTP_TARGET;
var $24d609c8531796f7$export$547e24d3f59a53ea = $24d609c8531796f7$var$TMP_HTTP_HOST;
var $24d609c8531796f7$export$a2928efa45f0acf4 = $24d609c8531796f7$var$TMP_HTTP_SCHEME;
var $24d609c8531796f7$export$d381c7525d715413 = $24d609c8531796f7$var$TMP_HTTP_STATUS_CODE;
var $24d609c8531796f7$export$1e443919b8f6a42e = $24d609c8531796f7$var$TMP_HTTP_FLAVOR;
var $24d609c8531796f7$export$7472b18f42d2d02f = $24d609c8531796f7$var$TMP_HTTP_USER_AGENT;
var $24d609c8531796f7$export$616f2909238995e9 = $24d609c8531796f7$var$TMP_HTTP_REQUEST_CONTENT_LENGTH;
var $24d609c8531796f7$export$4352992cf528a286 = $24d609c8531796f7$var$TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;
var $24d609c8531796f7$export$58d4fbfe35e08be0 = $24d609c8531796f7$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH;
var $24d609c8531796f7$export$b9d3e41cd56c56cc = $24d609c8531796f7$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;
var $24d609c8531796f7$export$ae4c9cf5cd38f75e = $24d609c8531796f7$var$TMP_HTTP_SERVER_NAME;
var $24d609c8531796f7$export$391e30d1bcbfedd6 = $24d609c8531796f7$var$TMP_HTTP_ROUTE;
var $24d609c8531796f7$export$f21601c3f29048e9 = $24d609c8531796f7$var$TMP_HTTP_CLIENT_IP;
var $24d609c8531796f7$export$22c9c5cd37ccec8d = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TABLE_NAMES;
var $24d609c8531796f7$export$636d932d69359471 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;
var $24d609c8531796f7$export$79414a2a1b36e0e4 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;
var $24d609c8531796f7$export$a17bc449a5f10183 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;
var $24d609c8531796f7$export$6d8e225848319009 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;
var $24d609c8531796f7$export$2daa7ca667f19522 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_CONSISTENT_READ;
var $24d609c8531796f7$export$d04f1e16b6682958 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROJECTION;
var $24d609c8531796f7$export$9017e26d3dee82a7 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_LIMIT;
var $24d609c8531796f7$export$734476f2cddb4e = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;
var $24d609c8531796f7$export$6ffa6129be32f13f = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_INDEX_NAME;
var $24d609c8531796f7$export$e439ba599235e943 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SELECT;
var $24d609c8531796f7$export$691e052bf6ec1b50 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;
var $24d609c8531796f7$export$4a8114ba4973adf9 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;
var $24d609c8531796f7$export$3d3dcdb04b37b602 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;
var $24d609c8531796f7$export$a3ed03c10bfca049 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TABLE_COUNT;
var $24d609c8531796f7$export$70f2263412a5d6f8 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SCAN_FORWARD;
var $24d609c8531796f7$export$cc291bca867c839c = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SEGMENT;
var $24d609c8531796f7$export$2bd41520dd577767 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;
var $24d609c8531796f7$export$e3002f59defbb848 = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_COUNT;
var $24d609c8531796f7$export$338ee58c976503fa = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SCANNED_COUNT;
var $24d609c8531796f7$export$9ef2d520d3111ebb = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;
var $24d609c8531796f7$export$50eb8413f579535b = $24d609c8531796f7$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;
var $24d609c8531796f7$export$e907440d5c8aa7ea = $24d609c8531796f7$var$TMP_MESSAGING_SYSTEM;
var $24d609c8531796f7$export$331bf1abb96af02c = $24d609c8531796f7$var$TMP_MESSAGING_DESTINATION;
var $24d609c8531796f7$export$ca3944a0a0fdb278 = $24d609c8531796f7$var$TMP_MESSAGING_DESTINATION_KIND;
var $24d609c8531796f7$export$b1f595d071164a5c = $24d609c8531796f7$var$TMP_MESSAGING_TEMP_DESTINATION;
var $24d609c8531796f7$export$734e634f7ff28b65 = $24d609c8531796f7$var$TMP_MESSAGING_PROTOCOL;
var $24d609c8531796f7$export$62c96eec39d4f8fa = $24d609c8531796f7$var$TMP_MESSAGING_PROTOCOL_VERSION;
var $24d609c8531796f7$export$8185788dec47d17c = $24d609c8531796f7$var$TMP_MESSAGING_URL;
var $24d609c8531796f7$export$6465ca78c6aedebd = $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_ID;
var $24d609c8531796f7$export$9e29dbd41c4d02d5 = $24d609c8531796f7$var$TMP_MESSAGING_CONVERSATION_ID;
var $24d609c8531796f7$export$ded3a3185a1522d5 = $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;
var $24d609c8531796f7$export$c42edeca94088e4d = $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;
var $24d609c8531796f7$export$b0a29003262c7994 = $24d609c8531796f7$var$TMP_MESSAGING_OPERATION;
var $24d609c8531796f7$export$283c55d09fbdb92c = $24d609c8531796f7$var$TMP_MESSAGING_CONSUMER_ID;
var $24d609c8531796f7$export$78385ca43d0e8556 = $24d609c8531796f7$var$TMP_MESSAGING_RABBITMQ_ROUTING_KEY;
var $24d609c8531796f7$export$b6969aab3cf94e74 = $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_MESSAGE_KEY;
var $24d609c8531796f7$export$45eb738152aa5dd4 = $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_CONSUMER_GROUP;
var $24d609c8531796f7$export$bc66f788b071fbad = $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_CLIENT_ID;
var $24d609c8531796f7$export$ff4aad497ab5213e = $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_PARTITION;
var $24d609c8531796f7$export$256d25d7635b3a79 = $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_TOMBSTONE;
var $24d609c8531796f7$export$8b1a1f43d7106aea = $24d609c8531796f7$var$TMP_RPC_SYSTEM;
var $24d609c8531796f7$export$7eb60929eaa797de = $24d609c8531796f7$var$TMP_RPC_SERVICE;
var $24d609c8531796f7$export$c6d175d5e9b8105b = $24d609c8531796f7$var$TMP_RPC_METHOD;
var $24d609c8531796f7$export$ccc8405c8a911fb7 = $24d609c8531796f7$var$TMP_RPC_GRPC_STATUS_CODE;
var $24d609c8531796f7$export$ce0f2ec42ba79570 = $24d609c8531796f7$var$TMP_RPC_JSONRPC_VERSION;
var $24d609c8531796f7$export$2e981273bb2873ea = $24d609c8531796f7$var$TMP_RPC_JSONRPC_REQUEST_ID;
var $24d609c8531796f7$export$214058615970c3e4 = $24d609c8531796f7$var$TMP_RPC_JSONRPC_ERROR_CODE;
var $24d609c8531796f7$export$2ad4f2a86baa9b1e = $24d609c8531796f7$var$TMP_RPC_JSONRPC_ERROR_MESSAGE;
var $24d609c8531796f7$export$e6c57355a990f7ee = $24d609c8531796f7$var$TMP_MESSAGE_TYPE;
var $24d609c8531796f7$export$ba8e66ad5476d59f = $24d609c8531796f7$var$TMP_MESSAGE_ID;
var $24d609c8531796f7$export$16f3d59837418b1f = $24d609c8531796f7$var$TMP_MESSAGE_COMPRESSED_SIZE;
var $24d609c8531796f7$export$4b889081ab98b61 = $24d609c8531796f7$var$TMP_MESSAGE_UNCOMPRESSED_SIZE;
var $24d609c8531796f7$export$949e366c5c69d2e9 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_AWS_LAMBDA_INVOKED_ARN,
    $24d609c8531796f7$var$TMP_DB_SYSTEM,
    $24d609c8531796f7$var$TMP_DB_CONNECTION_STRING,
    $24d609c8531796f7$var$TMP_DB_USER,
    $24d609c8531796f7$var$TMP_DB_JDBC_DRIVER_CLASSNAME,
    $24d609c8531796f7$var$TMP_DB_NAME,
    $24d609c8531796f7$var$TMP_DB_STATEMENT,
    $24d609c8531796f7$var$TMP_DB_OPERATION,
    $24d609c8531796f7$var$TMP_DB_MSSQL_INSTANCE_NAME,
    $24d609c8531796f7$var$TMP_DB_CASSANDRA_KEYSPACE,
    $24d609c8531796f7$var$TMP_DB_CASSANDRA_PAGE_SIZE,
    $24d609c8531796f7$var$TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,
    $24d609c8531796f7$var$TMP_DB_CASSANDRA_TABLE,
    $24d609c8531796f7$var$TMP_DB_CASSANDRA_IDEMPOTENCE,
    $24d609c8531796f7$var$TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,
    $24d609c8531796f7$var$TMP_DB_CASSANDRA_COORDINATOR_ID,
    $24d609c8531796f7$var$TMP_DB_CASSANDRA_COORDINATOR_DC,
    $24d609c8531796f7$var$TMP_DB_HBASE_NAMESPACE,
    $24d609c8531796f7$var$TMP_DB_REDIS_DATABASE_INDEX,
    $24d609c8531796f7$var$TMP_DB_MONGODB_COLLECTION,
    $24d609c8531796f7$var$TMP_DB_SQL_TABLE,
    $24d609c8531796f7$var$TMP_EXCEPTION_TYPE,
    $24d609c8531796f7$var$TMP_EXCEPTION_MESSAGE,
    $24d609c8531796f7$var$TMP_EXCEPTION_STACKTRACE,
    $24d609c8531796f7$var$TMP_EXCEPTION_ESCAPED,
    $24d609c8531796f7$var$TMP_FAAS_TRIGGER,
    $24d609c8531796f7$var$TMP_FAAS_EXECUTION,
    $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_COLLECTION,
    $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_OPERATION,
    $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_TIME,
    $24d609c8531796f7$var$TMP_FAAS_DOCUMENT_NAME,
    $24d609c8531796f7$var$TMP_FAAS_TIME,
    $24d609c8531796f7$var$TMP_FAAS_CRON,
    $24d609c8531796f7$var$TMP_FAAS_COLDSTART,
    $24d609c8531796f7$var$TMP_FAAS_INVOKED_NAME,
    $24d609c8531796f7$var$TMP_FAAS_INVOKED_PROVIDER,
    $24d609c8531796f7$var$TMP_FAAS_INVOKED_REGION,
    $24d609c8531796f7$var$TMP_NET_TRANSPORT,
    $24d609c8531796f7$var$TMP_NET_PEER_IP,
    $24d609c8531796f7$var$TMP_NET_PEER_PORT,
    $24d609c8531796f7$var$TMP_NET_PEER_NAME,
    $24d609c8531796f7$var$TMP_NET_HOST_IP,
    $24d609c8531796f7$var$TMP_NET_HOST_PORT,
    $24d609c8531796f7$var$TMP_NET_HOST_NAME,
    $24d609c8531796f7$var$TMP_NET_HOST_CONNECTION_TYPE,
    $24d609c8531796f7$var$TMP_NET_HOST_CONNECTION_SUBTYPE,
    $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_NAME,
    $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_MCC,
    $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_MNC,
    $24d609c8531796f7$var$TMP_NET_HOST_CARRIER_ICC,
    $24d609c8531796f7$var$TMP_PEER_SERVICE,
    $24d609c8531796f7$var$TMP_ENDUSER_ID,
    $24d609c8531796f7$var$TMP_ENDUSER_ROLE,
    $24d609c8531796f7$var$TMP_ENDUSER_SCOPE,
    $24d609c8531796f7$var$TMP_THREAD_ID,
    $24d609c8531796f7$var$TMP_THREAD_NAME,
    $24d609c8531796f7$var$TMP_CODE_FUNCTION,
    $24d609c8531796f7$var$TMP_CODE_NAMESPACE,
    $24d609c8531796f7$var$TMP_CODE_FILEPATH,
    $24d609c8531796f7$var$TMP_CODE_LINENO,
    $24d609c8531796f7$var$TMP_HTTP_METHOD,
    $24d609c8531796f7$var$TMP_HTTP_URL,
    $24d609c8531796f7$var$TMP_HTTP_TARGET,
    $24d609c8531796f7$var$TMP_HTTP_HOST,
    $24d609c8531796f7$var$TMP_HTTP_SCHEME,
    $24d609c8531796f7$var$TMP_HTTP_STATUS_CODE,
    $24d609c8531796f7$var$TMP_HTTP_FLAVOR,
    $24d609c8531796f7$var$TMP_HTTP_USER_AGENT,
    $24d609c8531796f7$var$TMP_HTTP_REQUEST_CONTENT_LENGTH,
    $24d609c8531796f7$var$TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,
    $24d609c8531796f7$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH,
    $24d609c8531796f7$var$TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,
    $24d609c8531796f7$var$TMP_HTTP_SERVER_NAME,
    $24d609c8531796f7$var$TMP_HTTP_ROUTE,
    $24d609c8531796f7$var$TMP_HTTP_CLIENT_IP,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TABLE_NAMES,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_CONSISTENT_READ,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_PROJECTION,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_LIMIT,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_INDEX_NAME,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SELECT,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TABLE_COUNT,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SCAN_FORWARD,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SEGMENT,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_COUNT,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_SCANNED_COUNT,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,
    $24d609c8531796f7$var$TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,
    $24d609c8531796f7$var$TMP_MESSAGING_SYSTEM,
    $24d609c8531796f7$var$TMP_MESSAGING_DESTINATION,
    $24d609c8531796f7$var$TMP_MESSAGING_DESTINATION_KIND,
    $24d609c8531796f7$var$TMP_MESSAGING_TEMP_DESTINATION,
    $24d609c8531796f7$var$TMP_MESSAGING_PROTOCOL,
    $24d609c8531796f7$var$TMP_MESSAGING_PROTOCOL_VERSION,
    $24d609c8531796f7$var$TMP_MESSAGING_URL,
    $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_ID,
    $24d609c8531796f7$var$TMP_MESSAGING_CONVERSATION_ID,
    $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,
    $24d609c8531796f7$var$TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,
    $24d609c8531796f7$var$TMP_MESSAGING_OPERATION,
    $24d609c8531796f7$var$TMP_MESSAGING_CONSUMER_ID,
    $24d609c8531796f7$var$TMP_MESSAGING_RABBITMQ_ROUTING_KEY,
    $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_MESSAGE_KEY,
    $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_CONSUMER_GROUP,
    $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_CLIENT_ID,
    $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_PARTITION,
    $24d609c8531796f7$var$TMP_MESSAGING_KAFKA_TOMBSTONE,
    $24d609c8531796f7$var$TMP_RPC_SYSTEM,
    $24d609c8531796f7$var$TMP_RPC_SERVICE,
    $24d609c8531796f7$var$TMP_RPC_METHOD,
    $24d609c8531796f7$var$TMP_RPC_GRPC_STATUS_CODE,
    $24d609c8531796f7$var$TMP_RPC_JSONRPC_VERSION,
    $24d609c8531796f7$var$TMP_RPC_JSONRPC_REQUEST_ID,
    $24d609c8531796f7$var$TMP_RPC_JSONRPC_ERROR_CODE,
    $24d609c8531796f7$var$TMP_RPC_JSONRPC_ERROR_MESSAGE,
    $24d609c8531796f7$var$TMP_MESSAGE_TYPE,
    $24d609c8531796f7$var$TMP_MESSAGE_ID,
    $24d609c8531796f7$var$TMP_MESSAGE_COMPRESSED_SIZE,
    $24d609c8531796f7$var$TMP_MESSAGE_UNCOMPRESSED_SIZE
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for DbSystemValues enum definition
 *
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_OTHER_SQL = "other_sql";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MSSQL = "mssql";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MYSQL = "mysql";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ORACLE = "oracle";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DB2 = "db2";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_POSTGRESQL = "postgresql";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_REDSHIFT = "redshift";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HIVE = "hive";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CLOUDSCAPE = "cloudscape";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HSQLDB = "hsqldb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_PROGRESS = "progress";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MAXDB = "maxdb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HANADB = "hanadb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INGRES = "ingres";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FIRSTSQL = "firstsql";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_EDB = "edb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CACHE = "cache";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ADABAS = "adabas";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FIREBIRD = "firebird";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DERBY = "derby";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FILEMAKER = "filemaker";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INFORMIX = "informix";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INSTANTDB = "instantdb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INTERBASE = "interbase";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MARIADB = "mariadb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_NETEZZA = "netezza";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_PERVASIVE = "pervasive";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_POINTBASE = "pointbase";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_SQLITE = "sqlite";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_SYBASE = "sybase";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_TERADATA = "teradata";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_VERTICA = "vertica";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_H2 = "h2";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COLDFUSION = "coldfusion";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CASSANDRA = "cassandra";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HBASE = "hbase";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MONGODB = "mongodb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_REDIS = "redis";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COUCHBASE = "couchbase";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COUCHDB = "couchdb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COSMOSDB = "cosmosdb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DYNAMODB = "dynamodb";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_NEO4J = "neo4j";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_GEODE = "geode";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ELASTICSEARCH = "elasticsearch";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MEMCACHED = "memcached";
var $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COCKROACHDB = "cockroachdb";
var $24d609c8531796f7$export$a8dac6c506518069 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_OTHER_SQL;
var $24d609c8531796f7$export$ea0447329a58abf0 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MSSQL;
var $24d609c8531796f7$export$f10ddff4d378463e = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MYSQL;
var $24d609c8531796f7$export$1187a6d6f356ed08 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ORACLE;
var $24d609c8531796f7$export$c99652dcdf96b994 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DB2;
var $24d609c8531796f7$export$fa83a16930a97d3b = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_POSTGRESQL;
var $24d609c8531796f7$export$502f4a0041906d71 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_REDSHIFT;
var $24d609c8531796f7$export$9ca2599ef62580aa = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HIVE;
var $24d609c8531796f7$export$910728553bdc4f2 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CLOUDSCAPE;
var $24d609c8531796f7$export$927252a026981dbc = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HSQLDB;
var $24d609c8531796f7$export$1d4496dd2fb6e5bf = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_PROGRESS;
var $24d609c8531796f7$export$eeac513ec469c0cd = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MAXDB;
var $24d609c8531796f7$export$accdcd0fb0e8e3f2 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HANADB;
var $24d609c8531796f7$export$3dcc190bf239314c = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INGRES;
var $24d609c8531796f7$export$ff4c8094bbcf5fa7 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FIRSTSQL;
var $24d609c8531796f7$export$3277e5141d071eb2 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_EDB;
var $24d609c8531796f7$export$4a79cae41e08a0dd = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CACHE;
var $24d609c8531796f7$export$cf3b85811d34c73b = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ADABAS;
var $24d609c8531796f7$export$48eca9ca7c84a995 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FIREBIRD;
var $24d609c8531796f7$export$bc5d7654a3e6dc01 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DERBY;
var $24d609c8531796f7$export$422940b84b884f99 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FILEMAKER;
var $24d609c8531796f7$export$a49658a36841921 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INFORMIX;
var $24d609c8531796f7$export$dd1bda064bc12f55 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INSTANTDB;
var $24d609c8531796f7$export$3845f6f803a923b1 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INTERBASE;
var $24d609c8531796f7$export$1b74fece6a0567e8 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MARIADB;
var $24d609c8531796f7$export$8fc04abe03bce8d5 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_NETEZZA;
var $24d609c8531796f7$export$f9406b4f00b760b4 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_PERVASIVE;
var $24d609c8531796f7$export$5bc787da6daf8e9c = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_POINTBASE;
var $24d609c8531796f7$export$92e0362f5610565 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_SQLITE;
var $24d609c8531796f7$export$ec03fbd64421b165 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_SYBASE;
var $24d609c8531796f7$export$486b763280f7312f = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_TERADATA;
var $24d609c8531796f7$export$424b3c529411045a = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_VERTICA;
var $24d609c8531796f7$export$5b4c7807bd4e54d0 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_H2;
var $24d609c8531796f7$export$998c3a6fdfbcf7df = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COLDFUSION;
var $24d609c8531796f7$export$dc18027519a667a3 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CASSANDRA;
var $24d609c8531796f7$export$a3cbb4bc103ae284 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HBASE;
var $24d609c8531796f7$export$b1615e3bbcf0dea5 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MONGODB;
var $24d609c8531796f7$export$e236e209844f1272 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_REDIS;
var $24d609c8531796f7$export$a3861a07874f1889 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COUCHBASE;
var $24d609c8531796f7$export$f84afd1ccf7f622f = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COUCHDB;
var $24d609c8531796f7$export$408510df30ac38f0 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COSMOSDB;
var $24d609c8531796f7$export$f704654eab77c7c7 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DYNAMODB;
var $24d609c8531796f7$export$5eea4c4dfe97cf90 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_NEO4J;
var $24d609c8531796f7$export$f6740c7ce8d8a59 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_GEODE;
var $24d609c8531796f7$export$25d0355c3ecc82d5 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ELASTICSEARCH;
var $24d609c8531796f7$export$3566ede46e0a8a41 = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MEMCACHED;
var $24d609c8531796f7$export$2844c6dfa3d1660a = $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COCKROACHDB;
var $24d609c8531796f7$export$53ce5c6571db6866 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_OTHER_SQL,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MSSQL,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MYSQL,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ORACLE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DB2,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_POSTGRESQL,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_REDSHIFT,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HIVE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CLOUDSCAPE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HSQLDB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_PROGRESS,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MAXDB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HANADB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INGRES,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FIRSTSQL,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_EDB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CACHE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ADABAS,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FIREBIRD,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DERBY,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_FILEMAKER,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INFORMIX,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INSTANTDB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_INTERBASE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MARIADB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_NETEZZA,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_PERVASIVE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_POINTBASE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_SQLITE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_SYBASE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_TERADATA,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_VERTICA,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_H2,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COLDFUSION,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_CASSANDRA,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_HBASE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MONGODB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_REDIS,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COUCHBASE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COUCHDB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COSMOSDB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_DYNAMODB,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_NEO4J,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_GEODE,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_ELASTICSEARCH,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_MEMCACHED,
    $24d609c8531796f7$var$TMP_DBSYSTEMVALUES_COCKROACHDB
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for DbCassandraConsistencyLevelValues enum definition
 *
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = "all";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = "each_quorum";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = "quorum";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = "local_quorum";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = "one";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = "two";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = "three";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = "local_one";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = "any";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = "serial";
var $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = "local_serial";
var $24d609c8531796f7$export$8c965dbb4c30de17 = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;
var $24d609c8531796f7$export$28269849572f223a = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;
var $24d609c8531796f7$export$c31be6925d18faf4 = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;
var $24d609c8531796f7$export$dd2d046c43b425dc = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;
var $24d609c8531796f7$export$d567e6085f609657 = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;
var $24d609c8531796f7$export$2638f2ef2b3637ea = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;
var $24d609c8531796f7$export$444dff27642c23a3 = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;
var $24d609c8531796f7$export$be0e7a9b9b7460eb = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;
var $24d609c8531796f7$export$9cda430306f12b08 = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;
var $24d609c8531796f7$export$79a04d8aacdacbe9 = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;
var $24d609c8531796f7$export$42bf18043dacb777 = $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;
var $24d609c8531796f7$export$a6eeaa6fe6488373 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,
    $24d609c8531796f7$var$TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasTriggerValues enum definition
 *
 * Type of the trigger on which the function is executed.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_DATASOURCE = "datasource";
var $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_HTTP = "http";
var $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_PUBSUB = "pubsub";
var $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_TIMER = "timer";
var $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_OTHER = "other";
var $24d609c8531796f7$export$a116a6c98ad82a77 = $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_DATASOURCE;
var $24d609c8531796f7$export$1b8130a1d4406030 = $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_HTTP;
var $24d609c8531796f7$export$2c3c25968f77e7b3 = $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_PUBSUB;
var $24d609c8531796f7$export$f1adafe5047573a = $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_TIMER;
var $24d609c8531796f7$export$2aa5343c84c7d0a6 = $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_OTHER;
var $24d609c8531796f7$export$8bd13b593ef4858d = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_DATASOURCE,
    $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_HTTP,
    $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_PUBSUB,
    $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_TIMER,
    $24d609c8531796f7$var$TMP_FAASTRIGGERVALUES_OTHER
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasDocumentOperationValues enum definition
 *
 * Describes the type of the operation that was performed on the data.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = "insert";
var $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = "edit";
var $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = "delete";
var $24d609c8531796f7$export$58594a32d0721c01 = $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;
var $24d609c8531796f7$export$fb5981e11be92c91 = $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;
var $24d609c8531796f7$export$8617289d67ca4e43 = $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;
var $24d609c8531796f7$export$d6463783e5bb27f9 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,
    $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,
    $24d609c8531796f7$var$TMP_FAASDOCUMENTOPERATIONVALUES_DELETE
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasInvokedProviderValues enum definition
 *
 * The cloud provider of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = "alibaba_cloud";
var $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_AWS = "aws";
var $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_AZURE = "azure";
var $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_GCP = "gcp";
var $24d609c8531796f7$export$a7a256059bf89bd1 = $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;
var $24d609c8531796f7$export$8716f61e9f3c2aeb = $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_AWS;
var $24d609c8531796f7$export$ec924dafe3d951e3 = $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_AZURE;
var $24d609c8531796f7$export$40370ddcd5c5f6d7 = $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_GCP;
var $24d609c8531796f7$export$668b545a1de0448 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,
    $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_AWS,
    $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_AZURE,
    $24d609c8531796f7$var$TMP_FAASINVOKEDPROVIDERVALUES_GCP
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetTransportValues enum definition
 *
 * Transport protocol used. See note below.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP_TCP = "ip_tcp";
var $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP_UDP = "ip_udp";
var $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP = "ip";
var $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_UNIX = "unix";
var $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_PIPE = "pipe";
var $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_INPROC = "inproc";
var $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_OTHER = "other";
var $24d609c8531796f7$export$98ad64057f1fab9f = $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP_TCP;
var $24d609c8531796f7$export$efc9b6ce6290a881 = $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP_UDP;
var $24d609c8531796f7$export$f3aeea475f2d61eb = $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP;
var $24d609c8531796f7$export$2ff43587ce3a6428 = $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_UNIX;
var $24d609c8531796f7$export$8a59379768b7dcc2 = $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_PIPE;
var $24d609c8531796f7$export$24d541ca01c48083 = $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_INPROC;
var $24d609c8531796f7$export$61986d2ea3f68e4 = $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_OTHER;
var $24d609c8531796f7$export$3818cf83a3542239 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP_TCP,
    $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP_UDP,
    $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_IP,
    $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_UNIX,
    $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_PIPE,
    $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_INPROC,
    $24d609c8531796f7$var$TMP_NETTRANSPORTVALUES_OTHER
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetHostConnectionTypeValues enum definition
 *
 * The internet connection type currently being used by the host.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = "wifi";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = "wired";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = "cell";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = "unavailable";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = "unknown";
var $24d609c8531796f7$export$9f02ba1730e68d64 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;
var $24d609c8531796f7$export$ff976cfa645183ea = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;
var $24d609c8531796f7$export$9dac5d5db0d7302d = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;
var $24d609c8531796f7$export$856320690b0a4ede = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;
var $24d609c8531796f7$export$b93b5033f8372e2b = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;
var $24d609c8531796f7$export$a5c9a789b3c34827 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetHostConnectionSubtypeValues enum definition
 *
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = "gprs";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = "edge";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = "umts";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = "cdma";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = "evdo_0";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = "evdo_a";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = "cdma2000_1xrtt";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = "hsdpa";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = "hsupa";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = "hspa";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = "iden";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = "evdo_b";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = "lte";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = "ehrpd";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = "hspap";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = "gsm";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = "td_scdma";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = "iwlan";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = "nr";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = "nrnsa";
var $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = "lte_ca";
var $24d609c8531796f7$export$b3928d079bcf0650 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;
var $24d609c8531796f7$export$869e5d9e2d7d058f = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;
var $24d609c8531796f7$export$4fb8dba98d516457 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;
var $24d609c8531796f7$export$4c80eef388ebaccf = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;
var $24d609c8531796f7$export$fa867825f37e79db = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;
var $24d609c8531796f7$export$27a67e3163ce1ca1 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;
var $24d609c8531796f7$export$64eea596575c6ac7 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;
var $24d609c8531796f7$export$ac76a80a244a93c4 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;
var $24d609c8531796f7$export$1f6c75de7c7b16c8 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;
var $24d609c8531796f7$export$546b89c4781a174b = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;
var $24d609c8531796f7$export$76ada84046ded2cf = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;
var $24d609c8531796f7$export$cbc44b2ef04c23f2 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;
var $24d609c8531796f7$export$7df810136272d3ca = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;
var $24d609c8531796f7$export$6d0261a99bb34b75 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;
var $24d609c8531796f7$export$f5609166f18e0da4 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;
var $24d609c8531796f7$export$bb1d1d2dc1514ff9 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;
var $24d609c8531796f7$export$f39e3589dec1b486 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;
var $24d609c8531796f7$export$2ea90d5cadafeb66 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;
var $24d609c8531796f7$export$dacf20f714c7dfe3 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;
var $24d609c8531796f7$export$3057d75e98c27a82 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;
var $24d609c8531796f7$export$ac7da250598a79b7 = $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;
var $24d609c8531796f7$export$2f6476d8343c332 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,
    $24d609c8531796f7$var$TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for HttpFlavorValues enum definition
 *
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_1_0 = "1.0";
var $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_1_1 = "1.1";
var $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_2_0 = "2.0";
var $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_SPDY = "SPDY";
var $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_QUIC = "QUIC";
var $24d609c8531796f7$export$a5eaf604e08c3278 = $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_1_0;
var $24d609c8531796f7$export$90c81a0909f2ae50 = $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_1_1;
var $24d609c8531796f7$export$76fedb424c637ab1 = $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_2_0;
var $24d609c8531796f7$export$64a9fa17294d693a = $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_SPDY;
var $24d609c8531796f7$export$71f9f90e022dd018 = $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_QUIC;
var $24d609c8531796f7$export$98fa65d23b3ad768 = {
    HTTP_1_0: $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_1_0,
    HTTP_1_1: $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_1_1,
    HTTP_2_0: $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_HTTP_2_0,
    SPDY: $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_SPDY,
    QUIC: $24d609c8531796f7$var$TMP_HTTPFLAVORVALUES_QUIC
};
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessagingDestinationKindValues enum definition
 *
 * The kind of message destination.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = "queue";
var $24d609c8531796f7$var$TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = "topic";
var $24d609c8531796f7$export$3c00656cec2b971b = $24d609c8531796f7$var$TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;
var $24d609c8531796f7$export$5b3434288d57e9db = $24d609c8531796f7$var$TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;
var $24d609c8531796f7$export$c97cf0959c06f2eb = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,
    $24d609c8531796f7$var$TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessagingOperationValues enum definition
 *
 * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_MESSAGINGOPERATIONVALUES_RECEIVE = "receive";
var $24d609c8531796f7$var$TMP_MESSAGINGOPERATIONVALUES_PROCESS = "process";
var $24d609c8531796f7$export$84220b734749f5b0 = $24d609c8531796f7$var$TMP_MESSAGINGOPERATIONVALUES_RECEIVE;
var $24d609c8531796f7$export$e4e81e41cac54813 = $24d609c8531796f7$var$TMP_MESSAGINGOPERATIONVALUES_PROCESS;
var $24d609c8531796f7$export$4a89c511599cd2ec = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_MESSAGINGOPERATIONVALUES_RECEIVE,
    $24d609c8531796f7$var$TMP_MESSAGINGOPERATIONVALUES_PROCESS
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for RpcGrpcStatusCodeValues enum definition
 *
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;
var $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;
var $24d609c8531796f7$export$949d8f2733439fe0 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_OK;
var $24d609c8531796f7$export$3ab4e217bae3a065 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;
var $24d609c8531796f7$export$82114f8ba92008f1 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;
var $24d609c8531796f7$export$4747f09ec996ed1a = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;
var $24d609c8531796f7$export$2f64e796efee7806 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;
var $24d609c8531796f7$export$c2b894d36cd1d993 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;
var $24d609c8531796f7$export$e675f9346907cdbf = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;
var $24d609c8531796f7$export$ee7173f54f1f7e52 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;
var $24d609c8531796f7$export$a2e4b937aa6d8799 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;
var $24d609c8531796f7$export$ef9ed8d6d4e5cd73 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;
var $24d609c8531796f7$export$5186c1c5a9145ea6 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;
var $24d609c8531796f7$export$e67583738364c597 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;
var $24d609c8531796f7$export$90f86b1e23bb678f = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;
var $24d609c8531796f7$export$133efbe81a3e3b7a = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;
var $24d609c8531796f7$export$8d87e3aaaab1d8c1 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;
var $24d609c8531796f7$export$2acca698ff2f1632 = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;
var $24d609c8531796f7$export$fc7c44549e950bf = $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;
var $24d609c8531796f7$export$759a06c32b696c70 = {
    OK: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_OK,
    CANCELLED: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,
    UNKNOWN: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,
    INVALID_ARGUMENT: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,
    DEADLINE_EXCEEDED: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,
    NOT_FOUND: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,
    ALREADY_EXISTS: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,
    PERMISSION_DENIED: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,
    RESOURCE_EXHAUSTED: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,
    FAILED_PRECONDITION: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,
    ABORTED: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,
    OUT_OF_RANGE: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,
    UNIMPLEMENTED: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,
    INTERNAL: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,
    UNAVAILABLE: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,
    DATA_LOSS: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,
    UNAUTHENTICATED: $24d609c8531796f7$var$TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED
};
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessageTypeValues enum definition
 *
 * Whether this is a received or sent message.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $24d609c8531796f7$var$TMP_MESSAGETYPEVALUES_SENT = "SENT";
var $24d609c8531796f7$var$TMP_MESSAGETYPEVALUES_RECEIVED = "RECEIVED";
var $24d609c8531796f7$export$10fb24096e4ea8a3 = $24d609c8531796f7$var$TMP_MESSAGETYPEVALUES_SENT;
var $24d609c8531796f7$export$e520006d57a4745f = $24d609c8531796f7$var$TMP_MESSAGETYPEVALUES_RECEIVED;
var $24d609c8531796f7$export$c83b17f5976c727c = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $24d609c8531796f7$var$TMP_MESSAGETYPEVALUES_SENT,
    $24d609c8531796f7$var$TMP_MESSAGETYPEVALUES_RECEIVED
]);

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2
//----------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------
// Constant values for SemanticResourceAttributes
//----------------------------------------------------------------------------------------------------------
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3ccf1b927a8c1e8$var$TMP_CLOUD_PROVIDER = "cloud.provider";
var $a3ccf1b927a8c1e8$var$TMP_CLOUD_ACCOUNT_ID = "cloud.account.id";
var $a3ccf1b927a8c1e8$var$TMP_CLOUD_REGION = "cloud.region";
var $a3ccf1b927a8c1e8$var$TMP_CLOUD_AVAILABILITY_ZONE = "cloud.availability_zone";
var $a3ccf1b927a8c1e8$var$TMP_CLOUD_PLATFORM = "cloud.platform";
var $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_CONTAINER_ARN = "aws.ecs.container.arn";
var $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_CLUSTER_ARN = "aws.ecs.cluster.arn";
var $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_LAUNCHTYPE = "aws.ecs.launchtype";
var $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_ARN = "aws.ecs.task.arn";
var $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_FAMILY = "aws.ecs.task.family";
var $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_REVISION = "aws.ecs.task.revision";
var $a3ccf1b927a8c1e8$var$TMP_AWS_EKS_CLUSTER_ARN = "aws.eks.cluster.arn";
var $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_GROUP_NAMES = "aws.log.group.names";
var $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_GROUP_ARNS = "aws.log.group.arns";
var $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_STREAM_NAMES = "aws.log.stream.names";
var $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_STREAM_ARNS = "aws.log.stream.arns";
var $a3ccf1b927a8c1e8$var$TMP_CONTAINER_NAME = "container.name";
var $a3ccf1b927a8c1e8$var$TMP_CONTAINER_ID = "container.id";
var $a3ccf1b927a8c1e8$var$TMP_CONTAINER_RUNTIME = "container.runtime";
var $a3ccf1b927a8c1e8$var$TMP_CONTAINER_IMAGE_NAME = "container.image.name";
var $a3ccf1b927a8c1e8$var$TMP_CONTAINER_IMAGE_TAG = "container.image.tag";
var $a3ccf1b927a8c1e8$var$TMP_DEPLOYMENT_ENVIRONMENT = "deployment.environment";
var $a3ccf1b927a8c1e8$var$TMP_DEVICE_ID = "device.id";
var $a3ccf1b927a8c1e8$var$TMP_DEVICE_MODEL_IDENTIFIER = "device.model.identifier";
var $a3ccf1b927a8c1e8$var$TMP_DEVICE_MODEL_NAME = "device.model.name";
var $a3ccf1b927a8c1e8$var$TMP_FAAS_NAME = "faas.name";
var $a3ccf1b927a8c1e8$var$TMP_FAAS_ID = "faas.id";
var $a3ccf1b927a8c1e8$var$TMP_FAAS_VERSION = "faas.version";
var $a3ccf1b927a8c1e8$var$TMP_FAAS_INSTANCE = "faas.instance";
var $a3ccf1b927a8c1e8$var$TMP_FAAS_MAX_MEMORY = "faas.max_memory";
var $a3ccf1b927a8c1e8$var$TMP_HOST_ID = "host.id";
var $a3ccf1b927a8c1e8$var$TMP_HOST_NAME = "host.name";
var $a3ccf1b927a8c1e8$var$TMP_HOST_TYPE = "host.type";
var $a3ccf1b927a8c1e8$var$TMP_HOST_ARCH = "host.arch";
var $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_NAME = "host.image.name";
var $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_ID = "host.image.id";
var $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_VERSION = "host.image.version";
var $a3ccf1b927a8c1e8$var$TMP_K8S_CLUSTER_NAME = "k8s.cluster.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_NODE_NAME = "k8s.node.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_NODE_UID = "k8s.node.uid";
var $a3ccf1b927a8c1e8$var$TMP_K8S_NAMESPACE_NAME = "k8s.namespace.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_POD_UID = "k8s.pod.uid";
var $a3ccf1b927a8c1e8$var$TMP_K8S_POD_NAME = "k8s.pod.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_CONTAINER_NAME = "k8s.container.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_REPLICASET_UID = "k8s.replicaset.uid";
var $a3ccf1b927a8c1e8$var$TMP_K8S_REPLICASET_NAME = "k8s.replicaset.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_DEPLOYMENT_UID = "k8s.deployment.uid";
var $a3ccf1b927a8c1e8$var$TMP_K8S_DEPLOYMENT_NAME = "k8s.deployment.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_STATEFULSET_UID = "k8s.statefulset.uid";
var $a3ccf1b927a8c1e8$var$TMP_K8S_STATEFULSET_NAME = "k8s.statefulset.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_DAEMONSET_UID = "k8s.daemonset.uid";
var $a3ccf1b927a8c1e8$var$TMP_K8S_DAEMONSET_NAME = "k8s.daemonset.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_JOB_UID = "k8s.job.uid";
var $a3ccf1b927a8c1e8$var$TMP_K8S_JOB_NAME = "k8s.job.name";
var $a3ccf1b927a8c1e8$var$TMP_K8S_CRONJOB_UID = "k8s.cronjob.uid";
var $a3ccf1b927a8c1e8$var$TMP_K8S_CRONJOB_NAME = "k8s.cronjob.name";
var $a3ccf1b927a8c1e8$var$TMP_OS_TYPE = "os.type";
var $a3ccf1b927a8c1e8$var$TMP_OS_DESCRIPTION = "os.description";
var $a3ccf1b927a8c1e8$var$TMP_OS_NAME = "os.name";
var $a3ccf1b927a8c1e8$var$TMP_OS_VERSION = "os.version";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_PID = "process.pid";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_EXECUTABLE_NAME = "process.executable.name";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_EXECUTABLE_PATH = "process.executable.path";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND = "process.command";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND_LINE = "process.command_line";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND_ARGS = "process.command_args";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_OWNER = "process.owner";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_NAME = "process.runtime.name";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_VERSION = "process.runtime.version";
var $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_DESCRIPTION = "process.runtime.description";
var $a3ccf1b927a8c1e8$var$TMP_SERVICE_NAME = "service.name";
var $a3ccf1b927a8c1e8$var$TMP_SERVICE_NAMESPACE = "service.namespace";
var $a3ccf1b927a8c1e8$var$TMP_SERVICE_INSTANCE_ID = "service.instance.id";
var $a3ccf1b927a8c1e8$var$TMP_SERVICE_VERSION = "service.version";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_NAME = "telemetry.sdk.name";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_LANGUAGE = "telemetry.sdk.language";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_VERSION = "telemetry.sdk.version";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_AUTO_VERSION = "telemetry.auto.version";
var $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_NAME = "webengine.name";
var $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_VERSION = "webengine.version";
var $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_DESCRIPTION = "webengine.description";
var $a3ccf1b927a8c1e8$export$9fa486cd651f5f18 = $a3ccf1b927a8c1e8$var$TMP_CLOUD_PROVIDER;
var $a3ccf1b927a8c1e8$export$3b9e160fb5fd0b48 = $a3ccf1b927a8c1e8$var$TMP_CLOUD_ACCOUNT_ID;
var $a3ccf1b927a8c1e8$export$7dda4a2b7e6f2925 = $a3ccf1b927a8c1e8$var$TMP_CLOUD_REGION;
var $a3ccf1b927a8c1e8$export$ba02b007970def42 = $a3ccf1b927a8c1e8$var$TMP_CLOUD_AVAILABILITY_ZONE;
var $a3ccf1b927a8c1e8$export$112df106e7dd2eda = $a3ccf1b927a8c1e8$var$TMP_CLOUD_PLATFORM;
var $a3ccf1b927a8c1e8$export$a43adfce130205e = $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_CONTAINER_ARN;
var $a3ccf1b927a8c1e8$export$2ba3c01be08dc7b1 = $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_CLUSTER_ARN;
var $a3ccf1b927a8c1e8$export$323329f2ad65b2aa = $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_LAUNCHTYPE;
var $a3ccf1b927a8c1e8$export$5275732a76e56248 = $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_ARN;
var $a3ccf1b927a8c1e8$export$fb3f0b7a7be1babd = $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_FAMILY;
var $a3ccf1b927a8c1e8$export$3ed6f78d5dfa8242 = $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_REVISION;
var $a3ccf1b927a8c1e8$export$a7708dae05d391dc = $a3ccf1b927a8c1e8$var$TMP_AWS_EKS_CLUSTER_ARN;
var $a3ccf1b927a8c1e8$export$bf434df1f3c89b1 = $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_GROUP_NAMES;
var $a3ccf1b927a8c1e8$export$c522b98ccd83a439 = $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_GROUP_ARNS;
var $a3ccf1b927a8c1e8$export$40794b06cac6b1bc = $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_STREAM_NAMES;
var $a3ccf1b927a8c1e8$export$c9f081f4b744b01b = $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_STREAM_ARNS;
var $a3ccf1b927a8c1e8$export$3e6fef409a60fc1e = $a3ccf1b927a8c1e8$var$TMP_CONTAINER_NAME;
var $a3ccf1b927a8c1e8$export$4d0381aa96fe1c3b = $a3ccf1b927a8c1e8$var$TMP_CONTAINER_ID;
var $a3ccf1b927a8c1e8$export$8806c0adf7bb0584 = $a3ccf1b927a8c1e8$var$TMP_CONTAINER_RUNTIME;
var $a3ccf1b927a8c1e8$export$44771c6519c06259 = $a3ccf1b927a8c1e8$var$TMP_CONTAINER_IMAGE_NAME;
var $a3ccf1b927a8c1e8$export$9f5798300d33c86b = $a3ccf1b927a8c1e8$var$TMP_CONTAINER_IMAGE_TAG;
var $a3ccf1b927a8c1e8$export$4783aaf4e8f7afa0 = $a3ccf1b927a8c1e8$var$TMP_DEPLOYMENT_ENVIRONMENT;
var $a3ccf1b927a8c1e8$export$6e497113334fabdb = $a3ccf1b927a8c1e8$var$TMP_DEVICE_ID;
var $a3ccf1b927a8c1e8$export$73c71cc1c141692b = $a3ccf1b927a8c1e8$var$TMP_DEVICE_MODEL_IDENTIFIER;
var $a3ccf1b927a8c1e8$export$44e87b3b8704bc8a = $a3ccf1b927a8c1e8$var$TMP_DEVICE_MODEL_NAME;
var $a3ccf1b927a8c1e8$export$fe110625e5aee93d = $a3ccf1b927a8c1e8$var$TMP_FAAS_NAME;
var $a3ccf1b927a8c1e8$export$6bbd0c1523702b22 = $a3ccf1b927a8c1e8$var$TMP_FAAS_ID;
var $a3ccf1b927a8c1e8$export$b1cb8996c7f671f1 = $a3ccf1b927a8c1e8$var$TMP_FAAS_VERSION;
var $a3ccf1b927a8c1e8$export$aa4a460944af09fe = $a3ccf1b927a8c1e8$var$TMP_FAAS_INSTANCE;
var $a3ccf1b927a8c1e8$export$a099969737f46339 = $a3ccf1b927a8c1e8$var$TMP_FAAS_MAX_MEMORY;
var $a3ccf1b927a8c1e8$export$e0a684ea09b55cf4 = $a3ccf1b927a8c1e8$var$TMP_HOST_ID;
var $a3ccf1b927a8c1e8$export$3b62edd76224926e = $a3ccf1b927a8c1e8$var$TMP_HOST_NAME;
var $a3ccf1b927a8c1e8$export$ba26ec134241ab05 = $a3ccf1b927a8c1e8$var$TMP_HOST_TYPE;
var $a3ccf1b927a8c1e8$export$4ef6e9b690c5d3ad = $a3ccf1b927a8c1e8$var$TMP_HOST_ARCH;
var $a3ccf1b927a8c1e8$export$80c1be409ca0daf7 = $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_NAME;
var $a3ccf1b927a8c1e8$export$ae211b0849dd0d75 = $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_ID;
var $a3ccf1b927a8c1e8$export$729ea06c32794759 = $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_VERSION;
var $a3ccf1b927a8c1e8$export$9e0ac736c1d187bc = $a3ccf1b927a8c1e8$var$TMP_K8S_CLUSTER_NAME;
var $a3ccf1b927a8c1e8$export$e2479edf033ed1cd = $a3ccf1b927a8c1e8$var$TMP_K8S_NODE_NAME;
var $a3ccf1b927a8c1e8$export$a348ce0508cee2d8 = $a3ccf1b927a8c1e8$var$TMP_K8S_NODE_UID;
var $a3ccf1b927a8c1e8$export$f74f5d90b490f9a6 = $a3ccf1b927a8c1e8$var$TMP_K8S_NAMESPACE_NAME;
var $a3ccf1b927a8c1e8$export$341429c1b099564 = $a3ccf1b927a8c1e8$var$TMP_K8S_POD_UID;
var $a3ccf1b927a8c1e8$export$9e6f11bbfd666f4d = $a3ccf1b927a8c1e8$var$TMP_K8S_POD_NAME;
var $a3ccf1b927a8c1e8$export$ee1ae14ab5631334 = $a3ccf1b927a8c1e8$var$TMP_K8S_CONTAINER_NAME;
var $a3ccf1b927a8c1e8$export$845974e52d5d977b = $a3ccf1b927a8c1e8$var$TMP_K8S_REPLICASET_UID;
var $a3ccf1b927a8c1e8$export$1735237e4ef99ddc = $a3ccf1b927a8c1e8$var$TMP_K8S_REPLICASET_NAME;
var $a3ccf1b927a8c1e8$export$ff557043393b8413 = $a3ccf1b927a8c1e8$var$TMP_K8S_DEPLOYMENT_UID;
var $a3ccf1b927a8c1e8$export$1b29810364e6fd87 = $a3ccf1b927a8c1e8$var$TMP_K8S_DEPLOYMENT_NAME;
var $a3ccf1b927a8c1e8$export$fd37db901d73f6dc = $a3ccf1b927a8c1e8$var$TMP_K8S_STATEFULSET_UID;
var $a3ccf1b927a8c1e8$export$8030a8ee6a430fb9 = $a3ccf1b927a8c1e8$var$TMP_K8S_STATEFULSET_NAME;
var $a3ccf1b927a8c1e8$export$6369d5a7f9c03019 = $a3ccf1b927a8c1e8$var$TMP_K8S_DAEMONSET_UID;
var $a3ccf1b927a8c1e8$export$f55c2f841978e686 = $a3ccf1b927a8c1e8$var$TMP_K8S_DAEMONSET_NAME;
var $a3ccf1b927a8c1e8$export$1618e60c71672510 = $a3ccf1b927a8c1e8$var$TMP_K8S_JOB_UID;
var $a3ccf1b927a8c1e8$export$fae3f547adbfd628 = $a3ccf1b927a8c1e8$var$TMP_K8S_JOB_NAME;
var $a3ccf1b927a8c1e8$export$c6a5d371a9279cc4 = $a3ccf1b927a8c1e8$var$TMP_K8S_CRONJOB_UID;
var $a3ccf1b927a8c1e8$export$2411967a413e48d4 = $a3ccf1b927a8c1e8$var$TMP_K8S_CRONJOB_NAME;
var $a3ccf1b927a8c1e8$export$832bf06644fbf55d = $a3ccf1b927a8c1e8$var$TMP_OS_TYPE;
var $a3ccf1b927a8c1e8$export$5ea67b5ceab8e5b2 = $a3ccf1b927a8c1e8$var$TMP_OS_DESCRIPTION;
var $a3ccf1b927a8c1e8$export$ba2bcf7e30621987 = $a3ccf1b927a8c1e8$var$TMP_OS_NAME;
var $a3ccf1b927a8c1e8$export$e0381cc218bde593 = $a3ccf1b927a8c1e8$var$TMP_OS_VERSION;
var $a3ccf1b927a8c1e8$export$f184e78598ab0d4c = $a3ccf1b927a8c1e8$var$TMP_PROCESS_PID;
var $a3ccf1b927a8c1e8$export$e2e53a1071096d12 = $a3ccf1b927a8c1e8$var$TMP_PROCESS_EXECUTABLE_NAME;
var $a3ccf1b927a8c1e8$export$cc1c2bacfc72d251 = $a3ccf1b927a8c1e8$var$TMP_PROCESS_EXECUTABLE_PATH;
var $a3ccf1b927a8c1e8$export$1921c91b182b21e6 = $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND;
var $a3ccf1b927a8c1e8$export$33d6a2745a92e4bf = $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND_LINE;
var $a3ccf1b927a8c1e8$export$1a3243771890bbd7 = $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND_ARGS;
var $a3ccf1b927a8c1e8$export$5bc9efe4d24f374b = $a3ccf1b927a8c1e8$var$TMP_PROCESS_OWNER;
var $a3ccf1b927a8c1e8$export$6c52ea893832d871 = $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_NAME;
var $a3ccf1b927a8c1e8$export$7c038ff97737b111 = $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_VERSION;
var $a3ccf1b927a8c1e8$export$cae71c4fbbf205fb = $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_DESCRIPTION;
var $a3ccf1b927a8c1e8$export$48c68257f49298c9 = $a3ccf1b927a8c1e8$var$TMP_SERVICE_NAME;
var $a3ccf1b927a8c1e8$export$77c0752ab7c26c9 = $a3ccf1b927a8c1e8$var$TMP_SERVICE_NAMESPACE;
var $a3ccf1b927a8c1e8$export$bb5ecf41777e0d0c = $a3ccf1b927a8c1e8$var$TMP_SERVICE_INSTANCE_ID;
var $a3ccf1b927a8c1e8$export$202d10b361b87ab2 = $a3ccf1b927a8c1e8$var$TMP_SERVICE_VERSION;
var $a3ccf1b927a8c1e8$export$2d668a3bde1cddea = $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_NAME;
var $a3ccf1b927a8c1e8$export$b5c1717bbc4c6044 = $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_LANGUAGE;
var $a3ccf1b927a8c1e8$export$e0b67501ecc1df37 = $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_VERSION;
var $a3ccf1b927a8c1e8$export$3d43fbbcabb62eca = $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_AUTO_VERSION;
var $a3ccf1b927a8c1e8$export$a6b7ffad45e0c20b = $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_NAME;
var $a3ccf1b927a8c1e8$export$589250d7a0c7cee4 = $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_VERSION;
var $a3ccf1b927a8c1e8$export$3318c199ccb51731 = $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_DESCRIPTION;
var $a3ccf1b927a8c1e8$export$85d6ffe28a084c78 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $a3ccf1b927a8c1e8$var$TMP_CLOUD_PROVIDER,
    $a3ccf1b927a8c1e8$var$TMP_CLOUD_ACCOUNT_ID,
    $a3ccf1b927a8c1e8$var$TMP_CLOUD_REGION,
    $a3ccf1b927a8c1e8$var$TMP_CLOUD_AVAILABILITY_ZONE,
    $a3ccf1b927a8c1e8$var$TMP_CLOUD_PLATFORM,
    $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_CONTAINER_ARN,
    $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_CLUSTER_ARN,
    $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_LAUNCHTYPE,
    $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_ARN,
    $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_FAMILY,
    $a3ccf1b927a8c1e8$var$TMP_AWS_ECS_TASK_REVISION,
    $a3ccf1b927a8c1e8$var$TMP_AWS_EKS_CLUSTER_ARN,
    $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_GROUP_NAMES,
    $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_GROUP_ARNS,
    $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_STREAM_NAMES,
    $a3ccf1b927a8c1e8$var$TMP_AWS_LOG_STREAM_ARNS,
    $a3ccf1b927a8c1e8$var$TMP_CONTAINER_NAME,
    $a3ccf1b927a8c1e8$var$TMP_CONTAINER_ID,
    $a3ccf1b927a8c1e8$var$TMP_CONTAINER_RUNTIME,
    $a3ccf1b927a8c1e8$var$TMP_CONTAINER_IMAGE_NAME,
    $a3ccf1b927a8c1e8$var$TMP_CONTAINER_IMAGE_TAG,
    $a3ccf1b927a8c1e8$var$TMP_DEPLOYMENT_ENVIRONMENT,
    $a3ccf1b927a8c1e8$var$TMP_DEVICE_ID,
    $a3ccf1b927a8c1e8$var$TMP_DEVICE_MODEL_IDENTIFIER,
    $a3ccf1b927a8c1e8$var$TMP_DEVICE_MODEL_NAME,
    $a3ccf1b927a8c1e8$var$TMP_FAAS_NAME,
    $a3ccf1b927a8c1e8$var$TMP_FAAS_ID,
    $a3ccf1b927a8c1e8$var$TMP_FAAS_VERSION,
    $a3ccf1b927a8c1e8$var$TMP_FAAS_INSTANCE,
    $a3ccf1b927a8c1e8$var$TMP_FAAS_MAX_MEMORY,
    $a3ccf1b927a8c1e8$var$TMP_HOST_ID,
    $a3ccf1b927a8c1e8$var$TMP_HOST_NAME,
    $a3ccf1b927a8c1e8$var$TMP_HOST_TYPE,
    $a3ccf1b927a8c1e8$var$TMP_HOST_ARCH,
    $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_NAME,
    $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_ID,
    $a3ccf1b927a8c1e8$var$TMP_HOST_IMAGE_VERSION,
    $a3ccf1b927a8c1e8$var$TMP_K8S_CLUSTER_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_NODE_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_NODE_UID,
    $a3ccf1b927a8c1e8$var$TMP_K8S_NAMESPACE_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_POD_UID,
    $a3ccf1b927a8c1e8$var$TMP_K8S_POD_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_CONTAINER_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_REPLICASET_UID,
    $a3ccf1b927a8c1e8$var$TMP_K8S_REPLICASET_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_DEPLOYMENT_UID,
    $a3ccf1b927a8c1e8$var$TMP_K8S_DEPLOYMENT_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_STATEFULSET_UID,
    $a3ccf1b927a8c1e8$var$TMP_K8S_STATEFULSET_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_DAEMONSET_UID,
    $a3ccf1b927a8c1e8$var$TMP_K8S_DAEMONSET_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_JOB_UID,
    $a3ccf1b927a8c1e8$var$TMP_K8S_JOB_NAME,
    $a3ccf1b927a8c1e8$var$TMP_K8S_CRONJOB_UID,
    $a3ccf1b927a8c1e8$var$TMP_K8S_CRONJOB_NAME,
    $a3ccf1b927a8c1e8$var$TMP_OS_TYPE,
    $a3ccf1b927a8c1e8$var$TMP_OS_DESCRIPTION,
    $a3ccf1b927a8c1e8$var$TMP_OS_NAME,
    $a3ccf1b927a8c1e8$var$TMP_OS_VERSION,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_PID,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_EXECUTABLE_NAME,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_EXECUTABLE_PATH,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND_LINE,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_COMMAND_ARGS,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_OWNER,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_NAME,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_VERSION,
    $a3ccf1b927a8c1e8$var$TMP_PROCESS_RUNTIME_DESCRIPTION,
    $a3ccf1b927a8c1e8$var$TMP_SERVICE_NAME,
    $a3ccf1b927a8c1e8$var$TMP_SERVICE_NAMESPACE,
    $a3ccf1b927a8c1e8$var$TMP_SERVICE_INSTANCE_ID,
    $a3ccf1b927a8c1e8$var$TMP_SERVICE_VERSION,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_NAME,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_LANGUAGE,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_SDK_VERSION,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRY_AUTO_VERSION,
    $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_NAME,
    $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_VERSION,
    $a3ccf1b927a8c1e8$var$TMP_WEBENGINE_DESCRIPTION
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for CloudProviderValues enum definition
 *
 * Name of the cloud provider.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = "alibaba_cloud";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_AWS = "aws";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_AZURE = "azure";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_GCP = "gcp";
var $a3ccf1b927a8c1e8$export$1f18298beaae37d3 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;
var $a3ccf1b927a8c1e8$export$f56ad4bf836470f2 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_AWS;
var $a3ccf1b927a8c1e8$export$a607df3e2371e436 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_AZURE;
var $a3ccf1b927a8c1e8$export$b5cb559e526f402a = $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_GCP;
var $a3ccf1b927a8c1e8$export$c2664345bd8aad14 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_AWS,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_AZURE,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPROVIDERVALUES_GCP
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for CloudPlatformValues enum definition
 *
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = "alibaba_cloud_ecs";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = "alibaba_cloud_fc";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_EC2 = "aws_ec2";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_ECS = "aws_ecs";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_EKS = "aws_eks";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = "aws_lambda";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = "aws_elastic_beanstalk";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_VM = "azure_vm";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = "azure_container_instances";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_AKS = "azure_aks";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = "azure_functions";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = "azure_app_service";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = "gcp_compute_engine";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = "gcp_cloud_run";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = "gcp_kubernetes_engine";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = "gcp_cloud_functions";
var $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = "gcp_app_engine";
var $a3ccf1b927a8c1e8$export$b7ccb6b2de7534ed = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;
var $a3ccf1b927a8c1e8$export$5e031b328860dffd = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;
var $a3ccf1b927a8c1e8$export$f0e8dec51b6cf37d = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_EC2;
var $a3ccf1b927a8c1e8$export$a325ac849a598ed7 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_ECS;
var $a3ccf1b927a8c1e8$export$9c3f60b2b4d542e1 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_EKS;
var $a3ccf1b927a8c1e8$export$1edcff8a13326911 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;
var $a3ccf1b927a8c1e8$export$2f7128c57ade0d50 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;
var $a3ccf1b927a8c1e8$export$10256094f96cd373 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_VM;
var $a3ccf1b927a8c1e8$export$ed505d4ca2b4d712 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;
var $a3ccf1b927a8c1e8$export$83131f1a1f001ee = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_AKS;
var $a3ccf1b927a8c1e8$export$36f98571cef96af7 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;
var $a3ccf1b927a8c1e8$export$66faee8e64625c5d = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;
var $a3ccf1b927a8c1e8$export$dd043c2707119e75 = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;
var $a3ccf1b927a8c1e8$export$d0a1ecf47fa77b8b = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;
var $a3ccf1b927a8c1e8$export$649c271f5295d71e = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;
var $a3ccf1b927a8c1e8$export$e9becd93e8daa01a = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;
var $a3ccf1b927a8c1e8$export$5862836e4b24761c = $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;
var $a3ccf1b927a8c1e8$export$fe811090f8b1259c = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_EC2,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_ECS,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_EKS,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_VM,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_AKS,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,
    $a3ccf1b927a8c1e8$var$TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for AwsEcsLaunchtypeValues enum definition
 *
 * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3ccf1b927a8c1e8$var$TMP_AWSECSLAUNCHTYPEVALUES_EC2 = "ec2";
var $a3ccf1b927a8c1e8$var$TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = "fargate";
var $a3ccf1b927a8c1e8$export$54d16708f9a4cde = $a3ccf1b927a8c1e8$var$TMP_AWSECSLAUNCHTYPEVALUES_EC2;
var $a3ccf1b927a8c1e8$export$7bf660b6e44fe06e = $a3ccf1b927a8c1e8$var$TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;
var $a3ccf1b927a8c1e8$export$6945fb1e4f2852ef = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $a3ccf1b927a8c1e8$var$TMP_AWSECSLAUNCHTYPEVALUES_EC2,
    $a3ccf1b927a8c1e8$var$TMP_AWSECSLAUNCHTYPEVALUES_FARGATE
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for HostArchValues enum definition
 *
 * The CPU architecture the host system is running on.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_AMD64 = "amd64";
var $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_ARM32 = "arm32";
var $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_ARM64 = "arm64";
var $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_IA64 = "ia64";
var $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_PPC32 = "ppc32";
var $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_PPC64 = "ppc64";
var $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_X86 = "x86";
var $a3ccf1b927a8c1e8$export$6050a837e7da966a = $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_AMD64;
var $a3ccf1b927a8c1e8$export$3c7341cec70023f0 = $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_ARM32;
var $a3ccf1b927a8c1e8$export$2fac5f715b596c6d = $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_ARM64;
var $a3ccf1b927a8c1e8$export$231235882f6e6443 = $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_IA64;
var $a3ccf1b927a8c1e8$export$c4a24e52d6385d55 = $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_PPC32;
var $a3ccf1b927a8c1e8$export$18594ce63eac5c97 = $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_PPC64;
var $a3ccf1b927a8c1e8$export$1af722303cbf3f49 = $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_X86;
var $a3ccf1b927a8c1e8$export$f31e10d6db5b428b = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_AMD64,
    $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_ARM32,
    $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_ARM64,
    $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_IA64,
    $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_PPC32,
    $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_PPC64,
    $a3ccf1b927a8c1e8$var$TMP_HOSTARCHVALUES_X86
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for OsTypeValues enum definition
 *
 * The operating system type.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_WINDOWS = "windows";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_LINUX = "linux";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_DARWIN = "darwin";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_FREEBSD = "freebsd";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_NETBSD = "netbsd";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_OPENBSD = "openbsd";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_DRAGONFLYBSD = "dragonflybsd";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_HPUX = "hpux";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_AIX = "aix";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_SOLARIS = "solaris";
var $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_Z_OS = "z_os";
var $a3ccf1b927a8c1e8$export$9e247b47b87a5e98 = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_WINDOWS;
var $a3ccf1b927a8c1e8$export$79d9a21d50f1d11b = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_LINUX;
var $a3ccf1b927a8c1e8$export$29d1fb472dabfab5 = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_DARWIN;
var $a3ccf1b927a8c1e8$export$41f1a684ef8f38a0 = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_FREEBSD;
var $a3ccf1b927a8c1e8$export$d11e84640954119d = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_NETBSD;
var $a3ccf1b927a8c1e8$export$cf6bab1412b5a24 = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_OPENBSD;
var $a3ccf1b927a8c1e8$export$e902e17ab5ff9bad = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_DRAGONFLYBSD;
var $a3ccf1b927a8c1e8$export$9a4c793b18e0bd5e = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_HPUX;
var $a3ccf1b927a8c1e8$export$bdec18d31f5e2d9d = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_AIX;
var $a3ccf1b927a8c1e8$export$6226a44babc07d2d = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_SOLARIS;
var $a3ccf1b927a8c1e8$export$a81b7e7863a06968 = $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_Z_OS;
var $a3ccf1b927a8c1e8$export$efc6a8b7a61f5577 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_WINDOWS,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_LINUX,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_DARWIN,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_FREEBSD,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_NETBSD,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_OPENBSD,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_DRAGONFLYBSD,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_HPUX,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_AIX,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_SOLARIS,
    $a3ccf1b927a8c1e8$var$TMP_OSTYPEVALUES_Z_OS
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for TelemetrySdkLanguageValues enum definition
 *
 * The language of the telemetry SDK.
 * ---------------------------------------------------------------------------------------------------------- */ // Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = "cpp";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = "dotnet";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = "erlang";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_GO = "go";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = "java";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = "nodejs";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = "php";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = "python";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = "ruby";
var $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = "webjs";
var $a3ccf1b927a8c1e8$export$bb305b29d3ff12b2 = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;
var $a3ccf1b927a8c1e8$export$36f70c7fec241585 = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;
var $a3ccf1b927a8c1e8$export$9254854c1a90f699 = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;
var $a3ccf1b927a8c1e8$export$870f3d5bf5403ac2 = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_GO;
var $a3ccf1b927a8c1e8$export$a115dae9eb65ef38 = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;
var $a3ccf1b927a8c1e8$export$f599ed80e3c8d29a = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;
var $a3ccf1b927a8c1e8$export$42ae93f6bda608ef = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;
var $a3ccf1b927a8c1e8$export$7f6f8205f1621418 = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;
var $a3ccf1b927a8c1e8$export$3dd620b466e18cf = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;
var $a3ccf1b927a8c1e8$export$1414beb1e03cac7c = $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;
var $a3ccf1b927a8c1e8$export$b43162e16168dba6 = /*#__PURE__*/ (0, $fa2a9341e510c814$export$8796db7ca257d576)([
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_GO,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,
    $a3ccf1b927a8c1e8$var$TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS
]);


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

var $25b59ccdc12c2f78$export$a0d08692cc547dcb = {
    PLATFORM: "browser.platform",
    BRANDS: "browser.brands",
    MOBILE: "browser.mobile",
    LANGUAGE: "browser.language",
    USER_AGENT: "browser.user_agent"
};


var $5983bdc1e50ed1ad$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $5983bdc1e50ed1ad$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
/**
 * BrowserDetector will be used to detect the resources related to browser.
 */ var $5983bdc1e50ed1ad$var$BrowserDetector = /** @class */ function() {
    function BrowserDetector() {}
    BrowserDetector.prototype.detect = function(config) {
        return $5983bdc1e50ed1ad$var$__awaiter(this, void 0, void 0, function() {
            var isBrowser, browserResource;
            return $5983bdc1e50ed1ad$var$__generator(this, function(_a) {
                isBrowser = typeof navigator !== "undefined";
                if (!isBrowser) return [
                    2 /*return*/ ,
                    (0, $eaedecc9905e0881$export$39a853cfb5a94a63).empty()
                ];
                browserResource = $5983bdc1e50ed1ad$var$getBrowserAttributes();
                return [
                    2 /*return*/ ,
                    this._getResourceAttributes(browserResource, config)
                ];
            });
        });
    };
    /**
     * Validates browser resource attribute map from browser variables
     *
     * @param browserResource The un-sanitized resource attributes from browser as key/value pairs.
     * @param config: Config
     * @returns The sanitized resource attributes.
     */ BrowserDetector.prototype._getResourceAttributes = function(browserResource, _config) {
        if (!browserResource[(0, $25b59ccdc12c2f78$export$a0d08692cc547dcb).USER_AGENT] && !browserResource[(0, $25b59ccdc12c2f78$export$a0d08692cc547dcb).PLATFORM]) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("BrowserDetector failed: Unable to find required browser resources. ");
            return (0, $eaedecc9905e0881$export$39a853cfb5a94a63).empty();
        } else return new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)(browserResource);
    };
    return BrowserDetector;
}();
// Add Browser related attributes to resources
function $5983bdc1e50ed1ad$var$getBrowserAttributes() {
    var browserAttribs = {};
    var userAgentData = navigator.userAgentData;
    if (userAgentData) {
        browserAttribs[(0, $25b59ccdc12c2f78$export$a0d08692cc547dcb).PLATFORM] = userAgentData.platform;
        browserAttribs[(0, $25b59ccdc12c2f78$export$a0d08692cc547dcb).BRANDS] = userAgentData.brands.map(function(b) {
            return b.brand + " " + b.version;
        });
        browserAttribs[(0, $25b59ccdc12c2f78$export$a0d08692cc547dcb).MOBILE] = userAgentData.mobile;
    } else browserAttribs[(0, $25b59ccdc12c2f78$export$a0d08692cc547dcb).USER_AGENT] = navigator.userAgent;
    browserAttribs[(0, $25b59ccdc12c2f78$export$a0d08692cc547dcb).LANGUAGE] = navigator.language;
    return browserAttribs;
}
var $5983bdc1e50ed1ad$export$a23a90002feb7ef = new $5983bdc1e50ed1ad$var$BrowserDetector();





var $6Wt0I = parcelRequire("6Wt0I");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * Collector Exporter abstract base class
 */ var $51580e3cf6bcc746$export$a756c21bf453f1b5 = /** @class */ function() {
    /**
     * @param config
     */ function OTLPExporterBase(config) {
        if (config === void 0) config = {};
        this._sendingPromises = [];
        this.shutdown = this.shutdown.bind(this);
        this._shutdownOnce = new (0, $19af5f5a0ba515c8$export$c1f52ab4952184cd)(this._shutdown, this);
        this._concurrencyLimit = typeof config.concurrencyLimit === "number" ? config.concurrencyLimit : 30;
    }
    /**
     * Export items.
     * @param items
     * @param resultCallback
     */ OTLPExporterBase.prototype.export = function(items, resultCallback) {
        if (this._shutdownOnce.isCalled) {
            resultCallback({
                code: (0, $ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1).FAILED,
                error: new Error("Exporter has been shutdown")
            });
            return;
        }
        if (this._sendingPromises.length >= this._concurrencyLimit) {
            resultCallback({
                code: (0, $ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1).FAILED,
                error: new Error("Concurrent export limit reached")
            });
            return;
        }
        this._export(items).then(function() {
            resultCallback({
                code: (0, $ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1).SUCCESS
            });
        }).catch(function(error) {
            resultCallback({
                code: (0, $ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1).FAILED,
                error: error
            });
        });
    };
    OTLPExporterBase.prototype._export = function(items) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            try {
                (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("items to be sent", items);
                _this.send(items, resolve, reject);
            } catch (e) {
                reject(e);
            }
        });
    };
    /**
     * Shutdown the exporter.
     */ OTLPExporterBase.prototype.shutdown = function() {
        return this._shutdownOnce.call();
    };
    /**
     * Exports any pending spans in the exporter
     */ OTLPExporterBase.prototype.forceFlush = function() {
        return Promise.all(this._sendingPromises).then(function() {
        /** ignore resolved values */ });
    };
    /**
     * Called by _shutdownOnce with BindOnceFuture
     */ OTLPExporterBase.prototype._shutdown = function() {
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("shutdown started");
        this.onShutdown();
        return this.forceFlush();
    };
    return OTLPExporterBase;
}();


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $251660070d09939b$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Interface for handling error
 */ var $251660070d09939b$export$26c718c16cda30c6 = /** @class */ function(_super) {
    $251660070d09939b$var$__extends(OTLPExporterError, _super);
    function OTLPExporterError(message, code, data) {
        var _this = _super.call(this, message) || this;
        _this.name = "OTLPExporterError";
        _this.data = data;
        _this.code = code;
        return _this;
    }
    return OTLPExporterError;
}(Error);



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $6800f539818fa676$export$bc409a649b31360b(statusCode) {
    var retryCodes = [
        429,
        502,
        503,
        504
    ];
    return retryCodes.includes(statusCode);
}
function $6800f539818fa676$export$4e009558974ad065(retryAfter) {
    if (retryAfter == null) return undefined;
    var seconds = Number.parseInt(retryAfter, 10);
    if (Number.isInteger(seconds)) return seconds > 0 ? seconds * 1000 : -1;
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives
    var delay = new Date(retryAfter).getTime() - Date.now();
    if (delay >= 0) return delay;
    return 0;
}


var $770d6ef00dd22ab5$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $770d6ef00dd22ab5$var$XhrTransport = /** @class */ function() {
    function XhrTransport(_parameters) {
        this._parameters = _parameters;
    }
    XhrTransport.prototype.send = function(data, timeoutMillis) {
        var _this = this;
        return new Promise(function(resolve) {
            var xhr = new XMLHttpRequest();
            xhr.timeout = timeoutMillis;
            xhr.open("POST", _this._parameters.url);
            Object.entries(_this._parameters.headers).forEach(function(_a) {
                var _b = $770d6ef00dd22ab5$var$__read(_a, 2), k = _b[0], v = _b[1];
                xhr.setRequestHeader(k, v);
            });
            xhr.ontimeout = function(_) {
                resolve({
                    status: "failure",
                    error: new Error("XHR request timed out")
                });
            };
            xhr.onreadystatechange = function() {
                if (xhr.status >= 200 && xhr.status <= 299) {
                    (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("XHR success");
                    resolve({
                        status: "success"
                    });
                } else if (xhr.status && (0, $6800f539818fa676$export$bc409a649b31360b)(xhr.status)) resolve({
                    status: "retryable",
                    retryInMillis: (0, $6800f539818fa676$export$4e009558974ad065)(xhr.getResponseHeader("Retry-After"))
                });
                else if (xhr.status !== 0) resolve({
                    status: "failure",
                    error: new Error("XHR request failed with non-retryable status")
                });
            };
            xhr.onabort = function() {
                resolve({
                    status: "failure",
                    error: new Error("XHR request aborted")
                });
            };
            xhr.onerror = function() {
                resolve({
                    status: "failure",
                    error: new Error("XHR request errored")
                });
            };
            xhr.send(new Blob([
                data
            ], {
                type: _this._parameters.headers["Content-Type"]
            }));
        });
    };
    XhrTransport.prototype.shutdown = function() {
    // Intentionally left empty, nothing to do.
    };
    return XhrTransport;
}();
function $770d6ef00dd22ab5$export$8ab960d599ca0ecc(parameters) {
    return new $770d6ef00dd22ab5$var$XhrTransport(parameters);
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $043fdfae83ead2cd$var$SendBeaconTransport = /** @class */ function() {
    function SendBeaconTransport(_params) {
        this._params = _params;
    }
    SendBeaconTransport.prototype.send = function(data) {
        var _this = this;
        return new Promise(function(resolve) {
            if (navigator.sendBeacon(_this._params.url, new Blob([
                data
            ], {
                type: _this._params.blobType
            }))) {
                // no way to signal retry, treat everything as success
                (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("SendBeacon success");
                resolve({
                    status: "success"
                });
            } else resolve({
                status: "failure",
                error: new Error("SendBeacon failed")
            });
        });
    };
    SendBeaconTransport.prototype.shutdown = function() {
    // Intentionally left empty, nothing to do.
    };
    return SendBeaconTransport;
}();
function $043fdfae83ead2cd$export$ef075750bfec2f31(parameters) {
    return new $043fdfae83ead2cd$var$SendBeaconTransport(parameters);
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $3cca7882ed6cb9b8$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $3cca7882ed6cb9b8$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var $3cca7882ed6cb9b8$var$MAX_ATTEMPTS = 5;
var $3cca7882ed6cb9b8$var$INITIAL_BACKOFF = 1000;
var $3cca7882ed6cb9b8$var$MAX_BACKOFF = 5000;
var $3cca7882ed6cb9b8$var$BACKOFF_MULTIPLIER = 1.5;
var $3cca7882ed6cb9b8$var$JITTER = 0.2;
/**
 * Get a pseudo-random jitter that falls in the range of [-JITTER, +JITTER]
 */ function $3cca7882ed6cb9b8$var$getJitter() {
    return Math.random() * (2 * $3cca7882ed6cb9b8$var$JITTER) - $3cca7882ed6cb9b8$var$JITTER;
}
var $3cca7882ed6cb9b8$var$RetryingTransport = /** @class */ function() {
    function RetryingTransport(_transport) {
        this._transport = _transport;
    }
    RetryingTransport.prototype.retry = function(data, timeoutMillis, inMillis) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            setTimeout(function() {
                _this._transport.send(data, timeoutMillis).then(resolve, reject);
            }, inMillis);
        });
    };
    RetryingTransport.prototype.send = function(data, timeoutMillis) {
        var _a;
        return $3cca7882ed6cb9b8$var$__awaiter(this, void 0, void 0, function() {
            var deadline, result, attempts, nextBackoff, backoff, retryInMillis, remainingTimeoutMillis;
            return $3cca7882ed6cb9b8$var$__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        deadline = Date.now() + timeoutMillis;
                        return [
                            4 /*yield*/ ,
                            this._transport.send(data, timeoutMillis)
                        ];
                    case 1:
                        result = _b.sent();
                        attempts = $3cca7882ed6cb9b8$var$MAX_ATTEMPTS;
                        nextBackoff = $3cca7882ed6cb9b8$var$INITIAL_BACKOFF;
                        _b.label = 2;
                    case 2:
                        if (!(result.status === "retryable" && attempts > 0)) return [
                            3 /*break*/ ,
                            4
                        ];
                        attempts--;
                        backoff = Math.max(Math.min(nextBackoff, $3cca7882ed6cb9b8$var$MAX_BACKOFF) + $3cca7882ed6cb9b8$var$getJitter(), 0);
                        nextBackoff = nextBackoff * $3cca7882ed6cb9b8$var$BACKOFF_MULTIPLIER;
                        retryInMillis = (_a = result.retryInMillis) !== null && _a !== void 0 ? _a : backoff;
                        remainingTimeoutMillis = deadline - Date.now();
                        if (retryInMillis > remainingTimeoutMillis) return [
                            2 /*return*/ ,
                            result
                        ];
                        return [
                            4 /*yield*/ ,
                            this.retry(data, remainingTimeoutMillis, retryInMillis)
                        ];
                    case 3:
                        result = _b.sent();
                        return [
                            3 /*break*/ ,
                            2
                        ];
                    case 4:
                        return [
                            2 /*return*/ ,
                            result
                        ];
                }
            });
        });
    };
    RetryingTransport.prototype.shutdown = function() {
        return this._transport.shutdown();
    };
    return RetryingTransport;
}();
function $3cca7882ed6cb9b8$export$2a8528aedd03b24e(options) {
    return new $3cca7882ed6cb9b8$var$RetryingTransport(options.transport);
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $0443e15b0ad15e8b$export$c7dc25f7ba3fe11a(timeoutMillis) {
    if (!Number.isNaN(timeoutMillis) && Number.isFinite(timeoutMillis) && timeoutMillis > 0) return timeoutMillis;
    throw new Error("Configuration: timeoutMillis is invalid, expected number greater than 0 (actual: '" + timeoutMillis + "')");
}
function $0443e15b0ad15e8b$export$f0204f09cd0066b(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration) {
    var _a, _b, _c, _d, _e, _f;
    return {
        timeoutMillis: $0443e15b0ad15e8b$export$c7dc25f7ba3fe11a((_b = (_a = userProvidedConfiguration.timeoutMillis) !== null && _a !== void 0 ? _a : fallbackConfiguration.timeoutMillis) !== null && _b !== void 0 ? _b : defaultConfiguration.timeoutMillis),
        concurrencyLimit: (_d = (_c = userProvidedConfiguration.concurrencyLimit) !== null && _c !== void 0 ? _c : fallbackConfiguration.concurrencyLimit) !== null && _d !== void 0 ? _d : defaultConfiguration.concurrencyLimit,
        compression: (_f = (_e = userProvidedConfiguration.compression) !== null && _e !== void 0 ? _e : fallbackConfiguration.compression) !== null && _f !== void 0 ? _f : defaultConfiguration.compression
    };
}
function $0443e15b0ad15e8b$export$cd8c80b353c895f4() {
    return {
        timeoutMillis: 10000,
        concurrencyLimit: 30,
        compression: "none"
    };
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
var $a2c0d385ef35a476$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function $a2c0d385ef35a476$export$4144cc9174bc6a0(partialHeaders) {
    if (partialHeaders === void 0) partialHeaders = {};
    var headers = {};
    Object.entries(partialHeaders).forEach(function(_a) {
        var _b = $a2c0d385ef35a476$var$__read(_a, 2), key = _b[0], value = _b[1];
        if (typeof value !== "undefined") headers[key] = String(value);
        else (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).warn('Header "' + key + '" has invalid value (' + value + ") and will be ignored");
    });
    return headers;
}


var $2680ccff9ea252ce$var$__assign = undefined && undefined.__assign || function() {
    $2680ccff9ea252ce$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $2680ccff9ea252ce$var$__assign.apply(this, arguments);
};
function $2680ccff9ea252ce$var$mergeHeaders(userProvidedHeaders, fallbackHeaders, defaultHeaders) {
    var requiredHeaders = $2680ccff9ea252ce$var$__assign({}, defaultHeaders);
    var headers = {};
    // add fallback ones first
    if (fallbackHeaders != null) Object.assign(headers, fallbackHeaders);
    // override with user-provided ones
    if (userProvidedHeaders != null) Object.assign(headers, userProvidedHeaders);
    // override required ones.
    return Object.assign(headers, requiredHeaders);
}
function $2680ccff9ea252ce$var$validateUserProvidedUrl(url) {
    if (url == null) return undefined;
    try {
        new URL(url);
        return url;
    } catch (e) {
        throw new Error("Configuration: Could not parse user-provided export URL: '" + url + "'");
    }
}
function $2680ccff9ea252ce$export$dae543ef16d16f76(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration) {
    var _a, _b;
    return $2680ccff9ea252ce$var$__assign($2680ccff9ea252ce$var$__assign({}, (0, $0443e15b0ad15e8b$export$f0204f09cd0066b)(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration)), {
        headers: $2680ccff9ea252ce$var$mergeHeaders((0, $a2c0d385ef35a476$export$4144cc9174bc6a0)(userProvidedConfiguration.headers), fallbackConfiguration.headers, defaultConfiguration.headers),
        url: (_b = (_a = $2680ccff9ea252ce$var$validateUserProvidedUrl(userProvidedConfiguration.url)) !== null && _a !== void 0 ? _a : fallbackConfiguration.url) !== null && _b !== void 0 ? _b : defaultConfiguration.url
    });
}
function $2680ccff9ea252ce$export$ed5dc921e0200ace(requiredHeaders, signalResourcePath) {
    return $2680ccff9ea252ce$var$__assign($2680ccff9ea252ce$var$__assign({}, (0, $0443e15b0ad15e8b$export$cd8c80b353c895f4)()), {
        headers: requiredHeaders,
        url: "http://localhost:4318/" + signalResourcePath
    });
}


var $083c7c7e0529c844$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Collector Metric Exporter abstract base class
 */ var $083c7c7e0529c844$export$d0874567cb949b29 = /** @class */ function(_super) {
    $083c7c7e0529c844$var$__extends(OTLPExporterBrowserBase, _super);
    /**
     * @param config
     * @param serializer
     * @param requiredHeaders
     * @param signalResourcePath
     */ function OTLPExporterBrowserBase(config, serializer, requiredHeaders, signalResourcePath) {
        if (config === void 0) config = {};
        var _this = _super.call(this, config) || this;
        _this._serializer = serializer;
        var useXhr = !!config.headers || typeof navigator.sendBeacon !== "function";
        var actualConfig = (0, $2680ccff9ea252ce$export$dae543ef16d16f76)({
            url: config.url,
            timeoutMillis: config.timeoutMillis,
            headers: config.headers,
            concurrencyLimit: config.concurrencyLimit
        }, {}, (0, $2680ccff9ea252ce$export$ed5dc921e0200ace)(requiredHeaders, signalResourcePath));
        _this._timeoutMillis = actualConfig.timeoutMillis;
        _this._concurrencyLimit = actualConfig.concurrencyLimit;
        if (useXhr) _this._transport = (0, $3cca7882ed6cb9b8$export$2a8528aedd03b24e)({
            transport: (0, $770d6ef00dd22ab5$export$8ab960d599ca0ecc)({
                headers: actualConfig.headers,
                url: actualConfig.url
            })
        });
        else // sendBeacon has no way to signal retry, so we do not wrap it in a RetryingTransport
        _this._transport = (0, $043fdfae83ead2cd$export$ef075750bfec2f31)({
            url: actualConfig.url,
            blobType: actualConfig.headers["Content-Type"]
        });
        return _this;
    }
    OTLPExporterBrowserBase.prototype.onShutdown = function() {};
    OTLPExporterBrowserBase.prototype.send = function(objects, onSuccess, onError) {
        var _this = this;
        if (this._shutdownOnce.isCalled) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("Shutdown already started. Cannot send objects");
            return;
        }
        var data = this._serializer.serializeRequest(objects);
        if (data == null) {
            onError(new Error("Could not serialize message"));
            return;
        }
        var promise = this._transport.send(data, this._timeoutMillis).then(function(response) {
            if (response.status === "success") onSuccess();
            else if (response.status === "failure" && response.error) onError(response.error);
            else if (response.status === "retryable") onError(new (0, $251660070d09939b$export$26c718c16cda30c6)("Export failed with retryable status"));
            else onError(new (0, $251660070d09939b$export$26c718c16cda30c6)("Export failed with unknown error"));
        }, onError);
        this._sendingPromises.push(promise);
        var popPromise = function() {
            var index = _this._sendingPromises.indexOf(promise);
            _this._sendingPromises.splice(index, 1);
        };
        promise.then(popPromise, popPromise);
    };
    return OTLPExporterBrowserBase;
}((0, $51580e3cf6bcc746$export$a756c21bf453f1b5));


var $19bb94a19549134a$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function $19bb94a19549134a$export$5a2377b8e90dd1bf(scope) {
    return {
        name: scope.name,
        version: scope.version
    };
}
function $19bb94a19549134a$export$b6255b619acd6709(attributes) {
    return Object.keys(attributes).map(function(key) {
        return $19bb94a19549134a$export$155f69accf533147(key, attributes[key]);
    });
}
function $19bb94a19549134a$export$155f69accf533147(key, value) {
    return {
        key: key,
        value: $19bb94a19549134a$export$9544ab3c60b2d8ce(value)
    };
}
function $19bb94a19549134a$export$9544ab3c60b2d8ce(value) {
    var t = typeof value;
    if (t === "string") return {
        stringValue: value
    };
    if (t === "number") {
        if (!Number.isInteger(value)) return {
            doubleValue: value
        };
        return {
            intValue: value
        };
    }
    if (t === "boolean") return {
        boolValue: value
    };
    if (value instanceof Uint8Array) return {
        bytesValue: value
    };
    if (Array.isArray(value)) return {
        arrayValue: {
            values: value.map($19bb94a19549134a$export$9544ab3c60b2d8ce)
        }
    };
    if (t === "object" && value != null) return {
        kvlistValue: {
            values: Object.entries(value).map(function(_a) {
                var _b = $19bb94a19549134a$var$__read(_a, 2), k = _b[0], v = _b[1];
                return $19bb94a19549134a$export$155f69accf533147(k, v);
            })
        }
    };
    return {};
}


function $53fea4c2302ebbb4$export$8c81c8011901e012(span, encoder) {
    var _a;
    var ctx = span.spanContext();
    var status = span.status;
    return {
        traceId: encoder.encodeSpanContext(ctx.traceId),
        spanId: encoder.encodeSpanContext(ctx.spanId),
        parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),
        traceState: (_a = ctx.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),
        name: span.name,
        // Span kind is offset by 1 because the API does not define a value for unset
        kind: span.kind == null ? 0 : span.kind + 1,
        startTimeUnixNano: encoder.encodeHrTime(span.startTime),
        endTimeUnixNano: encoder.encodeHrTime(span.endTime),
        attributes: (0, $19bb94a19549134a$export$b6255b619acd6709)(span.attributes),
        droppedAttributesCount: span.droppedAttributesCount,
        events: span.events.map(function(event) {
            return $53fea4c2302ebbb4$export$c0221297e49388cc(event, encoder);
        }),
        droppedEventsCount: span.droppedEventsCount,
        status: {
            // API and proto enums share the same values
            code: status.code,
            message: status.message
        },
        links: span.links.map(function(link) {
            return $53fea4c2302ebbb4$export$d40a678c50e6f4f2(link, encoder);
        }),
        droppedLinksCount: span.droppedLinksCount
    };
}
function $53fea4c2302ebbb4$export$d40a678c50e6f4f2(link, encoder) {
    var _a;
    return {
        attributes: link.attributes ? (0, $19bb94a19549134a$export$b6255b619acd6709)(link.attributes) : [],
        spanId: encoder.encodeSpanContext(link.context.spanId),
        traceId: encoder.encodeSpanContext(link.context.traceId),
        traceState: (_a = link.context.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),
        droppedAttributesCount: link.droppedAttributesCount || 0
    };
}
function $53fea4c2302ebbb4$export$c0221297e49388cc(timedEvent, encoder) {
    return {
        attributes: timedEvent.attributes ? (0, $19bb94a19549134a$export$b6255b619acd6709)(timedEvent.attributes) : [],
        name: timedEvent.name,
        timeUnixNano: encoder.encodeHrTime(timedEvent.time),
        droppedAttributesCount: timedEvent.droppedAttributesCount || 0
    };
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $99574a2ba688d153$var$intValue(charCode) {
    // 0-9
    if (charCode >= 48 && charCode <= 57) return charCode - 48;
    // a-f
    if (charCode >= 97 && charCode <= 102) return charCode - 87;
    // A-F
    return charCode - 55;
}
function $99574a2ba688d153$export$f7e0d8803cecbdc0(hexStr) {
    var buf = new Uint8Array(hexStr.length / 2);
    var offset = 0;
    for(var i = 0; i < hexStr.length; i += 2){
        var hi = $99574a2ba688d153$var$intValue(hexStr.charCodeAt(i));
        var lo = $99574a2ba688d153$var$intValue(hexStr.charCodeAt(i + 1));
        buf[offset++] = hi << 4 | lo;
    }
    return buf;
}


function $6ded33582a9eb166$export$93fd2c60d7ab39e5(hrTime) {
    var NANOSECONDS = BigInt(1000000000);
    return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);
}
function $6ded33582a9eb166$export$25fa08d6f84e69de(value) {
    var low = Number(BigInt.asUintN(32, value));
    var high = Number(BigInt.asUintN(32, value >> BigInt(32)));
    return {
        low: low,
        high: high
    };
}
function $6ded33582a9eb166$export$9aa1c44d160043e3(hrTime) {
    var nanos = $6ded33582a9eb166$export$93fd2c60d7ab39e5(hrTime);
    return $6ded33582a9eb166$export$25fa08d6f84e69de(nanos);
}
function $6ded33582a9eb166$export$91e61e5f118af2ed(hrTime) {
    var nanos = $6ded33582a9eb166$export$93fd2c60d7ab39e5(hrTime);
    return nanos.toString();
}
var $6ded33582a9eb166$var$encodeTimestamp = typeof BigInt !== "undefined" ? $6ded33582a9eb166$export$91e61e5f118af2ed : (0, $d06339726fb5d441$export$2d91441ae30ebcfc);
function $6ded33582a9eb166$var$identity(value) {
    return value;
}
function $6ded33582a9eb166$var$optionalHexToBinary(str) {
    if (str === undefined) return undefined;
    return (0, $99574a2ba688d153$export$f7e0d8803cecbdc0)(str);
}
var $6ded33582a9eb166$var$DEFAULT_ENCODER = {
    encodeHrTime: $6ded33582a9eb166$export$9aa1c44d160043e3,
    encodeSpanContext: (0, $99574a2ba688d153$export$f7e0d8803cecbdc0),
    encodeOptionalSpanContext: $6ded33582a9eb166$var$optionalHexToBinary
};
function $6ded33582a9eb166$export$2d50162b78680823(options) {
    var _a, _b;
    if (options === undefined) return $6ded33582a9eb166$var$DEFAULT_ENCODER;
    var useLongBits = (_a = options.useLongBits) !== null && _a !== void 0 ? _a : true;
    var useHex = (_b = options.useHex) !== null && _b !== void 0 ? _b : false;
    return {
        encodeHrTime: useLongBits ? $6ded33582a9eb166$export$9aa1c44d160043e3 : $6ded33582a9eb166$var$encodeTimestamp,
        encodeSpanContext: useHex ? $6ded33582a9eb166$var$identity : (0, $99574a2ba688d153$export$f7e0d8803cecbdc0),
        encodeOptionalSpanContext: useHex ? $6ded33582a9eb166$var$identity : $6ded33582a9eb166$var$optionalHexToBinary
    };
}




function $eebfec97f75053db$export$edd172c6c83c39cc(resource) {
    return {
        attributes: (0, $19bb94a19549134a$export$b6255b619acd6709)(resource.attributes),
        droppedAttributesCount: 0
    };
}


var $6499865a28b3094f$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $6499865a28b3094f$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function $6499865a28b3094f$export$4bd5e67fadfa9fe0(spans, options) {
    var encoder = (0, $6ded33582a9eb166$export$2d50162b78680823)(options);
    return {
        resourceSpans: $6499865a28b3094f$var$spanRecordsToResourceSpans(spans, encoder)
    };
}
function $6499865a28b3094f$var$createResourceMap(readableSpans) {
    var e_1, _a;
    var resourceMap = new Map();
    try {
        for(var readableSpans_1 = $6499865a28b3094f$var$__values(readableSpans), readableSpans_1_1 = readableSpans_1.next(); !readableSpans_1_1.done; readableSpans_1_1 = readableSpans_1.next()){
            var record = readableSpans_1_1.value;
            var ilmMap = resourceMap.get(record.resource);
            if (!ilmMap) {
                ilmMap = new Map();
                resourceMap.set(record.resource, ilmMap);
            }
            // TODO this is duplicated in basic tracer. Consolidate on a common helper in core
            var instrumentationLibraryKey = record.instrumentationLibrary.name + "@" + (record.instrumentationLibrary.version || "") + ":" + (record.instrumentationLibrary.schemaUrl || "");
            var records = ilmMap.get(instrumentationLibraryKey);
            if (!records) {
                records = [];
                ilmMap.set(instrumentationLibraryKey, records);
            }
            records.push(record);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (readableSpans_1_1 && !readableSpans_1_1.done && (_a = readableSpans_1.return)) _a.call(readableSpans_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return resourceMap;
}
function $6499865a28b3094f$var$spanRecordsToResourceSpans(readableSpans, encoder) {
    var resourceMap = $6499865a28b3094f$var$createResourceMap(readableSpans);
    var out = [];
    var entryIterator = resourceMap.entries();
    var entry = entryIterator.next();
    while(!entry.done){
        var _a = $6499865a28b3094f$var$__read(entry.value, 2), resource = _a[0], ilmMap = _a[1];
        var scopeResourceSpans = [];
        var ilmIterator = ilmMap.values();
        var ilmEntry = ilmIterator.next();
        while(!ilmEntry.done){
            var scopeSpans = ilmEntry.value;
            if (scopeSpans.length > 0) {
                var spans = scopeSpans.map(function(readableSpan) {
                    return (0, $53fea4c2302ebbb4$export$8c81c8011901e012)(readableSpan, encoder);
                });
                scopeResourceSpans.push({
                    scope: (0, $19bb94a19549134a$export$5a2377b8e90dd1bf)(scopeSpans[0].instrumentationLibrary),
                    spans: spans,
                    schemaUrl: scopeSpans[0].instrumentationLibrary.schemaUrl
                });
            }
            ilmEntry = ilmIterator.next();
        }
        // TODO SDK types don't provide resource schema URL at this time
        var transformedSpans = {
            resource: (0, $eebfec97f75053db$export$edd172c6c83c39cc)(resource),
            scopeSpans: scopeResourceSpans,
            schemaUrl: undefined
        };
        out.push(transformedSpans);
        entry = entryIterator.next();
    }
    return out;
}



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * AggregationTemporality indicates the way additive quantities are expressed.
 */ var $f0eb4c5eece3b087$export$679eaf10b59c0fb6;
(function(AggregationTemporality) {
    AggregationTemporality[AggregationTemporality["DELTA"] = 0] = "DELTA";
    AggregationTemporality[AggregationTemporality["CUMULATIVE"] = 1] = "CUMULATIVE";
})($f0eb4c5eece3b087$export$679eaf10b59c0fb6 || ($f0eb4c5eece3b087$export$679eaf10b59c0fb6 = {}));

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The aggregated point data type.
 */ var $7fb4008a528a9009$export$ab80bc47114adffb;
(function(DataPointType) {
    /**
     * A histogram data point contains a histogram statistics of collected
     * values with a list of explicit bucket boundaries and statistics such
     * as min, max, count, and sum of all collected values.
     */ DataPointType[DataPointType["HISTOGRAM"] = 0] = "HISTOGRAM";
    /**
     * An exponential histogram data point contains a histogram statistics of
     * collected values where bucket boundaries are automatically calculated
     * using an exponential function, and statistics such as min, max, count,
     * and sum of all collected values.
     */ DataPointType[DataPointType["EXPONENTIAL_HISTOGRAM"] = 1] = "EXPONENTIAL_HISTOGRAM";
    /**
     * A gauge metric data point has only a single numeric value.
     */ DataPointType[DataPointType["GAUGE"] = 2] = "GAUGE";
    /**
     * A sum metric data point has a single numeric value and a
     * monotonicity-indicator.
     */ DataPointType[DataPointType["SUM"] = 3] = "SUM";
})($7fb4008a528a9009$export$ab80bc47114adffb || ($7fb4008a528a9009$export$ab80bc47114adffb = {}));





function $da3348dd666f3521$export$4bd1f5f04f2e76e7(resourceMetrics, options) {
    var encoder = (0, $6ded33582a9eb166$export$2d50162b78680823)(options);
    return {
        resource: (0, $eebfec97f75053db$export$edd172c6c83c39cc)(resourceMetrics.resource),
        schemaUrl: undefined,
        scopeMetrics: $da3348dd666f3521$export$b61ebd2fe6a99df0(resourceMetrics.scopeMetrics, encoder)
    };
}
function $da3348dd666f3521$export$b61ebd2fe6a99df0(scopeMetrics, encoder) {
    return Array.from(scopeMetrics.map(function(metrics) {
        return {
            scope: (0, $19bb94a19549134a$export$5a2377b8e90dd1bf)(metrics.scope),
            metrics: metrics.metrics.map(function(metricData) {
                return $da3348dd666f3521$export$c4dede0d28ee35f3(metricData, encoder);
            }),
            schemaUrl: metrics.scope.schemaUrl
        };
    }));
}
function $da3348dd666f3521$export$c4dede0d28ee35f3(metricData, encoder) {
    var out = {
        name: metricData.descriptor.name,
        description: metricData.descriptor.description,
        unit: metricData.descriptor.unit
    };
    var aggregationTemporality = $da3348dd666f3521$var$toAggregationTemporality(metricData.aggregationTemporality);
    switch(metricData.dataPointType){
        case (0, $7fb4008a528a9009$export$ab80bc47114adffb).SUM:
            out.sum = {
                aggregationTemporality: aggregationTemporality,
                isMonotonic: metricData.isMonotonic,
                dataPoints: $da3348dd666f3521$var$toSingularDataPoints(metricData, encoder)
            };
            break;
        case (0, $7fb4008a528a9009$export$ab80bc47114adffb).GAUGE:
            out.gauge = {
                dataPoints: $da3348dd666f3521$var$toSingularDataPoints(metricData, encoder)
            };
            break;
        case (0, $7fb4008a528a9009$export$ab80bc47114adffb).HISTOGRAM:
            out.histogram = {
                aggregationTemporality: aggregationTemporality,
                dataPoints: $da3348dd666f3521$var$toHistogramDataPoints(metricData, encoder)
            };
            break;
        case (0, $7fb4008a528a9009$export$ab80bc47114adffb).EXPONENTIAL_HISTOGRAM:
            out.exponentialHistogram = {
                aggregationTemporality: aggregationTemporality,
                dataPoints: $da3348dd666f3521$var$toExponentialHistogramDataPoints(metricData, encoder)
            };
            break;
    }
    return out;
}
function $da3348dd666f3521$var$toSingularDataPoint(dataPoint, valueType, encoder) {
    var out = {
        attributes: (0, $19bb94a19549134a$export$b6255b619acd6709)(dataPoint.attributes),
        startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),
        timeUnixNano: encoder.encodeHrTime(dataPoint.endTime)
    };
    switch(valueType){
        case (0, $25cae033094ccbf5$export$f1921b45c66f982c).INT:
            out.asInt = dataPoint.value;
            break;
        case (0, $25cae033094ccbf5$export$f1921b45c66f982c).DOUBLE:
            out.asDouble = dataPoint.value;
            break;
    }
    return out;
}
function $da3348dd666f3521$var$toSingularDataPoints(metricData, encoder) {
    return metricData.dataPoints.map(function(dataPoint) {
        return $da3348dd666f3521$var$toSingularDataPoint(dataPoint, metricData.descriptor.valueType, encoder);
    });
}
function $da3348dd666f3521$var$toHistogramDataPoints(metricData, encoder) {
    return metricData.dataPoints.map(function(dataPoint) {
        var histogram = dataPoint.value;
        return {
            attributes: (0, $19bb94a19549134a$export$b6255b619acd6709)(dataPoint.attributes),
            bucketCounts: histogram.buckets.counts,
            explicitBounds: histogram.buckets.boundaries,
            count: histogram.count,
            sum: histogram.sum,
            min: histogram.min,
            max: histogram.max,
            startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),
            timeUnixNano: encoder.encodeHrTime(dataPoint.endTime)
        };
    });
}
function $da3348dd666f3521$var$toExponentialHistogramDataPoints(metricData, encoder) {
    return metricData.dataPoints.map(function(dataPoint) {
        var histogram = dataPoint.value;
        return {
            attributes: (0, $19bb94a19549134a$export$b6255b619acd6709)(dataPoint.attributes),
            count: histogram.count,
            min: histogram.min,
            max: histogram.max,
            sum: histogram.sum,
            positive: {
                offset: histogram.positive.offset,
                bucketCounts: histogram.positive.bucketCounts
            },
            negative: {
                offset: histogram.negative.offset,
                bucketCounts: histogram.negative.bucketCounts
            },
            scale: histogram.scale,
            zeroCount: histogram.zeroCount,
            startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),
            timeUnixNano: encoder.encodeHrTime(dataPoint.endTime)
        };
    });
}
function $da3348dd666f3521$var$toAggregationTemporality(temporality) {
    switch(temporality){
        case (0, $f0eb4c5eece3b087$export$679eaf10b59c0fb6).DELTA:
            return 1 /* AGGREGATION_TEMPORALITY_DELTA */ ;
        case (0, $f0eb4c5eece3b087$export$679eaf10b59c0fb6).CUMULATIVE:
            return 2 /* AGGREGATION_TEMPORALITY_CUMULATIVE */ ;
    }
}


function $78ece00176d150d4$export$5810c6592a5368b8(resourceMetrics, options) {
    return {
        resourceMetrics: resourceMetrics.map(function(metrics) {
            return (0, $da3348dd666f3521$export$4bd1f5f04f2e76e7)(metrics, options);
        })
    };
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 


var $5b8a649bcc3d45b6$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $5b8a649bcc3d45b6$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function $5b8a649bcc3d45b6$export$5700a2327d5ce50d(logRecords, options) {
    var encoder = (0, $6ded33582a9eb166$export$2d50162b78680823)(options);
    return {
        resourceLogs: $5b8a649bcc3d45b6$var$logRecordsToResourceLogs(logRecords, encoder)
    };
}
function $5b8a649bcc3d45b6$var$createResourceMap(logRecords) {
    var e_1, _a;
    var resourceMap = new Map();
    try {
        for(var logRecords_1 = $5b8a649bcc3d45b6$var$__values(logRecords), logRecords_1_1 = logRecords_1.next(); !logRecords_1_1.done; logRecords_1_1 = logRecords_1.next()){
            var record = logRecords_1_1.value;
            var resource = record.resource, _b = record.instrumentationScope, name_1 = _b.name, _c = _b.version, version = _c === void 0 ? "" : _c, _d = _b.schemaUrl, schemaUrl = _d === void 0 ? "" : _d;
            var ismMap = resourceMap.get(resource);
            if (!ismMap) {
                ismMap = new Map();
                resourceMap.set(resource, ismMap);
            }
            var ismKey = name_1 + "@" + version + ":" + schemaUrl;
            var records = ismMap.get(ismKey);
            if (!records) {
                records = [];
                ismMap.set(ismKey, records);
            }
            records.push(record);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (logRecords_1_1 && !logRecords_1_1.done && (_a = logRecords_1.return)) _a.call(logRecords_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return resourceMap;
}
function $5b8a649bcc3d45b6$var$logRecordsToResourceLogs(logRecords, encoder) {
    var resourceMap = $5b8a649bcc3d45b6$var$createResourceMap(logRecords);
    return Array.from(resourceMap, function(_a) {
        var _b = $5b8a649bcc3d45b6$var$__read(_a, 2), resource = _b[0], ismMap = _b[1];
        return {
            resource: (0, $eebfec97f75053db$export$edd172c6c83c39cc)(resource),
            scopeLogs: Array.from(ismMap, function(_a) {
                var _b = $5b8a649bcc3d45b6$var$__read(_a, 2), scopeLogs = _b[1];
                return {
                    scope: (0, $19bb94a19549134a$export$5a2377b8e90dd1bf)(scopeLogs[0].instrumentationScope),
                    logRecords: scopeLogs.map(function(log) {
                        return $5b8a649bcc3d45b6$var$toLogRecord(log, encoder);
                    }),
                    schemaUrl: scopeLogs[0].instrumentationScope.schemaUrl
                };
            }),
            schemaUrl: undefined
        };
    });
}
function $5b8a649bcc3d45b6$var$toLogRecord(log, encoder) {
    var _a, _b, _c;
    return {
        timeUnixNano: encoder.encodeHrTime(log.hrTime),
        observedTimeUnixNano: encoder.encodeHrTime(log.hrTimeObserved),
        severityNumber: $5b8a649bcc3d45b6$var$toSeverityNumber(log.severityNumber),
        severityText: log.severityText,
        body: (0, $19bb94a19549134a$export$9544ab3c60b2d8ce)(log.body),
        attributes: $5b8a649bcc3d45b6$export$76409c6e9b7f33ec(log.attributes),
        droppedAttributesCount: log.droppedAttributesCount,
        flags: (_a = log.spanContext) === null || _a === void 0 ? void 0 : _a.traceFlags,
        traceId: encoder.encodeOptionalSpanContext((_b = log.spanContext) === null || _b === void 0 ? void 0 : _b.traceId),
        spanId: encoder.encodeOptionalSpanContext((_c = log.spanContext) === null || _c === void 0 ? void 0 : _c.spanId)
    };
}
function $5b8a649bcc3d45b6$var$toSeverityNumber(severityNumber) {
    return severityNumber;
}
function $5b8a649bcc3d45b6$export$76409c6e9b7f33ec(attributes) {
    return Object.keys(attributes).map(function(key) {
        return (0, $19bb94a19549134a$export$155f69accf533147)(key, attributes[key]);
    });
}


var $f0f677d21bd12431$export$dfba2b8376f2d3f5 = {
    serializeRequest: function(arg) {
        var request = (0, $6499865a28b3094f$export$4bd5e67fadfa9fe0)(arg, {
            useHex: true,
            useLongBits: false
        });
        var encoder = new TextEncoder();
        return encoder.encode(JSON.stringify(request));
    },
    deserializeResponse: function(arg) {
        var decoder = new TextDecoder();
        return JSON.parse(decoder.decode(arg));
    }
};
var $f0f677d21bd12431$export$101e77d9846ae2ef = {
    serializeRequest: function(arg) {
        var request = (0, $78ece00176d150d4$export$5810c6592a5368b8)(arg, {
            useLongBits: false
        });
        var encoder = new TextEncoder();
        return encoder.encode(JSON.stringify(request));
    },
    deserializeResponse: function(arg) {
        var decoder = new TextDecoder();
        return JSON.parse(decoder.decode(arg));
    }
};
var $f0f677d21bd12431$export$ee58b240ff91dc51 = {
    serializeRequest: function(arg) {
        var request = (0, $5b8a649bcc3d45b6$export$5700a2327d5ce50d)(arg, {
            useHex: true,
            useLongBits: false
        });
        var encoder = new TextEncoder();
        return encoder.encode(JSON.stringify(request));
    },
    deserializeResponse: function(arg) {
        var decoder = new TextDecoder();
        return JSON.parse(decoder.decode(arg));
    }
};


var $eef854ea05b36022$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $eef854ea05b36022$var$DEFAULT_COLLECTOR_RESOURCE_PATH = "v1/traces";
/**
 * Collector Trace Exporter for Web
 */ var $eef854ea05b36022$export$f73dc942b4b27de3 = /** @class */ function(_super) {
    $eef854ea05b36022$var$__extends(OTLPTraceExporter, _super);
    function OTLPTraceExporter(config) {
        if (config === void 0) config = {};
        return _super.call(this, config, (0, $f0f677d21bd12431$export$dfba2b8376f2d3f5), {
            "Content-Type": "application/json"
        }, $eef854ea05b36022$var$DEFAULT_COLLECTOR_RESOURCE_PATH) || this;
    }
    return OTLPTraceExporter;
}((0, $083c7c7e0529c844$export$d0874567cb949b29));



var $2e7c5eeb38eeb049$exports = {};
"use strict";
function $2e7c5eeb38eeb049$var$isFunction(funktion) {
    return typeof funktion === "function";
}
// Default to complaining loudly when things don't go according to plan.
var $2e7c5eeb38eeb049$var$logger = console.error.bind(console);
// Sets a property on an object, preserving its enumerability.
// This function assumes that the property is already writable.
function $2e7c5eeb38eeb049$var$defineProperty(obj, name, value) {
    var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);
    Object.defineProperty(obj, name, {
        configurable: true,
        enumerable: enumerable,
        writable: true,
        value: value
    });
}
// Keep initialization idempotent.
function $2e7c5eeb38eeb049$var$shimmer(options) {
    if (options && options.logger) {
        if (!$2e7c5eeb38eeb049$var$isFunction(options.logger)) $2e7c5eeb38eeb049$var$logger("new logger isn't a function, not replacing");
        else $2e7c5eeb38eeb049$var$logger = options.logger;
    }
}
function $2e7c5eeb38eeb049$var$wrap(nodule, name, wrapper) {
    if (!nodule || !nodule[name]) {
        $2e7c5eeb38eeb049$var$logger("no original function " + name + " to wrap");
        return;
    }
    if (!wrapper) {
        $2e7c5eeb38eeb049$var$logger("no wrapper function");
        $2e7c5eeb38eeb049$var$logger(new Error().stack);
        return;
    }
    if (!$2e7c5eeb38eeb049$var$isFunction(nodule[name]) || !$2e7c5eeb38eeb049$var$isFunction(wrapper)) {
        $2e7c5eeb38eeb049$var$logger("original object and wrapper must be functions");
        return;
    }
    var original = nodule[name];
    var wrapped = wrapper(original, name);
    $2e7c5eeb38eeb049$var$defineProperty(wrapped, "__original", original);
    $2e7c5eeb38eeb049$var$defineProperty(wrapped, "__unwrap", function() {
        if (nodule[name] === wrapped) $2e7c5eeb38eeb049$var$defineProperty(nodule, name, original);
    });
    $2e7c5eeb38eeb049$var$defineProperty(wrapped, "__wrapped", true);
    $2e7c5eeb38eeb049$var$defineProperty(nodule, name, wrapped);
    return wrapped;
}
function $2e7c5eeb38eeb049$var$massWrap(nodules, names, wrapper) {
    if (!nodules) {
        $2e7c5eeb38eeb049$var$logger("must provide one or more modules to patch");
        $2e7c5eeb38eeb049$var$logger(new Error().stack);
        return;
    } else if (!Array.isArray(nodules)) nodules = [
        nodules
    ];
    if (!(names && Array.isArray(names))) {
        $2e7c5eeb38eeb049$var$logger("must provide one or more functions to wrap on modules");
        return;
    }
    nodules.forEach(function(nodule) {
        names.forEach(function(name) {
            $2e7c5eeb38eeb049$var$wrap(nodule, name, wrapper);
        });
    });
}
function $2e7c5eeb38eeb049$var$unwrap(nodule, name) {
    if (!nodule || !nodule[name]) {
        $2e7c5eeb38eeb049$var$logger("no function to unwrap.");
        $2e7c5eeb38eeb049$var$logger(new Error().stack);
        return;
    }
    if (!nodule[name].__unwrap) $2e7c5eeb38eeb049$var$logger("no original to unwrap to -- has " + name + " already been unwrapped?");
    else return nodule[name].__unwrap();
}
function $2e7c5eeb38eeb049$var$massUnwrap(nodules, names) {
    if (!nodules) {
        $2e7c5eeb38eeb049$var$logger("must provide one or more modules to patch");
        $2e7c5eeb38eeb049$var$logger(new Error().stack);
        return;
    } else if (!Array.isArray(nodules)) nodules = [
        nodules
    ];
    if (!(names && Array.isArray(names))) {
        $2e7c5eeb38eeb049$var$logger("must provide one or more functions to unwrap on modules");
        return;
    }
    nodules.forEach(function(nodule) {
        names.forEach(function(name) {
            $2e7c5eeb38eeb049$var$unwrap(nodule, name);
        });
    });
}
$2e7c5eeb38eeb049$var$shimmer.wrap = $2e7c5eeb38eeb049$var$wrap;
$2e7c5eeb38eeb049$var$shimmer.massWrap = $2e7c5eeb38eeb049$var$massWrap;
$2e7c5eeb38eeb049$var$shimmer.unwrap = $2e7c5eeb38eeb049$var$unwrap;
$2e7c5eeb38eeb049$var$shimmer.massUnwrap = $2e7c5eeb38eeb049$var$massUnwrap;
$2e7c5eeb38eeb049$exports = $2e7c5eeb38eeb049$var$shimmer;



var $9qQwD = parcelRequire("9qQwD");
// This code will eventually be packaged upstream into a WebSDK package.
// Once it is released as a package, this distro will depend directly on the upstream package.
// https://github.com/open-telemetry/opentelemetry-js/pull/4325
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $15ec3fbdf86c3b66$var$SESSION_ID_BYTES = 16;
const $15ec3fbdf86c3b66$var$SHARED_CHAR_CODES_ARRAY = Array(32);
class $15ec3fbdf86c3b66$var$SessionIdSpanProcessor {
    constructor(){
        this._idGenerator = $15ec3fbdf86c3b66$var$getIdGenerator($15ec3fbdf86c3b66$var$SESSION_ID_BYTES);
        this._sessionId = this._idGenerator();
    }
    onStart(span) {
        span.setAttribute("session.id", this._sessionId);
    }
    onEnd() {}
    forceFlush() {
        return Promise.resolve();
    }
    shutdown() {
        return Promise.resolve();
    }
}
function $15ec3fbdf86c3b66$var$getIdGenerator(bytes) {
    return function generateId() {
        for(let i = 0; i < bytes * 2; i++){
            $15ec3fbdf86c3b66$var$SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;
            // valid hex characters in the range 48-57 and 97-102
            if ($15ec3fbdf86c3b66$var$SHARED_CHAR_CODES_ARRAY[i] >= 58) $15ec3fbdf86c3b66$var$SHARED_CHAR_CODES_ARRAY[i] += 39;
        }
        return String.fromCharCode.apply(null, $15ec3fbdf86c3b66$var$SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));
    };
}
// This code will eventually be packaged upstream into a WebSDK package.
// Once it is released as a package, this distro will depend directly on the upstream package.
// https://github.com/open-telemetry/opentelemetry-js/pull/4325
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** This class represents everything needed to register a fully configured OpenTelemetry Web SDK */ class $15ec3fbdf86c3b66$export$491dd6ac0de3c7f8 {
    /**
   * Create a new Web SDK instance
   */ constructor(configuration = {}){
        var _a, _b, _c, _d;
        this._resource = (_a = configuration.resource) !== null && _a !== void 0 ? _a : new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)({});
        this._resourceDetectors = (_b = configuration.resourceDetectors) !== null && _b !== void 0 ? _b : [
            (0, $5983bdc1e50ed1ad$export$a23a90002feb7ef)
        ];
        this._serviceName = configuration.serviceName;
        this._autoDetectResources = (_c = configuration.autoDetectResources) !== null && _c !== void 0 ? _c : true;
        if (configuration.spanProcessor || configuration.traceExporter) {
            const tracerProviderConfig = {};
            if (configuration.sampler) tracerProviderConfig.sampler = configuration.sampler;
            if (configuration.spanLimits) tracerProviderConfig.spanLimits = configuration.spanLimits;
            if (configuration.idGenerator) tracerProviderConfig.idGenerator = configuration.idGenerator;
            const spanProcessor = (_d = configuration.spanProcessor) !== null && _d !== void 0 ? _d : new (0, $24ab59accace2f6a$export$237547059fd543f9)(configuration.traceExporter);
            this._tracerProviderConfig = {
                tracerConfig: tracerProviderConfig,
                spanProcessor: spanProcessor,
                contextManager: configuration.contextManager,
                textMapPropagator: configuration.textMapPropagator
            };
        }
        let instrumentations = [];
        if (configuration.instrumentations) instrumentations = configuration.instrumentations;
        this._instrumentations = instrumentations;
    }
    /**
   * Call this method to construct SDK components and register them with the OpenTelemetry API.
   */ start() {
        var _a, _b, _c;
        if (this._disabled) return;
        (0, $dfa56a393e7e8c2d$export$fc0a1ca5231d826a)({
            instrumentations: this._instrumentations
        });
        if (this._autoDetectResources) {
            const internalConfig = {
                detectors: this._resourceDetectors
            };
            this._resource = this._resource.merge((0, $b13ce36311cda672$export$a2167465c63b94e6)(internalConfig));
        }
        this._resource = this._serviceName === undefined ? this._resource : this._resource.merge(new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)({
            [(0, $a3ccf1b927a8c1e8$export$48c68257f49298c9)]: this._serviceName
        }));
        const tracerProvider = new (0, $a02addadea16a97a$export$a785009afeee3453)(Object.assign(Object.assign({}, (_a = this._tracerProviderConfig) === null || _a === void 0 ? void 0 : _a.tracerConfig), {
            resource: this._resource
        }));
        this._tracerProvider = tracerProvider;
        if (this._tracerProviderConfig) tracerProvider.addSpanProcessor(this._tracerProviderConfig.spanProcessor);
        tracerProvider.register({
            contextManager: (_b = this._tracerProviderConfig) === null || _b === void 0 ? void 0 : _b.contextManager,
            propagator: (_c = this._tracerProviderConfig) === null || _c === void 0 ? void 0 : _c.textMapPropagator
        });
        // add processor for adding the sessionId attribute
        tracerProvider.addSpanProcessor(new $15ec3fbdf86c3b66$var$SessionIdSpanProcessor());
    }
    /* Experimental getter method: not currently part of the upstream
   * sdk's API */ getResourceAttributes() {
        return this._resource.attributes;
    }
    shutdown() {
        const promises = [];
        if (this._tracerProvider) promises.push(this._tracerProvider.shutdown());
        return Promise.all(promises)// return void instead of the array from Promise.all
        .then(()=>{});
    }
}
const $15ec3fbdf86c3b66$var$VERSION = "0.10.0";
function $15ec3fbdf86c3b66$var$configureHoneycombResource() {
    return new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)({
        "honeycomb.distro.version": $15ec3fbdf86c3b66$var$VERSION,
        "honeycomb.distro.runtime_version": "browser"
    });
}
const $15ec3fbdf86c3b66$var$defaultConfig = {
    path: true,
    hash: true,
    hostname: true,
    referrer: true,
    url: false,
    search: false
};
function $15ec3fbdf86c3b66$var$configureEntryPageResource(config) {
    if (config === false || !(window === null || window === void 0 ? void 0 : window.location)) return new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)({});
    const options = $15ec3fbdf86c3b66$var$getOptions(config);
    const { href: href, pathname: pathname, search: search, hash: hash, hostname: hostname } = window.location;
    const attributes = {
        "entry_page.url": $15ec3fbdf86c3b66$var$optionalAttribute(options.url, href),
        "entry_page.path": $15ec3fbdf86c3b66$var$optionalAttribute(options.path, pathname),
        "entry_page.search": $15ec3fbdf86c3b66$var$optionalAttribute(options.search, search),
        "entry_page.hash": $15ec3fbdf86c3b66$var$optionalAttribute(options.hash, hash),
        "entry_page.hostname": $15ec3fbdf86c3b66$var$optionalAttribute(options.hostname, hostname),
        "entry_page.referrer": $15ec3fbdf86c3b66$var$optionalAttribute(options.referrer, document.referrer)
    };
    return new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)(attributes);
}
function $15ec3fbdf86c3b66$var$getOptions(config) {
    if (!config) return $15ec3fbdf86c3b66$var$defaultConfig;
    return Object.assign(Object.assign({}, $15ec3fbdf86c3b66$var$defaultConfig), config);
}
function $15ec3fbdf86c3b66$var$optionalAttribute(shouldInclude, attribute) {
    if (!shouldInclude) return undefined;
    return attribute;
}
const $15ec3fbdf86c3b66$var$computeScreenSize = (screenWidth)=>{
    if (screenWidth <= 768) return "small";
    else if (screenWidth > 768 && screenWidth <= 1024) return "medium";
    else if (screenWidth > 1024) return "large";
    return "unknown";
};
const $15ec3fbdf86c3b66$var$computeNetworkType = (networkInformation)=>{
    var _a;
    return (_a = networkInformation === null || networkInformation === void 0 ? void 0 : networkInformation.effectiveType) !== null && _a !== void 0 ? _a : "unknown";
};
const $15ec3fbdf86c3b66$var$computeDeviceType = (detectedDeviceType, detectedBrowserName)=>{
    // ua-parser-js doesn't fill in device type unless it's in the user agent directly
    // which means that desktops/laptops show up as undefined
    // https://github.com/faisalman/ua-parser-js/issues/182
    //
    // we're going to do this:
    // browser name & device type both undefined -> unknown
    // browser name defined & device type undefined -> desktop
    // device type defined -> use that
    if (!detectedDeviceType && !detectedBrowserName) return "unknown";
    if (!detectedDeviceType) return "desktop";
    return detectedDeviceType;
};
const $15ec3fbdf86c3b66$var$computeDeviceProperties = (userAgent)=>{
    const uaParser = new (0, (/*@__PURE__*/$parcel$interopDefault($6Wt0I)))(userAgent);
    const { name: browserName, version: browserVersion } = uaParser.getBrowser();
    return {
        browserName: browserName !== null && browserName !== void 0 ? browserName : "unknown",
        browserVersion: browserVersion !== null && browserVersion !== void 0 ? browserVersion : "unknown",
        deviceType: $15ec3fbdf86c3b66$var$computeDeviceType(uaParser.getDevice().type, browserName)
    };
};
function $15ec3fbdf86c3b66$var$configureBrowserAttributesResource() {
    const { browserName: browserName, browserVersion: browserVersion, deviceType: deviceType } = $15ec3fbdf86c3b66$var$computeDeviceProperties(navigator.userAgent);
    return new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)({
        "user_agent.original": navigator.userAgent,
        //https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#mobile_tablet_or_desktop
        "browser.mobile": navigator.userAgent.includes("Mobi"),
        "browser.touch_screen_enabled": navigator.maxTouchPoints > 0,
        "browser.language": navigator.language,
        "browser.name": browserName,
        "browser.version": browserVersion,
        "device.type": deviceType,
        "network.effectiveType": $15ec3fbdf86c3b66$var$computeNetworkType(navigator.connection),
        "screen.width": window.screen.width,
        "screen.height": window.screen.height,
        "screen.size": $15ec3fbdf86c3b66$var$computeScreenSize(window.screen.width)
    });
}
/* Takes an array of resources and merges into one mega-resource */ function $15ec3fbdf86c3b66$var$mergeResources(resources) {
    let mergedResources = $15ec3fbdf86c3b66$var$validateResource(resources[0]);
    for(let i = 1; i < resources.length; i++){
        if (!resources[i]) continue;
        const resource = $15ec3fbdf86c3b66$var$validateResource(resources[i]);
        mergedResources = mergedResources.merge(resource);
    }
    return mergedResources;
}
function $15ec3fbdf86c3b66$var$validateResource(resource) {
    if (resource instanceof (0, $eaedecc9905e0881$export$39a853cfb5a94a63)) return resource;
    if (resource) return new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)(resource);
    return new (0, $eaedecc9905e0881$export$39a853cfb5a94a63)({});
}
// Constants
const $15ec3fbdf86c3b66$var$DEFAULT_API_ENDPOINT = "https://api.honeycomb.io";
const $15ec3fbdf86c3b66$var$TRACES_PATH = "v1/traces";
const $15ec3fbdf86c3b66$var$DEFAULT_TRACES_ENDPOINT = `${$15ec3fbdf86c3b66$var$DEFAULT_API_ENDPOINT}/${$15ec3fbdf86c3b66$var$TRACES_PATH}`;
const $15ec3fbdf86c3b66$var$DEFAULT_SERVICE_NAME = "unknown_service";
const $15ec3fbdf86c3b66$var$DEFAULT_SAMPLE_RATE = 1;
/**
 * Default options for the Honeycomb Web SDK.
 */ const $15ec3fbdf86c3b66$var$defaultOptions = {
    apiKey: "",
    tracesApiKey: "",
    endpoint: $15ec3fbdf86c3b66$var$DEFAULT_TRACES_ENDPOINT,
    tracesEndpoint: $15ec3fbdf86c3b66$var$DEFAULT_TRACES_ENDPOINT,
    serviceName: $15ec3fbdf86c3b66$var$DEFAULT_SERVICE_NAME,
    debug: false,
    sampleRate: 1,
    skipOptionsValidation: false,
    localVisualizations: false,
    webVitalsInstrumentationConfig: {
        enabled: true
    }
};
const $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage = (message)=>`@honeycombio/opentelemetry-web: ${message}`;
const $15ec3fbdf86c3b66$var$classicKeyRegex = /^[a-f0-9]*$/;
const $15ec3fbdf86c3b66$var$ingestClassicKeyRegex = /^hc[a-z]ic_[a-z0-9]*$/;
/**
 * Determines whether the passed in apikey is classic or not.
 *
 * @param apikey the apikey
 * @returns a boolean to indicate if the apikey was a classic key
 */ function $15ec3fbdf86c3b66$var$isClassic(apikey) {
    if (apikey == null || apikey.length === 0) return false;
    else if (apikey.length === 32) return $15ec3fbdf86c3b66$var$classicKeyRegex.test(apikey);
    else if (apikey.length === 64) return $15ec3fbdf86c3b66$var$ingestClassicKeyRegex.test(apikey);
    return false;
}
/**
 * Checks for and appends v1/traces to provided URL if missing when using an HTTP
 * based exporter protocol.
 *
 * @param url the base URL to append traces path to if missing
 * @returns the endpoint with traces path appended if missing
 */ function $15ec3fbdf86c3b66$var$maybeAppendTracesPath(url) {
    if (url.endsWith($15ec3fbdf86c3b66$var$TRACES_PATH) || url.endsWith(`${$15ec3fbdf86c3b66$var$TRACES_PATH}/`)) return url;
    return url.endsWith("/") ? url + $15ec3fbdf86c3b66$var$TRACES_PATH : url + "/" + $15ec3fbdf86c3b66$var$TRACES_PATH;
}
const $15ec3fbdf86c3b66$var$getTracesEndpoint = (options)=>{
    // use `tracesEndpoint` option unchanged if provided
    if (options === null || options === void 0 ? void 0 : options.tracesEndpoint) return options.tracesEndpoint;
    // use `endpoint` option if provided and append '/v1/traces' if not already appended
    if (options === null || options === void 0 ? void 0 : options.endpoint) return $15ec3fbdf86c3b66$var$maybeAppendTracesPath(options.endpoint);
    return $15ec3fbdf86c3b66$var$DEFAULT_TRACES_ENDPOINT;
};
const $15ec3fbdf86c3b66$var$getTracesApiKey = (options)=>{
    return (options === null || options === void 0 ? void 0 : options.tracesApiKey) || (options === null || options === void 0 ? void 0 : options.apiKey);
};
const $15ec3fbdf86c3b66$var$getSampleRate = (options)=>{
    if (// must be a whole positive integer
    typeof (options === null || options === void 0 ? void 0 : options.sampleRate) === "number" && Number.isSafeInteger(options === null || options === void 0 ? void 0 : options.sampleRate) && (options === null || options === void 0 ? void 0 : options.sampleRate) >= 0) return options === null || options === void 0 ? void 0 : options.sampleRate;
    return $15ec3fbdf86c3b66$var$DEFAULT_SAMPLE_RATE;
};
const $15ec3fbdf86c3b66$var$MISSING_API_KEY_ERROR = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\u274C Missing API Key. Set `apiKey` in HoneycombOptions. Telemetry will not be exported.");
const $15ec3fbdf86c3b66$var$MISSING_SERVICE_NAME_ERROR = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage(`\u{274C} Missing Service Name. Set \`serviceName\` in HoneycombOptions. Defaulting to '${$15ec3fbdf86c3b66$var$defaultOptions.serviceName}'`);
const $15ec3fbdf86c3b66$var$IGNORED_DATASET_ERROR = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\uD83D\uDD15 Dataset is ignored in favor of service name.");
const $15ec3fbdf86c3b66$var$MISSING_DATASET_ERROR = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\u274C Missing dataset. Specify either HONEYCOMB_DATASET environment variable or dataset in the options parameter.");
const $15ec3fbdf86c3b66$var$SKIPPING_OPTIONS_VALIDATION_MSG = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\u23ED\uFE0F Skipping options validation. To re-enable, set skipOptionsValidation option or HONEYCOMB_SKIP_OPTIONS_VALIDATION to false.");
const $15ec3fbdf86c3b66$var$SAMPLER_OVERRIDE_WARNING = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\uD83D\uDD28 Default deterministic sampler has been overridden. Honeycomb requires a resource attribute called SampleRate to properly show weighted values. Non-deterministic sampleRate could lead to missing spans in Honeycomb. See our docs for more details. https://docs.honeycomb.io/getting-data-in/opentelemetry/node-distro/#sampling-without-the-honeycomb-sdk");
const $15ec3fbdf86c3b66$var$MISSING_FIELDS_FOR_LOCAL_VISUALIZATIONS = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\uD83D\uDD15 Disabling local visualizations - must have both service name and API key configured.");
const $15ec3fbdf86c3b66$var$FAILED_AUTH_FOR_LOCAL_VISUALIZATIONS = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\uD83D\uDD15 Failed to get proper auth response from Honeycomb. No local visualization available.");
const $15ec3fbdf86c3b66$var$NO_EXPORTERS_DISABLED_DEFAULT = $15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\uD83D\uDD15 Default honeycomb exporter disabled but no exporters provided");
const $15ec3fbdf86c3b66$var$validateOptionsWarnings = (options)=>{
    var _a;
    const logLevel = (options === null || options === void 0 ? void 0 : options.logLevel) ? options.logLevel : (0, $2fde396648409cca$export$b7d7b4c0f3c95263).DEBUG;
    if (options === null || options === void 0 ? void 0 : options.skipOptionsValidation) {
        if (logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).DEBUG) console.debug($15ec3fbdf86c3b66$var$SKIPPING_OPTIONS_VALIDATION_MSG);
        return;
    }
    // warn if api key is missing
    if (!(options === null || options === void 0 ? void 0 : options.apiKey) && logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).WARN) console.warn($15ec3fbdf86c3b66$var$MISSING_API_KEY_ERROR);
    // warn if service name is missing
    if (!(options === null || options === void 0 ? void 0 : options.serviceName) && logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).WARN) console.warn($15ec3fbdf86c3b66$var$MISSING_SERVICE_NAME_ERROR);
    // warn if dataset is set while using an environment-aware key
    if ((options === null || options === void 0 ? void 0 : options.apiKey) && !$15ec3fbdf86c3b66$var$isClassic(options === null || options === void 0 ? void 0 : options.apiKey) && (options === null || options === void 0 ? void 0 : options.dataset) && logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).WARN) console.warn($15ec3fbdf86c3b66$var$IGNORED_DATASET_ERROR);
    // warn if dataset is missing if using classic key
    if ((options === null || options === void 0 ? void 0 : options.apiKey) && $15ec3fbdf86c3b66$var$isClassic(options === null || options === void 0 ? void 0 : options.apiKey) && !(options === null || options === void 0 ? void 0 : options.dataset) && logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).WARN) console.warn($15ec3fbdf86c3b66$var$MISSING_DATASET_ERROR);
    // warn if custom sampler provided
    if ((options === null || options === void 0 ? void 0 : options.sampler) && logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).DEBUG) console.debug($15ec3fbdf86c3b66$var$SAMPLER_OVERRIDE_WARNING);
    // warn if no exporter will be set
    if ((options === null || options === void 0 ? void 0 : options.disableDefaultTraceExporter) === true && !(options === null || options === void 0 ? void 0 : options.traceExporter) && !((_a = options === null || options === void 0 ? void 0 : options.traceExporters) === null || _a === void 0 ? void 0 : _a.length)) console.warn($15ec3fbdf86c3b66$var$NO_EXPORTERS_DISABLED_DEFAULT);
    return options;
};
/**
 * Configures the Honeycomb Web SDK to log debug information to the console.
 * Enables the DiagConsoleLogger and sets the log level to DEBUG.
 * Logs the provided Honeycomb options to the console, as well as defaults.
 *
 * @param options the provided Honeycomb options
 */ function $15ec3fbdf86c3b66$var$configureDebug(options) {
    if (!(options === null || options === void 0 ? void 0 : options.debug)) return;
    (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).setLogger(new (0, $9540f66f2eb7e1fe$export$c55926ac8e698339)(), (0, $2fde396648409cca$export$b7d7b4c0f3c95263).DEBUG);
    (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug($15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("\uD83D\uDC1D Honeycomb Web SDK Debug Mode Enabled \uD83D\uDC1D"));
    // traces endpoint must be computed from provided options
    const tracesEndpoint = $15ec3fbdf86c3b66$var$getTracesEndpoint(options);
    const currentOptions = Object.assign(Object.assign(Object.assign({}, $15ec3fbdf86c3b66$var$defaultOptions), options), {
        tracesEndpoint: tracesEndpoint
    });
    $15ec3fbdf86c3b66$var$debugTracesApiKey(currentOptions);
    $15ec3fbdf86c3b66$var$debugServiceName(currentOptions);
    $15ec3fbdf86c3b66$var$debugTracesEndpoint(currentOptions);
    $15ec3fbdf86c3b66$var$debugSampleRate(currentOptions);
}
function $15ec3fbdf86c3b66$var$debugTracesApiKey(options) {
    const tracesApiKey = $15ec3fbdf86c3b66$var$getTracesApiKey(options) || "";
    if (!tracesApiKey) {
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug($15ec3fbdf86c3b66$var$MISSING_API_KEY_ERROR);
        return;
    }
    (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug($15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage(`API Key configured for traces: '${tracesApiKey}'`));
}
function $15ec3fbdf86c3b66$var$debugServiceName(options) {
    const serviceName = options.serviceName || $15ec3fbdf86c3b66$var$defaultOptions.serviceName;
    if (serviceName === $15ec3fbdf86c3b66$var$defaultOptions.serviceName) {
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug($15ec3fbdf86c3b66$var$MISSING_SERVICE_NAME_ERROR);
        return;
    }
    (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug(`@honeycombio/opentelemetry-web: Service Name configured for traces: '${serviceName}'`);
}
function $15ec3fbdf86c3b66$var$debugTracesEndpoint(options) {
    const tracesEndpoint = $15ec3fbdf86c3b66$var$getTracesEndpoint(options);
    if (!tracesEndpoint) {
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug($15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage("No endpoint configured for traces"));
        return;
    }
    (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug($15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage(`Endpoint configured for traces: '${tracesEndpoint}'`));
}
function $15ec3fbdf86c3b66$var$debugSampleRate(options) {
    const sampleRate = $15ec3fbdf86c3b66$var$getSampleRate(options);
    if (!sampleRate) {
        // this should never happen, but guard just in case?
        (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("No sampler configured for traces");
        return;
    }
    (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug($15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage(`Sample Rate configured for traces: '${sampleRate}'`));
}
/**
 * A {@link SpanProcessor} that reads entries stored in {@link Baggage}
 * from the parent context and adds the baggage entries' keys and values
 * to the span as attributes on span start.
 *
 * Keys and values added to Baggage will appear on subsequent child
 * spans for a trace within this service *and* be propagated to external
 * services in accordance with any configured propagation formats
 * configured. If the external services also have a Baggage span
 * processor, the keys and values will appear in those child spans as
 * well.
 *
 * â  Warning â ï¸
 *
 * Do not put sensitive information in Baggage.
 *
 * To repeat: a consequence of adding data to Baggage is that the keys and
 * values will appear in all outgoing HTTP headers from the application.
 */ class $15ec3fbdf86c3b66$var$BaggageSpanProcessor {
    constructor(){}
    onStart(span, parentContext) {
        var _a, _b;
        ((_b = (_a = (0, $341b7c0814521fae$export$3e49040daa9dba20).getBaggage(parentContext)) === null || _a === void 0 ? void 0 : _a.getAllEntries()) !== null && _b !== void 0 ? _b : []).forEach((entry)=>{
            span.setAttribute(entry[0], entry[1].value);
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug(`@honeycombio/opentelemetry-web: \u{1F6A8} Baggage in all outgoing headers: ${entry[0]}=${entry[1].value} `);
        });
    }
    onEnd() {}
    forceFlush() {
        return Promise.resolve();
    }
    shutdown() {
        return Promise.resolve();
    }
}
/**
 * A {@link SpanProcessor} that adds browser specific attributes to each span
 * that might change over the course of a session.
 * Static attributes (e.g. User Agent) are added to the Resource.
 */ class $15ec3fbdf86c3b66$var$BrowserAttributesSpanProcessor {
    constructor(){}
    onStart(span) {
        const { href: href, pathname: pathname, search: search, hash: hash, hostname: hostname } = window.location;
        span.setAttributes({
            "browser.width": window.innerWidth,
            "browser.height": window.innerHeight,
            "page.hash": hash,
            "page.url": href,
            "page.route": pathname,
            "page.hostname": hostname,
            "page.search": search,
            "url.path": pathname
        });
    }
    onEnd() {}
    forceFlush() {
        return Promise.resolve();
    }
    shutdown() {
        return Promise.resolve();
    }
}
const $15ec3fbdf86c3b66$var$TEAM_HEADER_KEY = "x-honeycomb-team";
const $15ec3fbdf86c3b66$var$DATASET_HEADER_KEY = "x-honeycomb-dataset";
/**
 * Builds and returns an OTLP Traces exporter that sends data over http/json
 * @param options The {@link HoneycombOptions} used to configure the exporter
 * @returns a {@link SpanExporter} configured to send telemetry to Honeycomb over http/json
 */ function $15ec3fbdf86c3b66$var$configureHoneycombHttpJsonTraceExporter(options) {
    const apiKey = $15ec3fbdf86c3b66$var$getTracesApiKey(options);
    return new (0, $eef854ea05b36022$export$f73dc942b4b27de3)({
        url: $15ec3fbdf86c3b66$var$getTracesEndpoint(options),
        headers: $15ec3fbdf86c3b66$var$configureHeaders(options, apiKey)
    });
}
function $15ec3fbdf86c3b66$var$configureHeaders(options, apiKey) {
    const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);
    if (apiKey && !headers[$15ec3fbdf86c3b66$var$TEAM_HEADER_KEY]) headers[$15ec3fbdf86c3b66$var$TEAM_HEADER_KEY] = apiKey;
    if ($15ec3fbdf86c3b66$var$isClassic(apiKey) && (options === null || options === void 0 ? void 0 : options.dataset)) headers[$15ec3fbdf86c3b66$var$DATASET_HEADER_KEY] = options === null || options === void 0 ? void 0 : options.dataset;
    return headers;
}
/**
 * Builds and returns a new {@link SpanExporter} that wraps the provided array
 * of {@link SpanExporter}s
 *
 * @param exporters the exporters to wrap with the composite exporter
 * @returns the configured {@link SpanExporter} instance
 */ function $15ec3fbdf86c3b66$var$configureCompositeExporter(exporters) {
    return new $15ec3fbdf86c3b66$var$CompositeSpanExporter(exporters);
}
/**
 * A custom SpanExporter that wraps a number of other exporters and calls export and shutdown
 * for each.
 */ class $15ec3fbdf86c3b66$var$CompositeSpanExporter {
    constructor(exporters){
        this._exporters = exporters;
    }
    export(spans, resultCallback) {
        this._exporters.forEach((exporter)=>exporter.export(spans, resultCallback));
        resultCallback({
            code: (0, $ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1).SUCCESS
        });
    }
    async shutdown() {
        const results = [];
        this._exporters.forEach((exporter)=>results.push(exporter.shutdown()));
        await Promise.all(results);
    }
}
/**
 * Builds and returns a {@link SpanExporter} that logs Honeycomb URLs for completed traces
 *
 * @remark This is not for production use.
 * @param options The {@link HoneycombOptions} used to configure the exporter
 * @returns the configured {@link ConsoleTraceLinkExporter} instance
 */ function $15ec3fbdf86c3b66$var$configureConsoleTraceLinkExporter(options) {
    const apiKey = $15ec3fbdf86c3b66$var$getTracesApiKey(options);
    return new $15ec3fbdf86c3b66$var$ConsoleTraceLinkExporter(options === null || options === void 0 ? void 0 : options.serviceName, apiKey, options === null || options === void 0 ? void 0 : options.logLevel);
}
/**
 * A custom {@link SpanExporter} that logs Honeycomb URLs for completed traces.
 *
 * @remark This is not for production use.
 */ class $15ec3fbdf86c3b66$var$ConsoleTraceLinkExporter {
    constructor(serviceName, apikey, logLevel){
        this._traceUrl = "";
        this._logLevel = (0, $2fde396648409cca$export$b7d7b4c0f3c95263).DEBUG;
        if (logLevel) this._logLevel = logLevel;
        if (!serviceName || !apikey) {
            if (this._logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).DEBUG) console.debug($15ec3fbdf86c3b66$var$MISSING_FIELDS_FOR_LOCAL_VISUALIZATIONS);
            return;
        }
        const options = {
            headers: {
                "x-honeycomb-team": apikey
            }
        };
        fetch("https://api.honeycomb.io/1/auth", options).then((resp)=>{
            if (resp.ok) return resp.json();
            throw new Error();
        }).then((data)=>{
            var _a, _b, _c;
            const respData = data;
            if ((_a = respData.team) === null || _a === void 0 ? void 0 : _a.slug) this._traceUrl = $15ec3fbdf86c3b66$var$buildTraceUrl(apikey, serviceName, (_b = respData.team) === null || _b === void 0 ? void 0 : _b.slug, (_c = respData.environment) === null || _c === void 0 ? void 0 : _c.slug);
            else throw new Error();
        }).catch(()=>{
            if (this._logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).INFO) console.log($15ec3fbdf86c3b66$var$FAILED_AUTH_FOR_LOCAL_VISUALIZATIONS);
        });
    }
    export(spans, resultCallback) {
        if (this._traceUrl) spans.forEach((span)=>{
            // only log root spans (ones without a parent span)
            if (!span.parentSpanId && this._logLevel >= (0, $2fde396648409cca$export$b7d7b4c0f3c95263).INFO) console.log($15ec3fbdf86c3b66$var$createHoneycombSDKLogMessage(`Honeycomb link: ${this._traceUrl}=${span.spanContext().traceId}`));
        });
        resultCallback({
            code: (0, $ac0cc02fe5ac1334$export$ee0fe4df4ef0f3a1).SUCCESS
        });
    }
    shutdown() {
        return Promise.resolve();
    }
}
/**
 * Builds and returns a URL that is used to log when a trace is completed in the {@link ConsoleTraceLinkExporter}.
 *
 * @param apikey the Honeycomb API key used to retrieve the Honeycomb team and environment
 * @param serviceName the Honeycomb service name (or classic dataset) where data is stored
 * @param team the Honeycomb team
 * @param environment the Honeycomb environment
 * @returns
 */ function $15ec3fbdf86c3b66$var$buildTraceUrl(apikey, serviceName, team, environment) {
    let url = `https://ui.honeycomb.io/${team}`;
    if (!$15ec3fbdf86c3b66$var$isClassic(apikey) && environment) url += `/environments/${environment}`;
    url += `/datasets/${serviceName}/trace?trace_id`;
    return url;
}
/**
 * Builds and returns Span Processor that combines the BatchSpanProcessor, BrowserSpanProcessor,
 * BaggageSpanProcessor, and optionally a user provided Span Processor.
 * @param options The {@link HoneycombOptions}
 * @returns a {@link CompositeSpanProcessor}
 */ const $15ec3fbdf86c3b66$var$configureSpanProcessors = (options)=>{
    const honeycombSpanProcessor = new $15ec3fbdf86c3b66$var$CompositeSpanProcessor();
    const honeycombTraceExporters = [];
    if (options === null || options === void 0 ? void 0 : options.localVisualizations) honeycombTraceExporters.push($15ec3fbdf86c3b66$var$configureConsoleTraceLinkExporter(options));
    // if there is a user-provided exporter, add to the composite exporter
    if (options === null || options === void 0 ? void 0 : options.traceExporter) honeycombTraceExporters.push(options === null || options === void 0 ? void 0 : options.traceExporter);
    // if there is an array of user-provided exporters, add them to the composite exporter
    // This will override the default honeycomb trace exporter.
    if (options === null || options === void 0 ? void 0 : options.traceExporters) honeycombTraceExporters.push(...options.traceExporters);
    // Disable this if a configuration option is present
    if ((options === null || options === void 0 ? void 0 : options.disableDefaultTraceExporter) !== true) honeycombTraceExporters.unshift($15ec3fbdf86c3b66$var$configureHoneycombHttpJsonTraceExporter(options));
    // We have to configure the exporter here because the way the base SDK is setup
    // does not allow having both a `spanProcessor` and `traceExporter` configured.
    honeycombSpanProcessor.addProcessor(new (0, $24ab59accace2f6a$export$237547059fd543f9)($15ec3fbdf86c3b66$var$configureCompositeExporter([
        ...honeycombTraceExporters
    ])));
    // we always want to add the baggage span processor
    honeycombSpanProcessor.addProcessor(new $15ec3fbdf86c3b66$var$BaggageSpanProcessor());
    // we always want to add the browser attrs span processor
    honeycombSpanProcessor.addProcessor(new $15ec3fbdf86c3b66$var$BrowserAttributesSpanProcessor());
    // if there is a user provided span processor, add it to the composite span processor
    if (options === null || options === void 0 ? void 0 : options.spanProcessor) honeycombSpanProcessor.addProcessor(options === null || options === void 0 ? void 0 : options.spanProcessor);
    // if there is an array of spanProcessors provided, add them to the composite span processor
    if (options === null || options === void 0 ? void 0 : options.spanProcessors) options.spanProcessors.forEach((processor)=>{
        honeycombSpanProcessor.addProcessor(processor);
    });
    return honeycombSpanProcessor;
};
/**
 * A {@link SpanProcessor} that combines multiple span processors into a single
 * span processor that can be passed into the SDKs `spanProcessor` option.
 */ class $15ec3fbdf86c3b66$var$CompositeSpanProcessor {
    constructor(){
        this.spanProcessors = [];
    }
    addProcessor(processor) {
        this.spanProcessors.push(processor);
    }
    getSpanProcessors() {
        return this.spanProcessors;
    }
    onStart(span, parentContext) {
        this.spanProcessors.forEach((processor)=>{
            processor.onStart(span, parentContext);
        });
    }
    onEnd(span) {
        this.spanProcessors.forEach((processor)=>{
            processor.onEnd(span);
        });
    }
    forceFlush() {
        return Promise.all(this.spanProcessors.map((processor)=>processor.forceFlush())).then(()=>{});
    }
    shutdown() {
        return Promise.all(this.spanProcessors.map((processor)=>processor.forceFlush())).then(()=>{});
    }
}
/**
 * Builds and returns a Deterministic Sampler that uses the provided sample rate to
 * configure the inner sampler.
 * @param options The {@link HoneycombOptions}
 * @returns a {@link DeterministicSampler}
 */ const $15ec3fbdf86c3b66$var$configureDeterministicSampler = (options)=>{
    const sampleRate = $15ec3fbdf86c3b66$var$getSampleRate(options);
    return new $15ec3fbdf86c3b66$var$DeterministicSampler(sampleRate);
};
/**
 * A {@link Sampler} that uses a deterministic sample rate to configure the sampler.
 */ class $15ec3fbdf86c3b66$var$DeterministicSampler {
    constructor(sampleRate){
        this._sampleRate = sampleRate;
        switch(sampleRate){
            // sample rate of 0 means send nothing
            case 0:
                this._sampler = new (0, $ffaf61536d9605bb$export$abc5f11618c4d6a3)();
                break;
            // sample rate of 1 is default, send everything
            case 1:
                this._sampler = new (0, $47d1bc9271eaba6b$export$653f832afb4ffa27)();
                break;
            default:
                {
                    const ratio = 1.0 / sampleRate;
                    this._sampler = new (0, $a0283d7e7b94aa53$export$f1624f887f708bbf)(ratio);
                    break;
                }
        }
    }
    shouldSample(context, traceId, spanName, spanKind, attributes, links) {
        const result = this._sampler.shouldSample(context, traceId, spanName, spanKind, attributes, links);
        return Object.assign(Object.assign({}, result), {
            attributes: Object.assign(Object.assign({}, result.attributes), {
                SampleRate: this._sampleRate
            })
        });
    }
    toString() {
        return `DeterministicSampler(${this._sampler.toString()})`;
    }
}
var $15ec3fbdf86c3b66$var$t, $15ec3fbdf86c3b66$var$e, $15ec3fbdf86c3b66$var$n = function() {
    var t = self.performance && performance.getEntriesByType && performance.getEntriesByType("navigation")[0];
    if (t && t.responseStart > 0 && t.responseStart < performance.now()) return t;
}, $15ec3fbdf86c3b66$var$r = function(t) {
    if ("loading" === document.readyState) return "loading";
    var e = $15ec3fbdf86c3b66$var$n();
    if (e) {
        if (t < e.domInteractive) return "loading";
        if (0 === e.domContentLoadedEventStart || t < e.domContentLoadedEventStart) return "dom-interactive";
        if (0 === e.domComplete || t < e.domComplete) return "dom-content-loaded";
    }
    return "complete";
}, $15ec3fbdf86c3b66$var$i = function(t) {
    var e = t.nodeName;
    return 1 === t.nodeType ? e.toLowerCase() : e.toUpperCase().replace(/^#/, "");
}, $15ec3fbdf86c3b66$var$a = function(t, e) {
    var n = "";
    try {
        for(; t && 9 !== t.nodeType;){
            var r = t, a = r.id ? "#" + r.id : $15ec3fbdf86c3b66$var$i(r) + (r.classList && r.classList.value && r.classList.value.trim() && r.classList.value.trim().length ? "." + r.classList.value.trim().replace(/\s+/g, ".") : "");
            if (n.length + a.length > (e || 100) - 1) return n || a;
            if (n = n ? a + ">" + n : a, r.id) break;
            t = r.parentNode;
        }
    } catch (t) {}
    return n;
}, $15ec3fbdf86c3b66$var$o = -1, $15ec3fbdf86c3b66$var$c = function() {
    return $15ec3fbdf86c3b66$var$o;
}, $15ec3fbdf86c3b66$var$u = function(t) {
    addEventListener("pageshow", function(e) {
        e.persisted && ($15ec3fbdf86c3b66$var$o = e.timeStamp, t(e));
    }, !0);
}, $15ec3fbdf86c3b66$var$s = function() {
    var t = $15ec3fbdf86c3b66$var$n();
    return t && t.activationStart || 0;
}, $15ec3fbdf86c3b66$var$f = function(t, e) {
    var r = $15ec3fbdf86c3b66$var$n(), i = "navigate";
    $15ec3fbdf86c3b66$var$c() >= 0 ? i = "back-forward-cache" : r && (document.prerendering || $15ec3fbdf86c3b66$var$s() > 0 ? i = "prerender" : document.wasDiscarded ? i = "restore" : r.type && (i = r.type.replace(/_/g, "-")));
    return {
        name: t,
        value: void 0 === e ? -1 : e,
        rating: "good",
        delta: 0,
        entries: [],
        id: "v4-".concat(Date.now(), "-").concat(Math.floor(8999999999999 * Math.random()) + 1e12),
        navigationType: i
    };
}, $15ec3fbdf86c3b66$var$d = function(t, e, n) {
    try {
        if (PerformanceObserver.supportedEntryTypes.includes(t)) {
            var r = new PerformanceObserver(function(t) {
                Promise.resolve().then(function() {
                    e(t.getEntries());
                });
            });
            return r.observe(Object.assign({
                type: t,
                buffered: !0
            }, n || {})), r;
        }
    } catch (t) {}
}, $15ec3fbdf86c3b66$var$l = function(t, e, n, r) {
    var i, a;
    return function(o) {
        e.value >= 0 && (o || r) && ((a = e.value - (i || 0)) || void 0 === i) && (i = e.value, e.delta = a, e.rating = function(t, e) {
            return t > e[1] ? "poor" : t > e[0] ? "needs-improvement" : "good";
        }(e.value, n), t(e));
    };
}, $15ec3fbdf86c3b66$var$m = function(t) {
    requestAnimationFrame(function() {
        return requestAnimationFrame(function() {
            return t();
        });
    });
}, $15ec3fbdf86c3b66$var$p = function(t) {
    document.addEventListener("visibilitychange", function() {
        "hidden" === document.visibilityState && t();
    });
}, $15ec3fbdf86c3b66$var$v = function(t) {
    var e = !1;
    return function() {
        e || (t(), e = !0);
    };
}, $15ec3fbdf86c3b66$var$g = -1, $15ec3fbdf86c3b66$var$h = function() {
    return "hidden" !== document.visibilityState || document.prerendering ? 1 / 0 : 0;
}, $15ec3fbdf86c3b66$var$T = function(t) {
    "hidden" === document.visibilityState && $15ec3fbdf86c3b66$var$g > -1 && ($15ec3fbdf86c3b66$var$g = "visibilitychange" === t.type ? t.timeStamp : 0, $15ec3fbdf86c3b66$var$E());
}, $15ec3fbdf86c3b66$var$y = function() {
    addEventListener("visibilitychange", $15ec3fbdf86c3b66$var$T, !0), addEventListener("prerenderingchange", $15ec3fbdf86c3b66$var$T, !0);
}, $15ec3fbdf86c3b66$var$E = function() {
    removeEventListener("visibilitychange", $15ec3fbdf86c3b66$var$T, !0), removeEventListener("prerenderingchange", $15ec3fbdf86c3b66$var$T, !0);
}, $15ec3fbdf86c3b66$var$S = function() {
    return $15ec3fbdf86c3b66$var$g < 0 && ($15ec3fbdf86c3b66$var$g = $15ec3fbdf86c3b66$var$h(), $15ec3fbdf86c3b66$var$y(), $15ec3fbdf86c3b66$var$u(function() {
        setTimeout(function() {
            $15ec3fbdf86c3b66$var$g = $15ec3fbdf86c3b66$var$h(), $15ec3fbdf86c3b66$var$y();
        }, 0);
    })), {
        get firstHiddenTime () {
            return $15ec3fbdf86c3b66$var$g;
        }
    };
}, $15ec3fbdf86c3b66$var$b = function(t) {
    document.prerendering ? addEventListener("prerenderingchange", function() {
        return t();
    }, !0) : t();
}, $15ec3fbdf86c3b66$var$L = [
    1800,
    3e3
], $15ec3fbdf86c3b66$var$C = function(t, e) {
    e = e || {}, $15ec3fbdf86c3b66$var$b(function() {
        var n, r = $15ec3fbdf86c3b66$var$S(), i = $15ec3fbdf86c3b66$var$f("FCP"), a = $15ec3fbdf86c3b66$var$d("paint", function(t) {
            t.forEach(function(t) {
                "first-contentful-paint" === t.name && (a.disconnect(), t.startTime < r.firstHiddenTime && (i.value = Math.max(t.startTime - $15ec3fbdf86c3b66$var$s(), 0), i.entries.push(t), n(!0)));
            });
        });
        a && (n = $15ec3fbdf86c3b66$var$l(t, i, $15ec3fbdf86c3b66$var$L, e.reportAllChanges), $15ec3fbdf86c3b66$var$u(function(r) {
            i = $15ec3fbdf86c3b66$var$f("FCP"), n = $15ec3fbdf86c3b66$var$l(t, i, $15ec3fbdf86c3b66$var$L, e.reportAllChanges), $15ec3fbdf86c3b66$var$m(function() {
                i.value = performance.now() - r.timeStamp, n(!0);
            });
        }));
    });
}, $15ec3fbdf86c3b66$var$M = [
    .1,
    .25
], $15ec3fbdf86c3b66$var$D = function(t, e) {
    !function(t, e) {
        e = e || {}, $15ec3fbdf86c3b66$var$C($15ec3fbdf86c3b66$var$v(function() {
            var n, r = $15ec3fbdf86c3b66$var$f("CLS", 0), i = 0, a = [], o = function(t) {
                t.forEach(function(t) {
                    if (!t.hadRecentInput) {
                        var e = a[0], n = a[a.length - 1];
                        i && t.startTime - n.startTime < 1e3 && t.startTime - e.startTime < 5e3 ? (i += t.value, a.push(t)) : (i = t.value, a = [
                            t
                        ]);
                    }
                }), i > r.value && (r.value = i, r.entries = a, n());
            }, c = $15ec3fbdf86c3b66$var$d("layout-shift", o);
            c && (n = $15ec3fbdf86c3b66$var$l(t, r, $15ec3fbdf86c3b66$var$M, e.reportAllChanges), $15ec3fbdf86c3b66$var$p(function() {
                o(c.takeRecords()), n(!0);
            }), $15ec3fbdf86c3b66$var$u(function() {
                i = 0, r = $15ec3fbdf86c3b66$var$f("CLS", 0), n = $15ec3fbdf86c3b66$var$l(t, r, $15ec3fbdf86c3b66$var$M, e.reportAllChanges), $15ec3fbdf86c3b66$var$m(function() {
                    return n();
                });
            }), setTimeout(n, 0));
        }));
    }(function(e) {
        var n = function(t) {
            var e, n = {};
            if (t.entries.length) {
                var i = t.entries.reduce(function(t, e) {
                    return t && t.value > e.value ? t : e;
                });
                if (i && i.sources && i.sources.length) {
                    var o = (e = i.sources).find(function(t) {
                        return t.node && 1 === t.node.nodeType;
                    }) || e[0];
                    o && (n = {
                        largestShiftTarget: $15ec3fbdf86c3b66$var$a(o.node),
                        largestShiftTime: i.startTime,
                        largestShiftValue: i.value,
                        largestShiftSource: o,
                        largestShiftEntry: i,
                        loadState: $15ec3fbdf86c3b66$var$r(i.startTime)
                    });
                }
            }
            return Object.assign(t, {
                attribution: n
            });
        }(e);
        t(n);
    }, e);
}, $15ec3fbdf86c3b66$var$w = function(t, e) {
    $15ec3fbdf86c3b66$var$C(function(e) {
        var i = function(t) {
            var e = {
                timeToFirstByte: 0,
                firstByteToFCP: t.value,
                loadState: $15ec3fbdf86c3b66$var$r($15ec3fbdf86c3b66$var$c())
            };
            if (t.entries.length) {
                var i = $15ec3fbdf86c3b66$var$n(), a = t.entries[t.entries.length - 1];
                if (i) {
                    var o = i.activationStart || 0, u = Math.max(0, i.responseStart - o);
                    e = {
                        timeToFirstByte: u,
                        firstByteToFCP: t.value - u,
                        loadState: $15ec3fbdf86c3b66$var$r(t.entries[0].startTime),
                        navigationEntry: i,
                        fcpEntry: a
                    };
                }
            }
            return Object.assign(t, {
                attribution: e
            });
        }(e);
        t(i);
    }, e);
}, $15ec3fbdf86c3b66$var$x = 0, $15ec3fbdf86c3b66$var$I = 1 / 0, $15ec3fbdf86c3b66$var$k = 0, $15ec3fbdf86c3b66$var$A = function(t) {
    t.forEach(function(t) {
        t.interactionId && ($15ec3fbdf86c3b66$var$I = Math.min($15ec3fbdf86c3b66$var$I, t.interactionId), $15ec3fbdf86c3b66$var$k = Math.max($15ec3fbdf86c3b66$var$k, t.interactionId), $15ec3fbdf86c3b66$var$x = $15ec3fbdf86c3b66$var$k ? ($15ec3fbdf86c3b66$var$k - $15ec3fbdf86c3b66$var$I) / 7 + 1 : 0);
    });
}, $15ec3fbdf86c3b66$var$F = function() {
    return $15ec3fbdf86c3b66$var$t ? $15ec3fbdf86c3b66$var$x : performance.interactionCount || 0;
}, $15ec3fbdf86c3b66$var$P = function() {
    "interactionCount" in performance || $15ec3fbdf86c3b66$var$t || ($15ec3fbdf86c3b66$var$t = $15ec3fbdf86c3b66$var$d("event", $15ec3fbdf86c3b66$var$A, {
        type: "event",
        buffered: !0,
        durationThreshold: 0
    }));
}, $15ec3fbdf86c3b66$var$B = [], $15ec3fbdf86c3b66$var$O = new Map(), $15ec3fbdf86c3b66$var$R = 0, $15ec3fbdf86c3b66$var$j = function() {
    var t = Math.min($15ec3fbdf86c3b66$var$B.length - 1, Math.floor(($15ec3fbdf86c3b66$var$F() - $15ec3fbdf86c3b66$var$R) / 50));
    return $15ec3fbdf86c3b66$var$B[t];
}, $15ec3fbdf86c3b66$var$q = [], $15ec3fbdf86c3b66$var$H = function(t) {
    if ($15ec3fbdf86c3b66$var$q.forEach(function(e) {
        return e(t);
    }), t.interactionId || "first-input" === t.entryType) {
        var e = $15ec3fbdf86c3b66$var$B[$15ec3fbdf86c3b66$var$B.length - 1], n = $15ec3fbdf86c3b66$var$O.get(t.interactionId);
        if (n || $15ec3fbdf86c3b66$var$B.length < 10 || t.duration > e.latency) {
            if (n) t.duration > n.latency ? (n.entries = [
                t
            ], n.latency = t.duration) : t.duration === n.latency && t.startTime === n.entries[0].startTime && n.entries.push(t);
            else {
                var r = {
                    id: t.interactionId,
                    latency: t.duration,
                    entries: [
                        t
                    ]
                };
                $15ec3fbdf86c3b66$var$O.set(r.id, r), $15ec3fbdf86c3b66$var$B.push(r);
            }
            $15ec3fbdf86c3b66$var$B.sort(function(t, e) {
                return e.latency - t.latency;
            }), $15ec3fbdf86c3b66$var$B.length > 10 && $15ec3fbdf86c3b66$var$B.splice(10).forEach(function(t) {
                return $15ec3fbdf86c3b66$var$O.delete(t.id);
            });
        }
    }
}, $15ec3fbdf86c3b66$var$N = function(t) {
    var e = self.requestIdleCallback || self.setTimeout, n = -1;
    return t = $15ec3fbdf86c3b66$var$v(t), "hidden" === document.visibilityState ? t() : (n = e(t), $15ec3fbdf86c3b66$var$p(t)), n;
}, $15ec3fbdf86c3b66$var$W = [
    200,
    500
], $15ec3fbdf86c3b66$var$z = function(t, e) {
    "PerformanceEventTiming" in self && "interactionId" in PerformanceEventTiming.prototype && (e = e || {}, $15ec3fbdf86c3b66$var$b(function() {
        var n;
        $15ec3fbdf86c3b66$var$P();
        var r, i = $15ec3fbdf86c3b66$var$f("INP"), a = function(t) {
            $15ec3fbdf86c3b66$var$N(function() {
                t.forEach($15ec3fbdf86c3b66$var$H);
                var e = $15ec3fbdf86c3b66$var$j();
                e && e.latency !== i.value && (i.value = e.latency, i.entries = e.entries, r());
            });
        }, o = $15ec3fbdf86c3b66$var$d("event", a, {
            durationThreshold: null !== (n = e.durationThreshold) && void 0 !== n ? n : 40
        });
        r = $15ec3fbdf86c3b66$var$l(t, i, $15ec3fbdf86c3b66$var$W, e.reportAllChanges), o && (o.observe({
            type: "first-input",
            buffered: !0
        }), $15ec3fbdf86c3b66$var$p(function() {
            a(o.takeRecords()), r(!0);
        }), $15ec3fbdf86c3b66$var$u(function() {
            $15ec3fbdf86c3b66$var$R = $15ec3fbdf86c3b66$var$F(), $15ec3fbdf86c3b66$var$B.length = 0, $15ec3fbdf86c3b66$var$O.clear(), i = $15ec3fbdf86c3b66$var$f("INP"), r = $15ec3fbdf86c3b66$var$l(t, i, $15ec3fbdf86c3b66$var$W, e.reportAllChanges);
        }));
    }));
}, $15ec3fbdf86c3b66$var$U = [], $15ec3fbdf86c3b66$var$V = [], $15ec3fbdf86c3b66$var$_ = 0, $15ec3fbdf86c3b66$var$G = new WeakMap(), $15ec3fbdf86c3b66$var$J = new Map(), $15ec3fbdf86c3b66$var$K = -1, $15ec3fbdf86c3b66$var$Q = function(t) {
    $15ec3fbdf86c3b66$var$U = $15ec3fbdf86c3b66$var$U.concat(t), $15ec3fbdf86c3b66$var$X();
}, $15ec3fbdf86c3b66$var$X = function() {
    $15ec3fbdf86c3b66$var$K < 0 && ($15ec3fbdf86c3b66$var$K = $15ec3fbdf86c3b66$var$N($15ec3fbdf86c3b66$var$Y));
}, $15ec3fbdf86c3b66$var$Y = function() {
    $15ec3fbdf86c3b66$var$J.size > 10 && $15ec3fbdf86c3b66$var$J.forEach(function(t, e) {
        $15ec3fbdf86c3b66$var$O.has(e) || $15ec3fbdf86c3b66$var$J.delete(e);
    });
    var t = $15ec3fbdf86c3b66$var$B.map(function(t) {
        return $15ec3fbdf86c3b66$var$G.get(t.entries[0]);
    }), e = $15ec3fbdf86c3b66$var$V.length - 50;
    $15ec3fbdf86c3b66$var$V = $15ec3fbdf86c3b66$var$V.filter(function(n, r) {
        return r >= e || t.includes(n);
    });
    for(var n = new Set(), r = 0; r < $15ec3fbdf86c3b66$var$V.length; r++){
        var i = $15ec3fbdf86c3b66$var$V[r];
        $15ec3fbdf86c3b66$var$nt(i.startTime, i.processingEnd).forEach(function(t) {
            n.add(t);
        });
    }
    var a = $15ec3fbdf86c3b66$var$U.length - 1 - 50;
    $15ec3fbdf86c3b66$var$U = $15ec3fbdf86c3b66$var$U.filter(function(t, e) {
        return t.startTime > $15ec3fbdf86c3b66$var$_ && e > a || n.has(t);
    }), $15ec3fbdf86c3b66$var$K = -1;
};
$15ec3fbdf86c3b66$var$q.push(function(t) {
    t.interactionId && t.target && !$15ec3fbdf86c3b66$var$J.has(t.interactionId) && $15ec3fbdf86c3b66$var$J.set(t.interactionId, t.target);
}, function(t) {
    var e, n = t.startTime + t.duration;
    $15ec3fbdf86c3b66$var$_ = Math.max($15ec3fbdf86c3b66$var$_, t.processingEnd);
    for(var r = $15ec3fbdf86c3b66$var$V.length - 1; r >= 0; r--){
        var i = $15ec3fbdf86c3b66$var$V[r];
        if (Math.abs(n - i.renderTime) <= 8) {
            (e = i).startTime = Math.min(t.startTime, e.startTime), e.processingStart = Math.min(t.processingStart, e.processingStart), e.processingEnd = Math.max(t.processingEnd, e.processingEnd), e.entries.push(t);
            break;
        }
    }
    e || (e = {
        startTime: t.startTime,
        processingStart: t.processingStart,
        processingEnd: t.processingEnd,
        renderTime: n,
        entries: [
            t
        ]
    }, $15ec3fbdf86c3b66$var$V.push(e)), (t.interactionId || "first-input" === t.entryType) && $15ec3fbdf86c3b66$var$G.set(t, e), $15ec3fbdf86c3b66$var$X();
});
var $15ec3fbdf86c3b66$var$Z, $15ec3fbdf86c3b66$var$$, $15ec3fbdf86c3b66$var$tt, $15ec3fbdf86c3b66$var$et, $15ec3fbdf86c3b66$var$nt = function(t, e) {
    for(var n, r = [], i = 0; n = $15ec3fbdf86c3b66$var$U[i]; i++)if (!(n.startTime + n.duration < t)) {
        if (n.startTime > e) break;
        r.push(n);
    }
    return r;
}, $15ec3fbdf86c3b66$var$rt = function(t, n) {
    $15ec3fbdf86c3b66$var$e || ($15ec3fbdf86c3b66$var$e = $15ec3fbdf86c3b66$var$d("long-animation-frame", $15ec3fbdf86c3b66$var$Q)), $15ec3fbdf86c3b66$var$z(function(e) {
        var n = function(t) {
            var e = t.entries[0], n = $15ec3fbdf86c3b66$var$G.get(e), i = e.processingStart, o = n.processingEnd, c = n.entries.sort(function(t, e) {
                return t.processingStart - e.processingStart;
            }), u = $15ec3fbdf86c3b66$var$nt(e.startTime, o), s = t.entries.find(function(t) {
                return t.target;
            }), f = s && s.target || $15ec3fbdf86c3b66$var$J.get(e.interactionId), d = [
                e.startTime + e.duration,
                o
            ].concat(u.map(function(t) {
                return t.startTime + t.duration;
            })), l = Math.max.apply(Math, d), m = {
                interactionTarget: $15ec3fbdf86c3b66$var$a(f),
                interactionTargetElement: f,
                interactionType: e.name.startsWith("key") ? "keyboard" : "pointer",
                interactionTime: e.startTime,
                nextPaintTime: l,
                processedEventEntries: c,
                longAnimationFrameEntries: u,
                inputDelay: i - e.startTime,
                processingDuration: o - i,
                presentationDelay: Math.max(l - o, 0),
                loadState: $15ec3fbdf86c3b66$var$r(e.startTime)
            };
            return Object.assign(t, {
                attribution: m
            });
        }(e);
        t(n);
    }, n);
}, $15ec3fbdf86c3b66$var$it = [
    2500,
    4e3
], $15ec3fbdf86c3b66$var$at = {}, $15ec3fbdf86c3b66$var$ot = function(t, e) {
    !function(t, e) {
        e = e || {}, $15ec3fbdf86c3b66$var$b(function() {
            var n, r = $15ec3fbdf86c3b66$var$S(), i = $15ec3fbdf86c3b66$var$f("LCP"), a = function(t) {
                e.reportAllChanges || (t = t.slice(-1)), t.forEach(function(t) {
                    t.startTime < r.firstHiddenTime && (i.value = Math.max(t.startTime - $15ec3fbdf86c3b66$var$s(), 0), i.entries = [
                        t
                    ], n());
                });
            }, o = $15ec3fbdf86c3b66$var$d("largest-contentful-paint", a);
            if (o) {
                n = $15ec3fbdf86c3b66$var$l(t, i, $15ec3fbdf86c3b66$var$it, e.reportAllChanges);
                var c = $15ec3fbdf86c3b66$var$v(function() {
                    $15ec3fbdf86c3b66$var$at[i.id] || (a(o.takeRecords()), o.disconnect(), $15ec3fbdf86c3b66$var$at[i.id] = !0, n(!0));
                });
                [
                    "keydown",
                    "click"
                ].forEach(function(t) {
                    addEventListener(t, function() {
                        return $15ec3fbdf86c3b66$var$N(c);
                    }, {
                        once: !0,
                        capture: !0
                    });
                }), $15ec3fbdf86c3b66$var$p(c), $15ec3fbdf86c3b66$var$u(function(r) {
                    i = $15ec3fbdf86c3b66$var$f("LCP"), n = $15ec3fbdf86c3b66$var$l(t, i, $15ec3fbdf86c3b66$var$it, e.reportAllChanges), $15ec3fbdf86c3b66$var$m(function() {
                        i.value = performance.now() - r.timeStamp, $15ec3fbdf86c3b66$var$at[i.id] = !0, n(!0);
                    });
                });
            }
        });
    }(function(e) {
        var r = function(t) {
            var e = {
                timeToFirstByte: 0,
                resourceLoadDelay: 0,
                resourceLoadDuration: 0,
                elementRenderDelay: t.value
            };
            if (t.entries.length) {
                var r = $15ec3fbdf86c3b66$var$n();
                if (r) {
                    var i = r.activationStart || 0, o = t.entries[t.entries.length - 1], c = o.url && performance.getEntriesByType("resource").filter(function(t) {
                        return t.name === o.url;
                    })[0], u = Math.max(0, r.responseStart - i), s = Math.max(u, c ? (c.requestStart || c.startTime) - i : 0), f = Math.max(s, c ? c.responseEnd - i : 0), d = Math.max(f, o.startTime - i);
                    e = {
                        element: $15ec3fbdf86c3b66$var$a(o.element),
                        timeToFirstByte: u,
                        resourceLoadDelay: s - u,
                        resourceLoadDuration: f - s,
                        elementRenderDelay: d - f,
                        navigationEntry: r,
                        lcpEntry: o
                    }, o.url && (e.url = o.url), c && (e.lcpResourceEntry = c);
                }
            }
            return Object.assign(t, {
                attribution: e
            });
        }(e);
        t(r);
    }, e);
}, $15ec3fbdf86c3b66$var$ct = [
    800,
    1800
], $15ec3fbdf86c3b66$var$ut = function t(e) {
    document.prerendering ? $15ec3fbdf86c3b66$var$b(function() {
        return t(e);
    }) : "complete" !== document.readyState ? addEventListener("load", function() {
        return t(e);
    }, !0) : setTimeout(e, 0);
}, $15ec3fbdf86c3b66$var$st = function(t, e) {
    e = e || {};
    var r = $15ec3fbdf86c3b66$var$f("TTFB"), i = $15ec3fbdf86c3b66$var$l(t, r, $15ec3fbdf86c3b66$var$ct, e.reportAllChanges);
    $15ec3fbdf86c3b66$var$ut(function() {
        var a = $15ec3fbdf86c3b66$var$n();
        a && (r.value = Math.max(a.responseStart - $15ec3fbdf86c3b66$var$s(), 0), r.entries = [
            a
        ], i(!0), $15ec3fbdf86c3b66$var$u(function() {
            r = $15ec3fbdf86c3b66$var$f("TTFB", 0), (i = $15ec3fbdf86c3b66$var$l(t, r, $15ec3fbdf86c3b66$var$ct, e.reportAllChanges))(!0);
        }));
    });
}, $15ec3fbdf86c3b66$var$ft = function(t, e) {
    $15ec3fbdf86c3b66$var$st(function(e) {
        var n = function(t) {
            var e = {
                waitingDuration: 0,
                cacheDuration: 0,
                dnsDuration: 0,
                connectionDuration: 0,
                requestDuration: 0
            };
            if (t.entries.length) {
                var n = t.entries[0], r = n.activationStart || 0, i = Math.max((n.workerStart || n.fetchStart) - r, 0), a = Math.max(n.domainLookupStart - r, 0), o = Math.max(n.connectStart - r, 0), c = Math.max(n.connectEnd - r, 0);
                e = {
                    waitingDuration: i,
                    cacheDuration: a - i,
                    dnsDuration: o - a,
                    connectionDuration: c - o,
                    requestDuration: t.value - c,
                    navigationEntry: n
                };
            }
            return Object.assign(t, {
                attribution: e
            });
        }(e);
        t(n);
    }, e);
}, $15ec3fbdf86c3b66$var$dt = {
    passive: !0,
    capture: !0
}, $15ec3fbdf86c3b66$var$lt = new Date(), $15ec3fbdf86c3b66$var$mt = function(t, e) {
    $15ec3fbdf86c3b66$var$Z || ($15ec3fbdf86c3b66$var$Z = e, $15ec3fbdf86c3b66$var$$ = t, $15ec3fbdf86c3b66$var$tt = new Date(), $15ec3fbdf86c3b66$var$gt(removeEventListener), $15ec3fbdf86c3b66$var$pt());
}, $15ec3fbdf86c3b66$var$pt = function() {
    if ($15ec3fbdf86c3b66$var$$ >= 0 && $15ec3fbdf86c3b66$var$$ < $15ec3fbdf86c3b66$var$tt - $15ec3fbdf86c3b66$var$lt) {
        var t = {
            entryType: "first-input",
            name: $15ec3fbdf86c3b66$var$Z.type,
            target: $15ec3fbdf86c3b66$var$Z.target,
            cancelable: $15ec3fbdf86c3b66$var$Z.cancelable,
            startTime: $15ec3fbdf86c3b66$var$Z.timeStamp,
            processingStart: $15ec3fbdf86c3b66$var$Z.timeStamp + $15ec3fbdf86c3b66$var$$
        };
        $15ec3fbdf86c3b66$var$et.forEach(function(e) {
            e(t);
        }), $15ec3fbdf86c3b66$var$et = [];
    }
}, $15ec3fbdf86c3b66$var$vt = function(t) {
    if (t.cancelable) {
        var e = (t.timeStamp > 1e12 ? new Date() : performance.now()) - t.timeStamp;
        "pointerdown" == t.type ? function(t, e) {
            var n = function() {
                $15ec3fbdf86c3b66$var$mt(t, e), i();
            }, r = function() {
                i();
            }, i = function() {
                removeEventListener("pointerup", n, $15ec3fbdf86c3b66$var$dt), removeEventListener("pointercancel", r, $15ec3fbdf86c3b66$var$dt);
            };
            addEventListener("pointerup", n, $15ec3fbdf86c3b66$var$dt), addEventListener("pointercancel", r, $15ec3fbdf86c3b66$var$dt);
        }(e, t) : $15ec3fbdf86c3b66$var$mt(e, t);
    }
}, $15ec3fbdf86c3b66$var$gt = function(t) {
    [
        "mousedown",
        "keydown",
        "touchstart",
        "pointerdown"
    ].forEach(function(e) {
        return t(e, $15ec3fbdf86c3b66$var$vt, $15ec3fbdf86c3b66$var$dt);
    });
}, $15ec3fbdf86c3b66$var$ht = [
    100,
    300
], $15ec3fbdf86c3b66$var$Tt = function(t, e) {
    e = e || {}, $15ec3fbdf86c3b66$var$b(function() {
        var n, r = $15ec3fbdf86c3b66$var$S(), i = $15ec3fbdf86c3b66$var$f("FID"), a = function(t) {
            t.startTime < r.firstHiddenTime && (i.value = t.processingStart - t.startTime, i.entries.push(t), n(!0));
        }, o = function(t) {
            t.forEach(a);
        }, c = $15ec3fbdf86c3b66$var$d("first-input", o);
        n = $15ec3fbdf86c3b66$var$l(t, i, $15ec3fbdf86c3b66$var$ht, e.reportAllChanges), c && ($15ec3fbdf86c3b66$var$p($15ec3fbdf86c3b66$var$v(function() {
            o(c.takeRecords()), c.disconnect();
        })), $15ec3fbdf86c3b66$var$u(function() {
            var r;
            i = $15ec3fbdf86c3b66$var$f("FID"), n = $15ec3fbdf86c3b66$var$l(t, i, $15ec3fbdf86c3b66$var$ht, e.reportAllChanges), $15ec3fbdf86c3b66$var$et = [], $15ec3fbdf86c3b66$var$$ = -1, $15ec3fbdf86c3b66$var$Z = null, $15ec3fbdf86c3b66$var$gt(addEventListener), r = a, $15ec3fbdf86c3b66$var$et.push(r), $15ec3fbdf86c3b66$var$pt();
        }));
    });
}, $15ec3fbdf86c3b66$var$yt = function(t, e) {
    $15ec3fbdf86c3b66$var$Tt(function(e) {
        var n = function(t) {
            var e = t.entries[0], n = {
                eventTarget: $15ec3fbdf86c3b66$var$a(e.target),
                eventType: e.name,
                eventTime: e.startTime,
                eventEntry: e,
                loadState: $15ec3fbdf86c3b66$var$r(e.startTime)
            };
            return Object.assign(t, {
                attribution: n
            });
        }(e);
        t(n);
    }, e);
};
// To avoid importing InstrumentationAbstract from:
// import { InstrumentationAbstract } from '@opentelemetry/instrumentation/build/src/instrumentation';
// When this is exposed we can import from there.
class $15ec3fbdf86c3b66$export$74c31cfd4e541b89 {
    constructor(instrumentationName, instrumentationVersion, config = {}){
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        /* Api to wrap instrumented method */ // eslint-disable-next-line @typescript-eslint/unbound-method
        this._wrap = $2e7c5eeb38eeb049$exports.wrap;
        /* Api to unwrap instrumented methods */ // eslint-disable-next-line @typescript-eslint/unbound-method
        this._unwrap = $2e7c5eeb38eeb049$exports.unwrap;
        /* Api to mass wrap instrumented method */ // eslint-disable-next-line @typescript-eslint/unbound-method
        this._massWrap = $2e7c5eeb38eeb049$exports.massWrap;
        /* Api to mass unwrap instrumented methods */ // eslint-disable-next-line @typescript-eslint/unbound-method
        this._massUnwrap = $2e7c5eeb38eeb049$exports.massUnwrap;
        this._config = Object.assign({
            enabled: true
        }, config);
        this._diag = (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).createComponentLogger({
            namespace: instrumentationName
        });
        this._tracer = (0, $d3d11f3bc96c5059$export$357889f174732d38).getTracer(instrumentationName, instrumentationVersion);
        this._meter = (0, $5a595f8022e2c266$export$b0c5c2fac8144e54).getMeter(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    /* Returns meter */ get meter() {
        return this._meter;
    }
    /**
   * Sets MeterProvider to this plugin
   * @param meterProvider
   */ setMeterProvider(meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    }
    /**
   * Sets the new metric instruments with the current Meter.
   */ _updateMetricInstruments() {
        return;
    }
    /* Returns InstrumentationConfig */ getConfig() {
        return this._config;
    }
    /**
   * Sets InstrumentationConfig to this plugin
   * @param InstrumentationConfig
   */ setConfig(config = {}) {
        this._config = Object.assign({}, config);
    }
    /**
   * Sets TraceProvider to this plugin
   * @param tracerProvider
   */ setTracerProvider(tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    }
    /* Returns tracer */ get tracer() {
        return this._tracer;
    }
}
/**
 * Web vitals auto-instrumentation, sends spans automatically for CLS, LCP, INP, FCP, FID, TTFB.
 * Defaults to sending spans for CLS, LCP, INP, FCP and TTFB.
 * @param config The {@link WebVitalsInstrumentationConfig }
 */ class $15ec3fbdf86c3b66$export$7534e3ac3fe6bec2 extends $15ec3fbdf86c3b66$export$74c31cfd4e541b89 {
    constructor({ enabled: enabled = true, vitalsToTrack: vitalsToTrack = [
        "CLS",
        "LCP",
        "INP",
        "TTFB",
        "FCP"
    ], lcp: lcp, cls: cls, inp: inp, fid: fid, fcp: fcp, ttfb: ttfb } = {}){
        const config = {
            enabled: enabled,
            vitalsToTrack: vitalsToTrack,
            lcp: lcp,
            cls: cls,
            inp: inp,
            fid: fid,
            fcp: fcp,
            ttfb: ttfb
        };
        super("@honeycombio/instrumentation-web-vitals", $15ec3fbdf86c3b66$var$VERSION, config);
        this.onReportCLS = (cls, clsOpts = {})=>{
            const { applyCustomAttributes: applyCustomAttributes } = clsOpts;
            if (!this.isEnabled()) return;
            const { name: name, attribution: attribution } = cls;
            const { largestShiftTarget: largestShiftTarget, largestShiftTime: largestShiftTime, largestShiftValue: largestShiftValue, loadState: loadState, largestShiftEntry: largestShiftEntry } = attribution;
            const attrPrefix = this.getAttrPrefix(name);
            const span = this.tracer.startSpan(name);
            span.setAttributes(Object.assign(Object.assign({}, this.getSharedAttributes(cls)), {
                [`${attrPrefix}.largest_shift_target`]: largestShiftTarget,
                [`${attrPrefix}.element`]: largestShiftTarget,
                [`${attrPrefix}.largest_shift_time`]: largestShiftTime,
                [`${attrPrefix}.largest_shift_value`]: largestShiftValue,
                [`${attrPrefix}.load_state`]: loadState,
                [`${attrPrefix}.had_recent_input`]: largestShiftEntry === null || largestShiftEntry === void 0 ? void 0 : largestShiftEntry.hadRecentInput
            }));
            if (applyCustomAttributes) applyCustomAttributes(cls, span);
            span.end();
        };
        this.onReportLCP = (lcp, lcpOpts = {})=>{
            const { applyCustomAttributes: applyCustomAttributes, dataAttributes: dataAttributes } = lcpOpts;
            if (!this.isEnabled()) return;
            const { name: name, attribution: attribution } = lcp;
            const { element: element, url: url, timeToFirstByte: timeToFirstByte, resourceLoadDelay: resourceLoadDelay, resourceLoadDuration: resourceLoadDuration, elementRenderDelay: elementRenderDelay, lcpEntry: lcpEntry } = attribution;
            const attrPrefix = this.getAttrPrefix(name);
            const span = this.tracer.startSpan(name);
            span.setAttributes(Object.assign(Object.assign({}, this.getSharedAttributes(lcp)), {
                [`${attrPrefix}.element`]: element,
                [`${attrPrefix}.url`]: url,
                [`${attrPrefix}.time_to_first_byte`]: timeToFirstByte,
                [`${attrPrefix}.resource_load_delay`]: resourceLoadDelay,
                [`${attrPrefix}.resource_load_duration`]: resourceLoadDuration,
                [`${attrPrefix}.element_render_delay`]: elementRenderDelay,
                // This will be deprecated in a future version
                [`${attrPrefix}.resource_load_time`]: resourceLoadDuration
            }));
            const el = lcpEntry === null || lcpEntry === void 0 ? void 0 : lcpEntry.element;
            if (el === null || el === void 0 ? void 0 : el.dataset) for(const attrName in el.dataset){
                const attrValue = el.dataset[attrName];
                if (// Value exists (including the empty string AND either
                attrValue !== undefined && // dataAttributes is undefined (i.e. send all values as span attributes) OR
                (dataAttributes === undefined || // dataAttributes is specified AND attrName is in dataAttributes (i.e attribute name is in the supplied allowList)
                dataAttributes.includes(attrName))) span.setAttribute(`${attrPrefix}.element.data.${attrName}`, attrValue);
            }
            if (applyCustomAttributes) applyCustomAttributes(lcp, span);
            span.end();
        };
        this.onReportINP = (inp, inpOpts = {
            includeTimingsAsSpans: false
        })=>{
            const { applyCustomAttributes: applyCustomAttributes, includeTimingsAsSpans: includeTimingsAsSpans } = inpOpts;
            if (!this.isEnabled()) return;
            const { name: name, attribution: attribution } = inp;
            const { inputDelay: inputDelay, interactionTarget: interactionTarget, interactionTime: interactionTime, interactionType: interactionType, loadState: loadState, nextPaintTime: nextPaintTime, presentationDelay: presentationDelay, processingDuration: processingDuration, longAnimationFrameEntries: _loafEntries } = attribution;
            const longAnimationFrameEntries = _loafEntries;
            const attrPrefix = this.getAttrPrefix(name);
            const inpDuration = inputDelay + processingDuration + presentationDelay;
            this.tracer.startActiveSpan(name, {
                startTime: interactionTime
            }, (inpSpan)=>{
                const inpAttributes = Object.assign(Object.assign({}, this.getSharedAttributes(inp)), {
                    [`${attrPrefix}.input_delay`]: inputDelay,
                    [`${attrPrefix}.interaction_target`]: interactionTarget,
                    [`${attrPrefix}.interaction_time`]: interactionTime,
                    [`${attrPrefix}.interaction_type`]: interactionType,
                    [`${attrPrefix}.load_state`]: loadState,
                    [`${attrPrefix}.next_paint_time`]: nextPaintTime,
                    [`${attrPrefix}.presentation_delay`]: presentationDelay,
                    [`${attrPrefix}.processing_duration`]: processingDuration,
                    [`${attrPrefix}.duration`]: inpDuration,
                    // These will be deprecated in a future version
                    [`${attrPrefix}.element`]: interactionTarget,
                    [`${attrPrefix}.event_type`]: interactionType
                });
                inpSpan.setAttributes(inpAttributes);
                if (applyCustomAttributes) applyCustomAttributes(inp, inpSpan);
                if (includeTimingsAsSpans) longAnimationFrameEntries.forEach((perfEntry)=>{
                    this.processPerformanceLongAnimationFrameTimingSpans(attrPrefix, perfEntry);
                });
                inpSpan.end(interactionTime + inpDuration);
            });
        };
        this.onReportFCP = (fcp, fcpOpts = {})=>{
            const { applyCustomAttributes: applyCustomAttributes } = fcpOpts;
            if (!this.isEnabled()) return;
            const { name: name, attribution: attribution } = fcp;
            const { timeToFirstByte: timeToFirstByte, firstByteToFCP: firstByteToFCP, loadState: loadState } = attribution;
            const attrPrefix = this.getAttrPrefix(name);
            const span = this.tracer.startSpan(name);
            span.setAttributes(Object.assign(Object.assign({}, this.getSharedAttributes(fcp)), {
                [`${attrPrefix}.time_to_first_byte`]: timeToFirstByte,
                [`${attrPrefix}.time_since_first_byte`]: firstByteToFCP,
                [`${attrPrefix}.load_state`]: loadState
            }));
            if (applyCustomAttributes) applyCustomAttributes(fcp, span);
            span.end();
        };
        /**
     *  @deprecated this will be removed in the next major version, use INP instead.
     */ this.onReportFID = (fid, fidOpts = {})=>{
            const { applyCustomAttributes: applyCustomAttributes } = fidOpts;
            if (!this.isEnabled()) return;
            const { name: name, attribution: attribution } = fid;
            const { eventTarget: eventTarget, eventType: eventType, loadState: loadState } = attribution;
            const attrPrefix = this.getAttrPrefix(name);
            const span = this.tracer.startSpan(name);
            span.setAttributes(Object.assign(Object.assign({}, this.getSharedAttributes(fid)), {
                [`${attrPrefix}.element`]: eventTarget,
                [`${attrPrefix}.event_type`]: eventType,
                [`${attrPrefix}.load_state`]: loadState
            }));
            if (applyCustomAttributes) applyCustomAttributes(fid, span);
            span.end();
        };
        this.onReportTTFB = (ttfb, ttfbOpts = {})=>{
            const { applyCustomAttributes: applyCustomAttributes } = ttfbOpts;
            if (!this.isEnabled()) return;
            const { name: name, attribution: attribution } = ttfb;
            const { cacheDuration: cacheDuration, connectionDuration: connectionDuration, dnsDuration: dnsDuration, requestDuration: requestDuration, waitingDuration: waitingDuration } = attribution;
            const attrPrefix = this.getAttrPrefix(name);
            const attributes = Object.assign(Object.assign({}, this.getSharedAttributes(ttfb)), {
                [`${attrPrefix}.waiting_duration`]: waitingDuration,
                [`${attrPrefix}.dns_duration`]: dnsDuration,
                [`${attrPrefix}.connection_duration`]: connectionDuration,
                [`${attrPrefix}.request_duration`]: requestDuration,
                [`${attrPrefix}.cache_duration`]: cacheDuration,
                // These will be deprecated ina future version
                [`${attrPrefix}.waiting_time`]: waitingDuration,
                [`${attrPrefix}.dns_time`]: dnsDuration,
                [`${attrPrefix}.connection_time`]: connectionDuration,
                [`${attrPrefix}.request_time`]: requestDuration
            });
            const span = this.tracer.startSpan(name);
            span.setAttributes(attributes);
            if (applyCustomAttributes) applyCustomAttributes(ttfb, span);
            span.end();
        };
        this.vitalsToTrack = [
            ...vitalsToTrack
        ];
        this.lcpOpts = lcp;
        this.clsOpts = cls;
        this.inpOpts = inp;
        this.fidOpts = fid;
        this.fcpOpts = fcp;
        this.ttfbOpts = ttfb;
        this._isEnabled = enabled;
        this._setupWebVitalsCallbacks();
    }
    init() {}
    _setupWebVitalsCallbacks() {
        if (this.vitalsToTrack.includes("CLS")) $15ec3fbdf86c3b66$var$D((vital)=>{
            this.onReportCLS(vital, this.clsOpts);
        }, this.clsOpts);
        if (this.vitalsToTrack.includes("LCP")) $15ec3fbdf86c3b66$var$ot((vital)=>{
            this.onReportLCP(vital, this.lcpOpts);
        }, this.lcpOpts);
        if (this.vitalsToTrack.includes("INP")) $15ec3fbdf86c3b66$var$rt((vital)=>{
            this.onReportINP(vital, this.inpOpts);
        }, this.inpOpts);
        if (this.vitalsToTrack.includes("FID")) $15ec3fbdf86c3b66$var$yt((vital)=>{
            this.onReportFID(vital, this.fidOpts);
        }, this.fidOpts);
        if (this.vitalsToTrack.includes("TTFB")) $15ec3fbdf86c3b66$var$ft((vital)=>{
            this.onReportTTFB(vital, this.ttfbOpts);
        }, this.ttfbOpts);
        if (this.vitalsToTrack.includes("FCP")) $15ec3fbdf86c3b66$var$w((vital)=>{
            this.onReportFCP(vital, this.fcpOpts);
        }, this.fcpOpts);
    }
    getAttrPrefix(name) {
        return name.toLowerCase();
    }
    getSharedAttributes(vital) {
        const { name: name, id: id, delta: delta, rating: rating, value: value, navigationType: navigationType } = vital;
        const attrPrefix = this.getAttrPrefix(name);
        return {
            [`${attrPrefix}.id`]: id,
            [`${attrPrefix}.delta`]: delta,
            [`${attrPrefix}.value`]: value,
            [`${attrPrefix}.rating`]: rating,
            [`${attrPrefix}.navigation_type`]: navigationType
        };
    }
    getAttributesForPerformanceLongAnimationFrameTiming(prefix, perfEntry) {
        const loafAttributes = {
            [`${prefix}.duration`]: perfEntry.duration,
            [`${prefix}.entryType`]: perfEntry.entryType,
            [`${prefix}.name`]: perfEntry.name,
            [`${prefix}.renderStart`]: perfEntry.renderStart,
            [`${prefix}.startTime`]: perfEntry.startTime
        };
        return loafAttributes;
    }
    getAttributesForPerformanceScriptTiming(prefix, scriptPerfEntry) {
        const scriptAttributes = {
            [`${prefix}.entry_type`]: scriptPerfEntry.entryType,
            [`${prefix}.start_time`]: scriptPerfEntry.startTime,
            [`${prefix}.execution_start`]: scriptPerfEntry.executionStart,
            [`${prefix}.duration`]: scriptPerfEntry.duration,
            [`${prefix}.forced_style_and_layout_duration`]: scriptPerfEntry.forcedStyleAndLayoutDuration,
            [`${prefix}.invoker`]: scriptPerfEntry.invoker,
            [`${prefix}.pause_duration`]: scriptPerfEntry.pauseDuration,
            [`${prefix}.source_url`]: scriptPerfEntry.sourceURL,
            [`${prefix}.source_function_name`]: scriptPerfEntry.sourceFunctionName,
            [`${prefix}.source_char_position`]: scriptPerfEntry.sourceCharPosition,
            [`${prefix}.window_attribution`]: scriptPerfEntry.windowAttribution
        };
        return scriptAttributes;
    }
    processPerformanceLongAnimationFrameTimingSpans(parentPrefix, perfEntry) {
        if (!perfEntry) return;
        const prefix = `${parentPrefix}.timing`;
        const loafAttributes = this.getAttributesForPerformanceLongAnimationFrameTiming(prefix, perfEntry);
        this.tracer.startActiveSpan(perfEntry.name, {
            startTime: perfEntry.startTime
        }, (span)=>{
            span.setAttributes(loafAttributes);
            this.processPerformanceScriptTimingSpans(prefix, perfEntry.scripts);
            span.end(perfEntry.startTime + perfEntry.duration);
        });
    }
    processPerformanceScriptTimingSpans(parentPrefix, perfScriptEntries) {
        if (!perfScriptEntries) return;
        if (!(perfScriptEntries === null || perfScriptEntries === void 0 ? void 0 : perfScriptEntries.length)) return;
        const prefix = `${parentPrefix}.script`;
        perfScriptEntries.map((scriptPerfEntry)=>{
            this.tracer.startActiveSpan(scriptPerfEntry.name, {
                startTime: scriptPerfEntry.startTime
            }, (span)=>{
                const scriptAttributes = this.getAttributesForPerformanceScriptTiming(prefix, scriptPerfEntry);
                span.setAttributes(scriptAttributes);
                span.end(scriptPerfEntry.startTime + scriptPerfEntry.duration);
            });
        });
    }
    disable() {
        if (!this.isEnabled()) {
            this._diag.debug(`Instrumentation already disabled`);
            return;
        }
        this._isEnabled = false;
        this._diag.debug(`Instrumentation  disabled`);
    }
    enable() {
        if (this.isEnabled()) {
            this._diag.debug(`Instrumentation already enabled`);
            return;
        }
        this._isEnabled = true;
        this._diag.debug(`Instrumentation  enabled`);
        this._diag.debug(`Sending spans for ${this.vitalsToTrack.join(",")}`);
    }
    isEnabled() {
        return this._isEnabled;
    }
}
/**
 * Global errors auto-instrumentation, sends spans automatically for exceptions that reach the window.
 * @param config The {@link GlobalErrorsInstrumentationConfig}
 */ class $15ec3fbdf86c3b66$var$GlobalErrorsInstrumentation extends $15ec3fbdf86c3b66$export$74c31cfd4e541b89 {
    constructor({ enabled: enabled = true } = {}){
        const config = {
            enabled: enabled
        };
        super("@honeycombio/instrumentation-global-errors", $15ec3fbdf86c3b66$var$VERSION, config);
        this._computeStackTrace = (error)=>{
            if (!error) return {};
            // OTLP does not accept arrays of objects
            // breaking down the stack into arrays of strings/numbers
            const structuredStack = (0, $9qQwD.computeStackTrace)(error).stack;
            const lines = [];
            const columns = [];
            const functions = [];
            const urls = [];
            for (const stackFrame of structuredStack){
                lines.push(stackFrame.line);
                columns.push(stackFrame.column);
                functions.push(stackFrame.func);
                urls.push(stackFrame.url);
            }
            return {
                "exception.structured_stacktrace.columns": columns,
                "exception.structured_stacktrace.lines": lines,
                "exception.structured_stacktrace.functions": functions,
                "exception.structured_stacktrace.urls": urls
            };
        };
        this.onError = (event)=>{
            const error = "reason" in event ? event.reason : event.error;
            const message = error === null || error === void 0 ? void 0 : error.message;
            const type = error === null || error === void 0 ? void 0 : error.name;
            const attributes = Object.assign({
                [(0, $24d609c8531796f7$export$ecc84ea0f5a24384)]: type,
                [(0, $24d609c8531796f7$export$ff69507dfa9dcf0c)]: message,
                [(0, $24d609c8531796f7$export$d9432f0c350b687d)]: error === null || error === void 0 ? void 0 : error.stack
            }, this._computeStackTrace(error));
            // otel spec requires at minimum these two
            if (!message || !type) return;
            const errorSpan = this.tracer.startSpan("exception", {
                attributes: attributes
            }, (0, $c903d3361d9a81c0$export$a078c61943f9dbbe).active());
            errorSpan.setStatus({
                code: (0, $4a0044d2fb535a6a$export$1e28dd9b5d01db83).ERROR,
                message: message
            });
            errorSpan.end();
        };
        if (enabled) this.enable();
        this._isEnabled = enabled;
    }
    init() {}
    disable() {
        if (!this.isEnabled()) {
            this._diag.debug(`Instrumentation already disabled`);
            return;
        }
        this._isEnabled = false;
        window.removeEventListener("error", this.onError);
        window.removeEventListener("unhandledrejection", this.onError);
        this._diag.debug(`Instrumentation  disabled`);
    }
    enable() {
        if (this.isEnabled()) {
            this._diag.debug(`Instrumentation already enabled`);
            return;
        }
        this._isEnabled = true;
        window.addEventListener("error", this.onError);
        window.addEventListener("unhandledrejection", this.onError);
        this._diag.debug(`Instrumentation  enabled`);
    }
    isEnabled() {
        return this._isEnabled;
    }
}
class $15ec3fbdf86c3b66$export$ebb653038a1b822d extends $15ec3fbdf86c3b66$export$491dd6ac0de3c7f8 {
    constructor(options){
        var _a, _b;
        const instrumentations = [
            ...(options === null || options === void 0 ? void 0 : options.instrumentations) || []
        ];
        // Automatically include web vitals instrumentation unless explicitly set to false
        if (((_a = options === null || options === void 0 ? void 0 : options.webVitalsInstrumentationConfig) === null || _a === void 0 ? void 0 : _a.enabled) !== false) instrumentations.push(new $15ec3fbdf86c3b66$export$7534e3ac3fe6bec2(options === null || options === void 0 ? void 0 : options.webVitalsInstrumentationConfig));
        // Automatically include global errors instrumentation unless explicitly set to false
        if (((_b = options === null || options === void 0 ? void 0 : options.globalErrorsInstrumentationConfig) === null || _b === void 0 ? void 0 : _b.enabled) !== false) instrumentations.push(new $15ec3fbdf86c3b66$var$GlobalErrorsInstrumentation(options === null || options === void 0 ? void 0 : options.globalErrorsInstrumentationConfig));
        super(Object.assign(Object.assign({}, options), {
            instrumentations: instrumentations,
            resource: $15ec3fbdf86c3b66$var$mergeResources([
                $15ec3fbdf86c3b66$var$configureBrowserAttributesResource(),
                $15ec3fbdf86c3b66$var$configureEntryPageResource(options === null || options === void 0 ? void 0 : options.entryPageAttributes),
                options === null || options === void 0 ? void 0 : options.resource,
                options === null || options === void 0 ? void 0 : options.resourceAttributes,
                $15ec3fbdf86c3b66$var$configureHoneycombResource()
            ]),
            sampler: $15ec3fbdf86c3b66$var$configureDeterministicSampler(options),
            // Exporter is configured through the span processor because
            // the base SDK does not allow having both a spanProcessor and a
            // traceExporter configured at the same time.
            spanProcessor: $15ec3fbdf86c3b66$var$configureSpanProcessors(options)
        }));
        $15ec3fbdf86c3b66$var$validateOptionsWarnings(options);
        if (options === null || options === void 0 ? void 0 : options.debug) $15ec3fbdf86c3b66$var$configureDebug(options);
    }
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $4485e1475008eb40$export$74be52df2d6fd28c;
(function(PerformanceTimingNames) {
    PerformanceTimingNames["CONNECT_END"] = "connectEnd";
    PerformanceTimingNames["CONNECT_START"] = "connectStart";
    PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
    PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
    PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
    PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
    PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
    PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
    PerformanceTimingNames["FETCH_START"] = "fetchStart";
    PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
    PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
    PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
    PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
    PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
    PerformanceTimingNames["REQUEST_START"] = "requestStart";
    PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
    PerformanceTimingNames["RESPONSE_START"] = "responseStart";
    PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
    PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
    PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})($4485e1475008eb40$export$74be52df2d6fd28c || ($4485e1475008eb40$export$74be52df2d6fd28c = {}));


var $d841c88136dbe83b$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function $d841c88136dbe83b$export$c2a944331f80ae92(url, urlToMatch) {
    if (typeof urlToMatch === "string") return url === urlToMatch;
    else return !!url.match(urlToMatch);
}
function $d841c88136dbe83b$export$172b5a1c42a6f83d(url, ignoredUrls) {
    var e_1, _a;
    if (!ignoredUrls) return false;
    try {
        for(var ignoredUrls_1 = $d841c88136dbe83b$var$__values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()){
            var ignoreUrl = ignoredUrls_1_1.value;
            if ($d841c88136dbe83b$export$c2a944331f80ae92(url, ignoreUrl)) return true;
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return false;
}



// Used to normalize relative URLs
var $79aec9cc23f983ad$var$urlNormalizingAnchor;
function $79aec9cc23f983ad$var$getUrlNormalizingAnchor() {
    if (!$79aec9cc23f983ad$var$urlNormalizingAnchor) $79aec9cc23f983ad$var$urlNormalizingAnchor = document.createElement("a");
    return $79aec9cc23f983ad$var$urlNormalizingAnchor;
}
function $79aec9cc23f983ad$export$94df19ecb868bc1a(obj, key) {
    return key in obj;
}
function $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, performanceName, entries, refPerfName) {
    var perfTime = undefined;
    var refTime = undefined;
    if ($79aec9cc23f983ad$export$94df19ecb868bc1a(entries, performanceName) && typeof entries[performanceName] === "number") perfTime = entries[performanceName];
    var refName = refPerfName || (0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START;
    // Use a reference time which is the earliest possible value so that the performance timings that are earlier should not be added
    // using FETCH START time in case no reference is provided
    if ($79aec9cc23f983ad$export$94df19ecb868bc1a(entries, refName) && typeof entries[refName] === "number") refTime = entries[refName];
    if (perfTime !== undefined && refTime !== undefined && perfTime >= refTime) {
        span.addEvent(performanceName, perfTime);
        return span;
    }
    return undefined;
}
function $79aec9cc23f983ad$export$e2385716cf129455(span, resource) {
    $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START, resource);
    $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).DOMAIN_LOOKUP_START, resource);
    $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).DOMAIN_LOOKUP_END, resource);
    $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).CONNECT_START, resource);
    if ($79aec9cc23f983ad$export$94df19ecb868bc1a(resource, "name") && resource["name"].startsWith("https:")) $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).SECURE_CONNECTION_START, resource);
    $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).CONNECT_END, resource);
    $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).REQUEST_START, resource);
    $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).RESPONSE_START, resource);
    $79aec9cc23f983ad$export$7e5e8f17966d37d1(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).RESPONSE_END, resource);
    var encodedLength = resource[(0, $4485e1475008eb40$export$74be52df2d6fd28c).ENCODED_BODY_SIZE];
    if (encodedLength !== undefined) span.setAttribute((0, $29f26dae6e075eca$export$58d4fbfe35e08be0), encodedLength);
    var decodedLength = resource[(0, $4485e1475008eb40$export$74be52df2d6fd28c).DECODED_BODY_SIZE];
    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)
    if (decodedLength !== undefined && encodedLength !== decodedLength) span.setAttribute((0, $29f26dae6e075eca$export$b9d3e41cd56c56cc), decodedLength);
}
function $79aec9cc23f983ad$export$5d17283e524de23c(filteredResources) {
    return filteredResources.slice().sort(function(a, b) {
        var valueA = a[(0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START];
        var valueB = b[(0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START];
        if (valueA > valueB) return 1;
        else if (valueA < valueB) return -1;
        return 0;
    });
}
/** Returns the origin if present (if in browser context). */ function $79aec9cc23f983ad$var$getOrigin() {
    return typeof location !== "undefined" ? location.origin : undefined;
}
function $79aec9cc23f983ad$export$cdcba7438a7553e8(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    if (ignoredResources === void 0) ignoredResources = new WeakSet();
    // de-relativize the URL before usage (does no harm to absolute URLs)
    var parsedSpanUrl = $79aec9cc23f983ad$export$7a5253c0f62e0150(spanUrl);
    spanUrl = parsedSpanUrl.toString();
    var filteredResources = $79aec9cc23f983ad$var$filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);
    if (filteredResources.length === 0) return {
        mainRequest: undefined
    };
    if (filteredResources.length === 1) return {
        mainRequest: filteredResources[0]
    };
    var sorted = $79aec9cc23f983ad$export$5d17283e524de23c(filteredResources);
    if (parsedSpanUrl.origin !== $79aec9cc23f983ad$var$getOrigin() && sorted.length > 1) {
        var corsPreFlightRequest = sorted[0];
        var mainRequest = $79aec9cc23f983ad$var$findMainRequest(sorted, corsPreFlightRequest[(0, $4485e1475008eb40$export$74be52df2d6fd28c).RESPONSE_END], endTimeHR);
        var responseEnd = corsPreFlightRequest[(0, $4485e1475008eb40$export$74be52df2d6fd28c).RESPONSE_END];
        var fetchStart = mainRequest[(0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START];
        // no corsPreFlightRequest
        if (fetchStart < responseEnd) {
            mainRequest = corsPreFlightRequest;
            corsPreFlightRequest = undefined;
        }
        return {
            corsPreFlightRequest: corsPreFlightRequest,
            mainRequest: mainRequest
        };
    } else return {
        mainRequest: filteredResources[0]
    };
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */ function $79aec9cc23f983ad$var$findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
    var spanEndTime = (0, $d06339726fb5d441$export$2d91441ae30ebcfc)(spanEndTimeHR);
    var minTime = (0, $d06339726fb5d441$export$2d91441ae30ebcfc)((0, $d06339726fb5d441$export$5f4c8a8ba0e36226)(corsPreFlightRequestEndTime));
    var mainRequest = resources[1];
    var bestGap;
    var length = resources.length;
    for(var i = 1; i < length; i++){
        var resource = resources[i];
        var resourceStartTime = (0, $d06339726fb5d441$export$2d91441ae30ebcfc)((0, $d06339726fb5d441$export$5f4c8a8ba0e36226)(resource[(0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START]));
        var resourceEndTime = (0, $d06339726fb5d441$export$2d91441ae30ebcfc)((0, $d06339726fb5d441$export$5f4c8a8ba0e36226)(resource[(0, $4485e1475008eb40$export$74be52df2d6fd28c).RESPONSE_END]));
        var currentGap = spanEndTime - resourceEndTime;
        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
            bestGap = currentGap;
            mainRequest = resource;
        }
    }
    return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */ function $79aec9cc23f983ad$var$filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    var startTime = (0, $d06339726fb5d441$export$2d91441ae30ebcfc)(startTimeHR);
    var endTime = (0, $d06339726fb5d441$export$2d91441ae30ebcfc)(endTimeHR);
    var filteredResources = resources.filter(function(resource) {
        var resourceStartTime = (0, $d06339726fb5d441$export$2d91441ae30ebcfc)((0, $d06339726fb5d441$export$5f4c8a8ba0e36226)(resource[(0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START]));
        var resourceEndTime = (0, $d06339726fb5d441$export$2d91441ae30ebcfc)((0, $d06339726fb5d441$export$5f4c8a8ba0e36226)(resource[(0, $4485e1475008eb40$export$74be52df2d6fd28c).RESPONSE_END]));
        return resource.initiatorType.toLowerCase() === (initiatorType || "xmlhttprequest") && resource.name === spanUrl && resourceStartTime >= startTime && resourceEndTime <= endTime;
    });
    if (filteredResources.length > 0) filteredResources = filteredResources.filter(function(resource) {
        return !ignoredResources.has(resource);
    });
    return filteredResources;
}
function $79aec9cc23f983ad$export$7a5253c0f62e0150(url) {
    if (typeof URL === "function") return new URL(url, typeof document !== "undefined" ? document.baseURI : typeof location !== "undefined" // Some JS runtimes (e.g. Deno) don't define this
     ? location.href : undefined);
    var element = $79aec9cc23f983ad$var$getUrlNormalizingAnchor();
    element.href = url;
    return element;
}
function $79aec9cc23f983ad$export$6535eb414fa2c8b6(url) {
    var urlLike = $79aec9cc23f983ad$export$7a5253c0f62e0150(url);
    return urlLike.href;
}
function $79aec9cc23f983ad$export$fabdebd274ccbd1c(target, optimised) {
    if (target.nodeType === Node.DOCUMENT_NODE) return "/";
    var targetValue = $79aec9cc23f983ad$var$getNodeValue(target, optimised);
    if (optimised && targetValue.indexOf("@id") > 0) return targetValue;
    var xpath = "";
    if (target.parentNode) xpath += $79aec9cc23f983ad$export$fabdebd274ccbd1c(target.parentNode, false);
    xpath += targetValue;
    return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */ function $79aec9cc23f983ad$var$getNodeIndex(target) {
    if (!target.parentNode) return 0;
    var allowedTypes = [
        target.nodeType
    ];
    if (target.nodeType === Node.CDATA_SECTION_NODE) allowedTypes.push(Node.TEXT_NODE);
    var elements = Array.from(target.parentNode.childNodes);
    elements = elements.filter(function(element) {
        var localName = element.localName;
        return allowedTypes.indexOf(element.nodeType) >= 0 && localName === target.localName;
    });
    if (elements.length >= 1) return elements.indexOf(target) + 1; // xpath starts from 1
    // if there are no other similar child xpath doesn't need index
    return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */ function $79aec9cc23f983ad$var$getNodeValue(target, optimised) {
    var nodeType = target.nodeType;
    var index = $79aec9cc23f983ad$var$getNodeIndex(target);
    var nodeValue = "";
    if (nodeType === Node.ELEMENT_NODE) {
        var id = target.getAttribute("id");
        if (optimised && id) return '//*[@id="' + id + '"]';
        nodeValue = target.localName;
    } else if (nodeType === Node.TEXT_NODE || nodeType === Node.CDATA_SECTION_NODE) nodeValue = "text()";
    else if (nodeType === Node.COMMENT_NODE) nodeValue = "comment()";
    else return "";
    // if index is 1 it can be omitted in xpath
    if (nodeValue && index > 1) return "/" + nodeValue + "[" + index + "]";
    return "/" + nodeValue;
}
function $79aec9cc23f983ad$export$c6501d7e56a5b40a(spanUrl, propagateTraceHeaderCorsUrls) {
    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];
    if (typeof propagateTraceHeaderUrls === "string" || propagateTraceHeaderUrls instanceof RegExp) propagateTraceHeaderUrls = [
        propagateTraceHeaderUrls
    ];
    var parsedSpanUrl = $79aec9cc23f983ad$export$7a5253c0f62e0150(spanUrl);
    if (parsedSpanUrl.origin === $79aec9cc23f983ad$var$getOrigin()) return true;
    else return propagateTraceHeaderUrls.some(function(propagateTraceHeaderUrl) {
        return (0, $d841c88136dbe83b$export$c2a944331f80ae92)(spanUrl, propagateTraceHeaderUrl);
    });
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Updates to this file should also be replicated to @opentelemetry/api and
// @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */ /** only globals that common to node and browsers are allowed */ // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var $04712fd9b3cf2e21$export$5c524ddf7208c00c = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof $parcel$global === "object" ? $parcel$global : {};


var $de074c8717ffcf67$export$be5e405504011951 = Symbol.for("io.opentelemetry.js.api.logs");
var $de074c8717ffcf67$export$fb1208122242c205 = (0, $04712fd9b3cf2e21$export$5c524ddf7208c00c);
function $de074c8717ffcf67$export$bf9e00ce1090794f(requiredVersion, instance, fallback) {
    return function(version) {
        return version === requiredVersion ? instance : fallback;
    };
}
var $de074c8717ffcf67$export$41e8763f7160bb4 = 1;


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $16dcc5d3d8a24056$export$d16ba98760c74dd5 = /** @class */ function() {
    function NoopLogger() {}
    NoopLogger.prototype.emit = function(_logRecord) {};
    return NoopLogger;
}();
var $16dcc5d3d8a24056$export$f5681b99b7ff4eb3 = new $16dcc5d3d8a24056$export$d16ba98760c74dd5();


var $145e639386791bce$export$8d7f6fb42e615208 = /** @class */ function() {
    function NoopLoggerProvider() {}
    NoopLoggerProvider.prototype.getLogger = function(_name, _version, _options) {
        return new (0, $16dcc5d3d8a24056$export$d16ba98760c74dd5)();
    };
    return NoopLoggerProvider;
}();
var $145e639386791bce$export$ade97358fd6ba8df = new $145e639386791bce$export$8d7f6fb42e615208();


var $9057d870dc5a70d7$export$f8e63508eb6a0fc1 = /** @class */ function() {
    function LogsAPI() {}
    LogsAPI.getInstance = function() {
        if (!this._instance) this._instance = new LogsAPI();
        return this._instance;
    };
    LogsAPI.prototype.setGlobalLoggerProvider = function(provider) {
        if ((0, $de074c8717ffcf67$export$fb1208122242c205)[0, $de074c8717ffcf67$export$be5e405504011951]) return this.getLoggerProvider();
        (0, $de074c8717ffcf67$export$fb1208122242c205)[0, $de074c8717ffcf67$export$be5e405504011951] = (0, $de074c8717ffcf67$export$bf9e00ce1090794f)((0, $de074c8717ffcf67$export$41e8763f7160bb4), provider, (0, $145e639386791bce$export$ade97358fd6ba8df));
        return provider;
    };
    /**
     * Returns the global logger provider.
     *
     * @returns LoggerProvider
     */ LogsAPI.prototype.getLoggerProvider = function() {
        var _a, _b;
        return (_b = (_a = (0, $de074c8717ffcf67$export$fb1208122242c205)[0, $de074c8717ffcf67$export$be5e405504011951]) === null || _a === void 0 ? void 0 : _a.call((0, $de074c8717ffcf67$export$fb1208122242c205), (0, $de074c8717ffcf67$export$41e8763f7160bb4))) !== null && _b !== void 0 ? _b : (0, $145e639386791bce$export$ade97358fd6ba8df);
    };
    /**
     * Returns a logger from the global logger provider.
     *
     * @returns Logger
     */ LogsAPI.prototype.getLogger = function(name, version, options) {
        return this.getLoggerProvider().getLogger(name, version, options);
    };
    /** Remove the global logger provider */ LogsAPI.prototype.disable = function() {
        delete (0, $de074c8717ffcf67$export$fb1208122242c205)[0, $de074c8717ffcf67$export$be5e405504011951];
    };
    return LogsAPI;
}();


var $f13d135b195aff29$export$fa0831f497706bad = (0, $9057d870dc5a70d7$export$f8e63508eb6a0fc1).getInstance();



var $aa17c3168154ca7b$var$__assign = undefined && undefined.__assign || function() {
    $aa17c3168154ca7b$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $aa17c3168154ca7b$var$__assign.apply(this, arguments);
};
/**
 * Base abstract internal class for instrumenting node and web plugins
 */ var $aa17c3168154ca7b$export$74c31cfd4e541b89 = /** @class */ function() {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */ this._wrap = $2e7c5eeb38eeb049$exports.wrap;
        /* Api to unwrap instrumented methods */ this._unwrap = $2e7c5eeb38eeb049$exports.unwrap;
        /* Api to mass wrap instrumented method */ this._massWrap = $2e7c5eeb38eeb049$exports.massWrap;
        /* Api to mass unwrap instrumented methods */ this._massUnwrap = $2e7c5eeb38eeb049$exports.massUnwrap;
        this.setConfig(config);
        this._diag = (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).createComponentLogger({
            namespace: instrumentationName
        });
        this._tracer = (0, $d3d11f3bc96c5059$export$357889f174732d38).getTracer(instrumentationName, instrumentationVersion);
        this._meter = (0, $5a595f8022e2c266$export$b0c5c2fac8144e54).getMeter(instrumentationName, instrumentationVersion);
        this._logger = (0, $f13d135b195aff29$export$fa0831f497706bad).getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */ get: function() {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */ InstrumentationAbstract.prototype.setMeterProvider = function(meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */ get: function() {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */ InstrumentationAbstract.prototype.setLoggerProvider = function(loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */ InstrumentationAbstract.prototype.getModuleDefinitions = function() {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) return [
            initResult
        ];
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */ InstrumentationAbstract.prototype._updateMetricInstruments = function() {
        return;
    };
    /* Returns InstrumentationConfig */ InstrumentationAbstract.prototype.getConfig = function() {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */ InstrumentationAbstract.prototype.setConfig = function(config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = $aa17c3168154ca7b$var$__assign({
            enabled: true
        }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */ InstrumentationAbstract.prototype.setTracerProvider = function(tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */ get: function() {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */ InstrumentationAbstract.prototype._runSpanCustomizationHook = function(hookHandler, triggerName, span, info) {
        if (!hookHandler) return;
        try {
            hookHandler(span, info);
        } catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", {
                triggerName: triggerName
            }, e);
        }
    };
    return InstrumentationAbstract;
}();


var $26595af39b955e18$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Base abstract class for instrumenting web plugins
 */ var $26595af39b955e18$export$436b1c2bf7e9756b = /** @class */ function(_super) {
    $26595af39b955e18$var$__extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) _this.enable();
        return _this;
    }
    return InstrumentationBase;
}((0, $aa17c3168154ca7b$export$74c31cfd4e541b89));

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $4283898bbb19f2a2$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $4283898bbb19f2a2$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
function $4283898bbb19f2a2$export$fdff7e10f8ca069e(execute, onFinish, preventThrowingError) {
    var error;
    var result;
    try {
        result = execute();
    } catch (e) {
        error = e;
    } finally{
        onFinish(error, result);
        if (error && !preventThrowingError) // eslint-disable-next-line no-unsafe-finally
        throw error;
        // eslint-disable-next-line no-unsafe-finally
        return result;
    }
}
function $4283898bbb19f2a2$export$75852fe3c08f1502(execute, onFinish, preventThrowingError) {
    return $4283898bbb19f2a2$var$__awaiter(this, void 0, void 0, function() {
        var error, result, e_1;
        return $4283898bbb19f2a2$var$__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    _a.trys.push([
                        0,
                        2,
                        3,
                        4
                    ]);
                    return [
                        4 /*yield*/ ,
                        execute()
                    ];
                case 1:
                    result = _a.sent();
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    e_1 = _a.sent();
                    error = e_1;
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 3:
                    onFinish(error, result);
                    if (error && !preventThrowingError) // eslint-disable-next-line no-unsafe-finally
                    throw error;
                    // eslint-disable-next-line no-unsafe-finally
                    return [
                        2 /*return*/ ,
                        result
                    ];
                case 4:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
function $4283898bbb19f2a2$export$ec0fd572751979bc(func) {
    return typeof func === "function" && typeof func.__original === "function" && typeof func.__unwrap === "function" && func.__wrapped === true;
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $32068f6429bc62b9$export$668754fb61dd076c;
(function(AttributeNames) {
    AttributeNames["DOCUMENT_LOAD"] = "documentLoad";
    AttributeNames["DOCUMENT_FETCH"] = "documentFetch";
    AttributeNames["RESOURCE_FETCH"] = "resourceFetch";
})($32068f6429bc62b9$export$668754fb61dd076c || ($32068f6429bc62b9$export$668754fb61dd076c = {}));


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // this is autogenerated file, see scripts/version-update.js
var $bcfe5daa8cc612d1$export$4a03ffab3315ee34 = "0.40.0";
var $bcfe5daa8cc612d1$export$b8b9d90f9e5bd72b = "@opentelemetry/instrumentation-document-load";



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $f3b6a865bbc558cf$export$3fd36d65bf762270;
(function(EventNames) {
    EventNames["FIRST_PAINT"] = "firstPaint";
    EventNames["FIRST_CONTENTFUL_PAINT"] = "firstContentfulPaint";
})($f3b6a865bbc558cf$export$3fd36d65bf762270 || ($f3b6a865bbc558cf$export$3fd36d65bf762270 = {}));


var $100cd572f10ce7d8$export$1edb6265ef1ecc26 = function() {
    var _a, _b;
    var entries = {};
    var performanceNavigationTiming = (_b = (_a = (0, $fb570aa63c9bb090$export$b22daef4119238cd)).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, "navigation")[0];
    if (performanceNavigationTiming) {
        var keys = Object.values((0, $4485e1475008eb40$export$74be52df2d6fd28c));
        keys.forEach(function(key) {
            if ((0, $79aec9cc23f983ad$export$94df19ecb868bc1a)(performanceNavigationTiming, key)) {
                var value = performanceNavigationTiming[key];
                if (typeof value === "number") entries[key] = value;
            }
        });
    } else {
        // // fallback to previous version
        var perf = (0, $fb570aa63c9bb090$export$b22daef4119238cd);
        var performanceTiming_1 = perf.timing;
        if (performanceTiming_1) {
            var keys = Object.values((0, $4485e1475008eb40$export$74be52df2d6fd28c));
            keys.forEach(function(key) {
                if ((0, $79aec9cc23f983ad$export$94df19ecb868bc1a)(performanceTiming_1, key)) {
                    var value = performanceTiming_1[key];
                    if (typeof value === "number") entries[key] = value;
                }
            });
        }
    }
    return entries;
};
var $100cd572f10ce7d8$var$performancePaintNames = {
    "first-paint": (0, $f3b6a865bbc558cf$export$3fd36d65bf762270).FIRST_PAINT,
    "first-contentful-paint": (0, $f3b6a865bbc558cf$export$3fd36d65bf762270).FIRST_CONTENTFUL_PAINT
};
var $100cd572f10ce7d8$export$dbffc7a51b89acf6 = function(span) {
    var _a, _b;
    var performancePaintTiming = (_b = (_a = (0, $fb570aa63c9bb090$export$b22daef4119238cd)).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, "paint");
    if (performancePaintTiming) performancePaintTiming.forEach(function(_a) {
        var name = _a.name, startTime = _a.startTime;
        if ((0, $79aec9cc23f983ad$export$94df19ecb868bc1a)($100cd572f10ce7d8$var$performancePaintNames, name)) span.addEvent($100cd572f10ce7d8$var$performancePaintNames[name], startTime);
    });
};


var $61e5230b21382ad6$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * This class represents a document load plugin
 */ var $61e5230b21382ad6$export$381e8ef2e310d2c3 = /** @class */ function(_super) {
    $61e5230b21382ad6$var$__extends(DocumentLoadInstrumentation, _super);
    function DocumentLoadInstrumentation(config) {
        if (config === void 0) config = {};
        var _this = _super.call(this, (0, $bcfe5daa8cc612d1$export$b8b9d90f9e5bd72b), (0, $bcfe5daa8cc612d1$export$4a03ffab3315ee34), config) || this;
        _this.component = "document-load";
        _this.version = "1";
        _this.moduleName = _this.component;
        return _this;
    }
    DocumentLoadInstrumentation.prototype.init = function() {};
    /**
     * callback to be executed when page is loaded
     */ DocumentLoadInstrumentation.prototype._onDocumentLoaded = function() {
        var _this = this;
        // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd.
        // Support for event "loadend" is very limited and cannot be used
        window.setTimeout(function() {
            _this._collectPerformance();
        });
    };
    /**
     * Adds spans for all resources
     * @param rootSpan
     */ DocumentLoadInstrumentation.prototype._addResourcesSpans = function(rootSpan) {
        var _this = this;
        var _a, _b;
        var resources = (_b = (_a = (0, $fb570aa63c9bb090$export$b22daef4119238cd)).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, "resource");
        if (resources) resources.forEach(function(resource) {
            _this._initResourceSpan(resource, rootSpan);
        });
    };
    /**
     * Collects information about performance and creates appropriate spans
     */ DocumentLoadInstrumentation.prototype._collectPerformance = function() {
        var _this = this;
        var metaElement = Array.from(document.getElementsByTagName("meta")).find(function(e) {
            return e.getAttribute("name") === (0, $2aca640bec4a6daf$export$830e05fa2746348);
        });
        var entries = (0, $100cd572f10ce7d8$export$1edb6265ef1ecc26)();
        var traceparent = metaElement && metaElement.content || "";
        (0, $c903d3361d9a81c0$export$a078c61943f9dbbe).with((0, $341b7c0814521fae$export$3e49040daa9dba20).extract((0, $934e30cdbca38464$export$78df28f9b2f9a7dc), {
            traceparent: traceparent
        }), function() {
            var _a;
            var rootSpan = _this._startSpan((0, $32068f6429bc62b9$export$668754fb61dd076c).DOCUMENT_LOAD, (0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START, entries);
            if (!rootSpan) return;
            (0, $c903d3361d9a81c0$export$a078c61943f9dbbe).with((0, $d3d11f3bc96c5059$export$357889f174732d38).setSpan((0, $c903d3361d9a81c0$export$a078c61943f9dbbe).active(), rootSpan), function() {
                var fetchSpan = _this._startSpan((0, $32068f6429bc62b9$export$668754fb61dd076c).DOCUMENT_FETCH, (0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START, entries);
                if (fetchSpan) {
                    fetchSpan.setAttribute((0, $29f26dae6e075eca$export$2f4ef7e39c2be395), location.href);
                    (0, $c903d3361d9a81c0$export$a078c61943f9dbbe).with((0, $d3d11f3bc96c5059$export$357889f174732d38).setSpan((0, $c903d3361d9a81c0$export$a078c61943f9dbbe).active(), fetchSpan), function() {
                        var _a;
                        if (!_this.getConfig().ignoreNetworkEvents) (0, $79aec9cc23f983ad$export$e2385716cf129455)(fetchSpan, entries);
                        _this._addCustomAttributesOnSpan(fetchSpan, (_a = _this.getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.documentFetch);
                        _this._endSpan(fetchSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).RESPONSE_END, entries);
                    });
                }
            });
            rootSpan.setAttribute((0, $29f26dae6e075eca$export$2f4ef7e39c2be395), location.href);
            rootSpan.setAttribute((0, $29f26dae6e075eca$export$7472b18f42d2d02f), navigator.userAgent);
            _this._addResourcesSpans(rootSpan);
            if (!_this.getConfig().ignoreNetworkEvents) {
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START, entries);
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).UNLOAD_EVENT_START, entries);
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).UNLOAD_EVENT_END, entries);
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).DOM_INTERACTIVE, entries);
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).DOM_CONTENT_LOADED_EVENT_START, entries);
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).DOM_CONTENT_LOADED_EVENT_END, entries);
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).DOM_COMPLETE, entries);
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).LOAD_EVENT_START, entries);
                (0, $79aec9cc23f983ad$export$7e5e8f17966d37d1)(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).LOAD_EVENT_END, entries);
            }
            if (!_this.getConfig().ignorePerformancePaintEvents) (0, $100cd572f10ce7d8$export$dbffc7a51b89acf6)(rootSpan);
            _this._addCustomAttributesOnSpan(rootSpan, (_a = _this.getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.documentLoad);
            _this._endSpan(rootSpan, (0, $4485e1475008eb40$export$74be52df2d6fd28c).LOAD_EVENT_END, entries);
        });
    };
    /**
     * Helper function for ending span
     * @param span
     * @param performanceName name of performance entry for time end
     * @param entries
     */ DocumentLoadInstrumentation.prototype._endSpan = function(span, performanceName, entries) {
        // span can be undefined when entries are missing the certain performance - the span will not be created
        if (span) {
            if ((0, $79aec9cc23f983ad$export$94df19ecb868bc1a)(entries, performanceName)) span.end(entries[performanceName]);
            else // just end span
            span.end();
        }
    };
    /**
     * Creates and ends a span with network information about resource added as timed events
     * @param resource
     * @param parentSpan
     */ DocumentLoadInstrumentation.prototype._initResourceSpan = function(resource, parentSpan) {
        var _a;
        var span = this._startSpan((0, $32068f6429bc62b9$export$668754fb61dd076c).RESOURCE_FETCH, (0, $4485e1475008eb40$export$74be52df2d6fd28c).FETCH_START, resource, parentSpan);
        if (span) {
            span.setAttribute((0, $29f26dae6e075eca$export$2f4ef7e39c2be395), resource.name);
            if (!this.getConfig().ignoreNetworkEvents) (0, $79aec9cc23f983ad$export$e2385716cf129455)(span, resource);
            this._addCustomAttributesOnResourceSpan(span, resource, (_a = this.getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.resourceFetch);
            this._endSpan(span, (0, $4485e1475008eb40$export$74be52df2d6fd28c).RESPONSE_END, resource);
        }
    };
    /**
     * Helper function for starting a span
     * @param spanName name of span
     * @param performanceName name of performance entry for time start
     * @param entries
     * @param parentSpan
     */ DocumentLoadInstrumentation.prototype._startSpan = function(spanName, performanceName, entries, parentSpan) {
        if ((0, $79aec9cc23f983ad$export$94df19ecb868bc1a)(entries, performanceName) && typeof entries[performanceName] === "number") {
            var span = this.tracer.startSpan(spanName, {
                startTime: entries[performanceName]
            }, parentSpan ? (0, $d3d11f3bc96c5059$export$357889f174732d38).setSpan((0, $c903d3361d9a81c0$export$a078c61943f9dbbe).active(), parentSpan) : undefined);
            return span;
        }
        return undefined;
    };
    /**
     * executes callback {_onDocumentLoaded} when the page is loaded
     */ DocumentLoadInstrumentation.prototype._waitForPageLoad = function() {
        if (window.document.readyState === "complete") this._onDocumentLoaded();
        else {
            this._onDocumentLoaded = this._onDocumentLoaded.bind(this);
            window.addEventListener("load", this._onDocumentLoaded);
        }
    };
    /**
     * adds custom attributes to root span if configured
     */ DocumentLoadInstrumentation.prototype._addCustomAttributesOnSpan = function(span, applyCustomAttributesOnSpan) {
        var _this = this;
        if (applyCustomAttributesOnSpan) (0, $4283898bbb19f2a2$export$fdff7e10f8ca069e)(function() {
            return applyCustomAttributesOnSpan(span);
        }, function(error) {
            if (!error) return;
            _this._diag.error("addCustomAttributesOnSpan", error);
        }, true);
    };
    /**
     * adds custom attributes to span if configured
     */ DocumentLoadInstrumentation.prototype._addCustomAttributesOnResourceSpan = function(span, resource, applyCustomAttributesOnSpan) {
        var _this = this;
        if (applyCustomAttributesOnSpan) (0, $4283898bbb19f2a2$export$fdff7e10f8ca069e)(function() {
            return applyCustomAttributesOnSpan(span, resource);
        }, function(error) {
            if (!error) return;
            _this._diag.error("addCustomAttributesOnResourceSpan", error);
        }, true);
    };
    /**
     * implements enable function
     */ DocumentLoadInstrumentation.prototype.enable = function() {
        // remove previously attached load to avoid adding the same event twice
        // in case of multiple enable calling.
        window.removeEventListener("load", this._onDocumentLoaded);
        this._waitForPageLoad();
    };
    /**
     * implements disable function
     */ DocumentLoadInstrumentation.prototype.disable = function() {
        window.removeEventListener("load", this._onDocumentLoaded);
    };
    return DocumentLoadInstrumentation;
}((0, $26595af39b955e18$export$436b1c2bf7e9756b));







/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Updates to this file should also be replicated to @opentelemetry/api and
// @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */ /** only globals that common to node and browsers are allowed */ // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var $e33e156e532d43eb$export$5c524ddf7208c00c = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof $parcel$global === "object" ? $parcel$global : {};


var $1a66d34274469e58$export$be5e405504011951 = Symbol.for("io.opentelemetry.js.api.logs");
var $1a66d34274469e58$export$fb1208122242c205 = (0, $e33e156e532d43eb$export$5c524ddf7208c00c);
function $1a66d34274469e58$export$bf9e00ce1090794f(requiredVersion, instance, fallback) {
    return function(version) {
        return version === requiredVersion ? instance : fallback;
    };
}
var $1a66d34274469e58$export$41e8763f7160bb4 = 1;


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $29eb9dc6fde1fb7b$export$d16ba98760c74dd5 = /** @class */ function() {
    function NoopLogger() {}
    NoopLogger.prototype.emit = function(_logRecord) {};
    return NoopLogger;
}();
var $29eb9dc6fde1fb7b$export$f5681b99b7ff4eb3 = new $29eb9dc6fde1fb7b$export$d16ba98760c74dd5();


var $8112d6acb0a7bc9d$export$8d7f6fb42e615208 = /** @class */ function() {
    function NoopLoggerProvider() {}
    NoopLoggerProvider.prototype.getLogger = function(_name, _version, _options) {
        return new (0, $29eb9dc6fde1fb7b$export$d16ba98760c74dd5)();
    };
    return NoopLoggerProvider;
}();
var $8112d6acb0a7bc9d$export$ade97358fd6ba8df = new $8112d6acb0a7bc9d$export$8d7f6fb42e615208();


var $0d2ec925861091b8$export$f8e63508eb6a0fc1 = /** @class */ function() {
    function LogsAPI() {}
    LogsAPI.getInstance = function() {
        if (!this._instance) this._instance = new LogsAPI();
        return this._instance;
    };
    LogsAPI.prototype.setGlobalLoggerProvider = function(provider) {
        if ((0, $1a66d34274469e58$export$fb1208122242c205)[0, $1a66d34274469e58$export$be5e405504011951]) return this.getLoggerProvider();
        (0, $1a66d34274469e58$export$fb1208122242c205)[0, $1a66d34274469e58$export$be5e405504011951] = (0, $1a66d34274469e58$export$bf9e00ce1090794f)((0, $1a66d34274469e58$export$41e8763f7160bb4), provider, (0, $8112d6acb0a7bc9d$export$ade97358fd6ba8df));
        return provider;
    };
    /**
     * Returns the global logger provider.
     *
     * @returns LoggerProvider
     */ LogsAPI.prototype.getLoggerProvider = function() {
        var _a, _b;
        return (_b = (_a = (0, $1a66d34274469e58$export$fb1208122242c205)[0, $1a66d34274469e58$export$be5e405504011951]) === null || _a === void 0 ? void 0 : _a.call((0, $1a66d34274469e58$export$fb1208122242c205), (0, $1a66d34274469e58$export$41e8763f7160bb4))) !== null && _b !== void 0 ? _b : (0, $8112d6acb0a7bc9d$export$ade97358fd6ba8df);
    };
    /**
     * Returns a logger from the global logger provider.
     *
     * @returns Logger
     */ LogsAPI.prototype.getLogger = function(name, version, options) {
        return this.getLoggerProvider().getLogger(name, version, options);
    };
    /** Remove the global logger provider */ LogsAPI.prototype.disable = function() {
        delete (0, $1a66d34274469e58$export$fb1208122242c205)[0, $1a66d34274469e58$export$be5e405504011951];
    };
    return LogsAPI;
}();


var $1dbd59449a0f7dd7$export$fa0831f497706bad = (0, $0d2ec925861091b8$export$f8e63508eb6a0fc1).getInstance();



var $651ae66fb6e25fe3$var$__assign = undefined && undefined.__assign || function() {
    $651ae66fb6e25fe3$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $651ae66fb6e25fe3$var$__assign.apply(this, arguments);
};
/**
 * Base abstract internal class for instrumenting node and web plugins
 */ var $651ae66fb6e25fe3$export$74c31cfd4e541b89 = /** @class */ function() {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */ this._wrap = $2e7c5eeb38eeb049$exports.wrap;
        /* Api to unwrap instrumented methods */ this._unwrap = $2e7c5eeb38eeb049$exports.unwrap;
        /* Api to mass wrap instrumented method */ this._massWrap = $2e7c5eeb38eeb049$exports.massWrap;
        /* Api to mass unwrap instrumented methods */ this._massUnwrap = $2e7c5eeb38eeb049$exports.massUnwrap;
        this.setConfig(config);
        this._diag = (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).createComponentLogger({
            namespace: instrumentationName
        });
        this._tracer = (0, $d3d11f3bc96c5059$export$357889f174732d38).getTracer(instrumentationName, instrumentationVersion);
        this._meter = (0, $5a595f8022e2c266$export$b0c5c2fac8144e54).getMeter(instrumentationName, instrumentationVersion);
        this._logger = (0, $1dbd59449a0f7dd7$export$fa0831f497706bad).getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */ get: function() {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */ InstrumentationAbstract.prototype.setMeterProvider = function(meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */ get: function() {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */ InstrumentationAbstract.prototype.setLoggerProvider = function(loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */ InstrumentationAbstract.prototype.getModuleDefinitions = function() {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) return [
            initResult
        ];
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */ InstrumentationAbstract.prototype._updateMetricInstruments = function() {
        return;
    };
    /* Returns InstrumentationConfig */ InstrumentationAbstract.prototype.getConfig = function() {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */ InstrumentationAbstract.prototype.setConfig = function(config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = $651ae66fb6e25fe3$var$__assign({
            enabled: true
        }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */ InstrumentationAbstract.prototype.setTracerProvider = function(tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */ get: function() {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */ InstrumentationAbstract.prototype._runSpanCustomizationHook = function(hookHandler, triggerName, span, info) {
        if (!hookHandler) return;
        try {
            hookHandler(span, info);
        } catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", {
                triggerName: triggerName
            }, e);
        }
    };
    return InstrumentationAbstract;
}();


var $0d92fcad36680644$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Base abstract class for instrumenting web plugins
 */ var $0d92fcad36680644$export$436b1c2bf7e9756b = /** @class */ function(_super) {
    $0d92fcad36680644$var$__extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) _this.enable();
        return _this;
    }
    return InstrumentationBase;
}((0, $651ae66fb6e25fe3$export$74c31cfd4e541b89));

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $efa30c613bd1c722$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $efa30c613bd1c722$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
function $efa30c613bd1c722$export$fdff7e10f8ca069e(execute, onFinish, preventThrowingError) {
    var error;
    var result;
    try {
        result = execute();
    } catch (e) {
        error = e;
    } finally{
        onFinish(error, result);
        if (error && !preventThrowingError) // eslint-disable-next-line no-unsafe-finally
        throw error;
        // eslint-disable-next-line no-unsafe-finally
        return result;
    }
}
function $efa30c613bd1c722$export$75852fe3c08f1502(execute, onFinish, preventThrowingError) {
    return $efa30c613bd1c722$var$__awaiter(this, void 0, void 0, function() {
        var error, result, e_1;
        return $efa30c613bd1c722$var$__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    _a.trys.push([
                        0,
                        2,
                        3,
                        4
                    ]);
                    return [
                        4 /*yield*/ ,
                        execute()
                    ];
                case 1:
                    result = _a.sent();
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    e_1 = _a.sent();
                    error = e_1;
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 3:
                    onFinish(error, result);
                    if (error && !preventThrowingError) // eslint-disable-next-line no-unsafe-finally
                    throw error;
                    // eslint-disable-next-line no-unsafe-finally
                    return [
                        2 /*return*/ ,
                        result
                    ];
                case 4:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
function $efa30c613bd1c722$export$ec0fd572751979bc(func) {
    return typeof func === "function" && typeof func.__original === "function" && typeof func.__unwrap === "function" && func.__wrapped === true;
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Updates to this file should also be replicated to @opentelemetry/api too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */ /** only globals that common to node and browsers are allowed */ // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var $1310bbbb8d7ce057$export$5c524ddf7208c00c = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof $parcel$global === "object" ? $parcel$global : {};

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $8b4c50221cba5c47$export$b22daef4119238cd = performance;


var $835d8ffedcec1f88$var$NANOSECOND_DIGITS = 9;
var $835d8ffedcec1f88$var$NANOSECOND_DIGITS_IN_MILLIS = 6;
var $835d8ffedcec1f88$var$MILLISECONDS_TO_NANOSECONDS = Math.pow(10, $835d8ffedcec1f88$var$NANOSECOND_DIGITS_IN_MILLIS);
var $835d8ffedcec1f88$var$SECOND_TO_NANOSECONDS = Math.pow(10, $835d8ffedcec1f88$var$NANOSECOND_DIGITS);
function $835d8ffedcec1f88$export$e7ec5c82995537b1(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round(epochMillis % 1000 * $835d8ffedcec1f88$var$MILLISECONDS_TO_NANOSECONDS);
    return [
        seconds,
        nanos
    ];
}
function $835d8ffedcec1f88$export$e752b05e58096a2f() {
    var timeOrigin = (0, $8b4c50221cba5c47$export$b22daef4119238cd).timeOrigin;
    if (typeof timeOrigin !== "number") {
        var perf = (0, $8b4c50221cba5c47$export$b22daef4119238cd);
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
function $835d8ffedcec1f88$export$24b3f7dcd2848fa8(performanceNow) {
    var timeOrigin = $835d8ffedcec1f88$export$e7ec5c82995537b1($835d8ffedcec1f88$export$e752b05e58096a2f());
    var now = $835d8ffedcec1f88$export$e7ec5c82995537b1(typeof performanceNow === "number" ? performanceNow : (0, $8b4c50221cba5c47$export$b22daef4119238cd).now());
    return $835d8ffedcec1f88$export$f07bb1dbc72184c3(timeOrigin, now);
}
function $835d8ffedcec1f88$export$5f4c8a8ba0e36226(time) {
    // process.hrtime
    if ($835d8ffedcec1f88$export$390c59432f173a9f(time)) return time;
    else if (typeof time === "number") {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < $835d8ffedcec1f88$export$e752b05e58096a2f()) return $835d8ffedcec1f88$export$24b3f7dcd2848fa8(time);
        else // epoch milliseconds or performance.timeOrigin
        return $835d8ffedcec1f88$export$e7ec5c82995537b1(time);
    } else if (time instanceof Date) return $835d8ffedcec1f88$export$e7ec5c82995537b1(time.getTime());
    else throw TypeError("Invalid input type");
}
function $835d8ffedcec1f88$export$b783ad6617389e3e(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += $835d8ffedcec1f88$var$SECOND_TO_NANOSECONDS;
    }
    return [
        seconds,
        nanos
    ];
}
function $835d8ffedcec1f88$export$973c1c4fad6103e(time) {
    var precision = $835d8ffedcec1f88$var$NANOSECOND_DIGITS;
    var tmp = "" + "0".repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substr(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace("000Z", nanoString);
}
function $835d8ffedcec1f88$export$2d91441ae30ebcfc(time) {
    return time[0] * $835d8ffedcec1f88$var$SECOND_TO_NANOSECONDS + time[1];
}
function $835d8ffedcec1f88$export$30b3706e4e35edf0(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
function $835d8ffedcec1f88$export$95601fd64fa689b7(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
function $835d8ffedcec1f88$export$390c59432f173a9f(value) {
    return Array.isArray(value) && value.length === 2 && typeof value[0] === "number" && typeof value[1] === "number";
}
function $835d8ffedcec1f88$export$a5e58227c317ebb9(value) {
    return $835d8ffedcec1f88$export$390c59432f173a9f(value) || typeof value === "number" || value instanceof Date;
}
function $835d8ffedcec1f88$export$f07bb1dbc72184c3(time1, time2) {
    var out = [
        time1[0] + time2[0],
        time1[1] + time2[1]
    ];
    // Nanoseconds
    if (out[1] >= $835d8ffedcec1f88$var$SECOND_TO_NANOSECONDS) {
        out[1] -= $835d8ffedcec1f88$var$SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}

var $2bc2a8ce7f51901a$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function $2bc2a8ce7f51901a$export$c2a944331f80ae92(url, urlToMatch) {
    if (typeof urlToMatch === "string") return url === urlToMatch;
    else return !!url.match(urlToMatch);
}
function $2bc2a8ce7f51901a$export$172b5a1c42a6f83d(url, ignoredUrls) {
    var e_1, _a;
    if (!ignoredUrls) return false;
    try {
        for(var ignoredUrls_1 = $2bc2a8ce7f51901a$var$__values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()){
            var ignoreUrl = ignoredUrls_1_1.value;
            if ($2bc2a8ce7f51901a$export$c2a944331f80ae92(url, ignoreUrl)) return true;
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return false;
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $fcfc9c26e765c815$export$74be52df2d6fd28c;
(function(PerformanceTimingNames) {
    PerformanceTimingNames["CONNECT_END"] = "connectEnd";
    PerformanceTimingNames["CONNECT_START"] = "connectStart";
    PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
    PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
    PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
    PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
    PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
    PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
    PerformanceTimingNames["FETCH_START"] = "fetchStart";
    PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
    PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
    PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
    PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
    PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
    PerformanceTimingNames["REQUEST_START"] = "requestStart";
    PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
    PerformanceTimingNames["RESPONSE_START"] = "responseStart";
    PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
    PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
    PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})($fcfc9c26e765c815$export$74be52df2d6fd28c || ($fcfc9c26e765c815$export$74be52df2d6fd28c = {}));




// Used to normalize relative URLs
var $f63fd7ccae8f87ea$var$urlNormalizingAnchor;
function $f63fd7ccae8f87ea$var$getUrlNormalizingAnchor() {
    if (!$f63fd7ccae8f87ea$var$urlNormalizingAnchor) $f63fd7ccae8f87ea$var$urlNormalizingAnchor = document.createElement("a");
    return $f63fd7ccae8f87ea$var$urlNormalizingAnchor;
}
function $f63fd7ccae8f87ea$export$94df19ecb868bc1a(obj, key) {
    return key in obj;
}
function $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, performanceName, entries, refPerfName) {
    var perfTime = undefined;
    var refTime = undefined;
    if ($f63fd7ccae8f87ea$export$94df19ecb868bc1a(entries, performanceName) && typeof entries[performanceName] === "number") perfTime = entries[performanceName];
    var refName = refPerfName || (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).FETCH_START;
    // Use a reference time which is the earliest possible value so that the performance timings that are earlier should not be added
    // using FETCH START time in case no reference is provided
    if ($f63fd7ccae8f87ea$export$94df19ecb868bc1a(entries, refName) && typeof entries[refName] === "number") refTime = entries[refName];
    if (perfTime !== undefined && refTime !== undefined && perfTime >= refTime) {
        span.addEvent(performanceName, perfTime);
        return span;
    }
    return undefined;
}
function $f63fd7ccae8f87ea$export$e2385716cf129455(span, resource) {
    $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).FETCH_START, resource);
    $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).DOMAIN_LOOKUP_START, resource);
    $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).DOMAIN_LOOKUP_END, resource);
    $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).CONNECT_START, resource);
    if ($f63fd7ccae8f87ea$export$94df19ecb868bc1a(resource, "name") && resource["name"].startsWith("https:")) $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).SECURE_CONNECTION_START, resource);
    $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).CONNECT_END, resource);
    $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).REQUEST_START, resource);
    $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).RESPONSE_START, resource);
    $f63fd7ccae8f87ea$export$7e5e8f17966d37d1(span, (0, $fcfc9c26e765c815$export$74be52df2d6fd28c).RESPONSE_END, resource);
    var encodedLength = resource[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).ENCODED_BODY_SIZE];
    if (encodedLength !== undefined) span.setAttribute((0, $29f26dae6e075eca$export$58d4fbfe35e08be0), encodedLength);
    var decodedLength = resource[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).DECODED_BODY_SIZE];
    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)
    if (decodedLength !== undefined && encodedLength !== decodedLength) span.setAttribute((0, $29f26dae6e075eca$export$b9d3e41cd56c56cc), decodedLength);
}
function $f63fd7ccae8f87ea$export$5d17283e524de23c(filteredResources) {
    return filteredResources.slice().sort(function(a, b) {
        var valueA = a[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).FETCH_START];
        var valueB = b[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).FETCH_START];
        if (valueA > valueB) return 1;
        else if (valueA < valueB) return -1;
        return 0;
    });
}
/** Returns the origin if present (if in browser context). */ function $f63fd7ccae8f87ea$var$getOrigin() {
    return typeof location !== "undefined" ? location.origin : undefined;
}
function $f63fd7ccae8f87ea$export$cdcba7438a7553e8(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    if (ignoredResources === void 0) ignoredResources = new WeakSet();
    // de-relativize the URL before usage (does no harm to absolute URLs)
    var parsedSpanUrl = $f63fd7ccae8f87ea$export$7a5253c0f62e0150(spanUrl);
    spanUrl = parsedSpanUrl.toString();
    var filteredResources = $f63fd7ccae8f87ea$var$filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);
    if (filteredResources.length === 0) return {
        mainRequest: undefined
    };
    if (filteredResources.length === 1) return {
        mainRequest: filteredResources[0]
    };
    var sorted = $f63fd7ccae8f87ea$export$5d17283e524de23c(filteredResources);
    if (parsedSpanUrl.origin !== $f63fd7ccae8f87ea$var$getOrigin() && sorted.length > 1) {
        var corsPreFlightRequest = sorted[0];
        var mainRequest = $f63fd7ccae8f87ea$var$findMainRequest(sorted, corsPreFlightRequest[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).RESPONSE_END], endTimeHR);
        var responseEnd = corsPreFlightRequest[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).RESPONSE_END];
        var fetchStart = mainRequest[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).FETCH_START];
        // no corsPreFlightRequest
        if (fetchStart < responseEnd) {
            mainRequest = corsPreFlightRequest;
            corsPreFlightRequest = undefined;
        }
        return {
            corsPreFlightRequest: corsPreFlightRequest,
            mainRequest: mainRequest
        };
    } else return {
        mainRequest: filteredResources[0]
    };
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */ function $f63fd7ccae8f87ea$var$findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
    var spanEndTime = (0, $835d8ffedcec1f88$export$2d91441ae30ebcfc)(spanEndTimeHR);
    var minTime = (0, $835d8ffedcec1f88$export$2d91441ae30ebcfc)((0, $835d8ffedcec1f88$export$5f4c8a8ba0e36226)(corsPreFlightRequestEndTime));
    var mainRequest = resources[1];
    var bestGap;
    var length = resources.length;
    for(var i = 1; i < length; i++){
        var resource = resources[i];
        var resourceStartTime = (0, $835d8ffedcec1f88$export$2d91441ae30ebcfc)((0, $835d8ffedcec1f88$export$5f4c8a8ba0e36226)(resource[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).FETCH_START]));
        var resourceEndTime = (0, $835d8ffedcec1f88$export$2d91441ae30ebcfc)((0, $835d8ffedcec1f88$export$5f4c8a8ba0e36226)(resource[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).RESPONSE_END]));
        var currentGap = spanEndTime - resourceEndTime;
        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
            bestGap = currentGap;
            mainRequest = resource;
        }
    }
    return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */ function $f63fd7ccae8f87ea$var$filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    var startTime = (0, $835d8ffedcec1f88$export$2d91441ae30ebcfc)(startTimeHR);
    var endTime = (0, $835d8ffedcec1f88$export$2d91441ae30ebcfc)(endTimeHR);
    var filteredResources = resources.filter(function(resource) {
        var resourceStartTime = (0, $835d8ffedcec1f88$export$2d91441ae30ebcfc)((0, $835d8ffedcec1f88$export$5f4c8a8ba0e36226)(resource[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).FETCH_START]));
        var resourceEndTime = (0, $835d8ffedcec1f88$export$2d91441ae30ebcfc)((0, $835d8ffedcec1f88$export$5f4c8a8ba0e36226)(resource[(0, $fcfc9c26e765c815$export$74be52df2d6fd28c).RESPONSE_END]));
        return resource.initiatorType.toLowerCase() === (initiatorType || "xmlhttprequest") && resource.name === spanUrl && resourceStartTime >= startTime && resourceEndTime <= endTime;
    });
    if (filteredResources.length > 0) filteredResources = filteredResources.filter(function(resource) {
        return !ignoredResources.has(resource);
    });
    return filteredResources;
}
function $f63fd7ccae8f87ea$export$7a5253c0f62e0150(url) {
    if (typeof URL === "function") return new URL(url, typeof document !== "undefined" ? document.baseURI : typeof location !== "undefined" // Some JS runtimes (e.g. Deno) don't define this
     ? location.href : undefined);
    var element = $f63fd7ccae8f87ea$var$getUrlNormalizingAnchor();
    element.href = url;
    return element;
}
function $f63fd7ccae8f87ea$export$6535eb414fa2c8b6(url) {
    var urlLike = $f63fd7ccae8f87ea$export$7a5253c0f62e0150(url);
    return urlLike.href;
}
function $f63fd7ccae8f87ea$export$fabdebd274ccbd1c(target, optimised) {
    if (target.nodeType === Node.DOCUMENT_NODE) return "/";
    var targetValue = $f63fd7ccae8f87ea$var$getNodeValue(target, optimised);
    if (optimised && targetValue.indexOf("@id") > 0) return targetValue;
    var xpath = "";
    if (target.parentNode) xpath += $f63fd7ccae8f87ea$export$fabdebd274ccbd1c(target.parentNode, false);
    xpath += targetValue;
    return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */ function $f63fd7ccae8f87ea$var$getNodeIndex(target) {
    if (!target.parentNode) return 0;
    var allowedTypes = [
        target.nodeType
    ];
    if (target.nodeType === Node.CDATA_SECTION_NODE) allowedTypes.push(Node.TEXT_NODE);
    var elements = Array.from(target.parentNode.childNodes);
    elements = elements.filter(function(element) {
        var localName = element.localName;
        return allowedTypes.indexOf(element.nodeType) >= 0 && localName === target.localName;
    });
    if (elements.length >= 1) return elements.indexOf(target) + 1; // xpath starts from 1
    // if there are no other similar child xpath doesn't need index
    return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */ function $f63fd7ccae8f87ea$var$getNodeValue(target, optimised) {
    var nodeType = target.nodeType;
    var index = $f63fd7ccae8f87ea$var$getNodeIndex(target);
    var nodeValue = "";
    if (nodeType === Node.ELEMENT_NODE) {
        var id = target.getAttribute("id");
        if (optimised && id) return '//*[@id="' + id + '"]';
        nodeValue = target.localName;
    } else if (nodeType === Node.TEXT_NODE || nodeType === Node.CDATA_SECTION_NODE) nodeValue = "text()";
    else if (nodeType === Node.COMMENT_NODE) nodeValue = "comment()";
    else return "";
    // if index is 1 it can be omitted in xpath
    if (nodeValue && index > 1) return "/" + nodeValue + "[" + index + "]";
    return "/" + nodeValue;
}
function $f63fd7ccae8f87ea$export$c6501d7e56a5b40a(spanUrl, propagateTraceHeaderCorsUrls) {
    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];
    if (typeof propagateTraceHeaderUrls === "string" || propagateTraceHeaderUrls instanceof RegExp) propagateTraceHeaderUrls = [
        propagateTraceHeaderUrls
    ];
    var parsedSpanUrl = $f63fd7ccae8f87ea$export$7a5253c0f62e0150(spanUrl);
    if (parsedSpanUrl.origin === $f63fd7ccae8f87ea$var$getOrigin()) return true;
    else return propagateTraceHeaderUrls.some(function(propagateTraceHeaderUrl) {
        return (0, $2bc2a8ce7f51901a$export$c2a944331f80ae92)(spanUrl, propagateTraceHeaderUrl);
    });
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md
 */ var $bb570246607e635d$export$668754fb61dd076c;
(function(AttributeNames) {
    AttributeNames["COMPONENT"] = "component";
    AttributeNames["HTTP_ERROR_NAME"] = "http.error_name";
    AttributeNames["HTTP_STATUS_TEXT"] = "http.status_text";
})($bb570246607e635d$export$668754fb61dd076c || ($bb570246607e635d$export$668754fb61dd076c = {}));



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // this is autogenerated file, see scripts/version-update.js
var $e4172760070e556a$export$a4ad2735b021c132 = "0.53.0";


var $c176d395fa3c7997$exports = {};
// shim for using process in browser
var $c176d395fa3c7997$var$process = $c176d395fa3c7997$exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $c176d395fa3c7997$var$cachedSetTimeout;
var $c176d395fa3c7997$var$cachedClearTimeout;
function $c176d395fa3c7997$var$defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function $c176d395fa3c7997$var$defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") $c176d395fa3c7997$var$cachedSetTimeout = setTimeout;
        else $c176d395fa3c7997$var$cachedSetTimeout = $c176d395fa3c7997$var$defaultSetTimout;
    } catch (e) {
        $c176d395fa3c7997$var$cachedSetTimeout = $c176d395fa3c7997$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") $c176d395fa3c7997$var$cachedClearTimeout = clearTimeout;
        else $c176d395fa3c7997$var$cachedClearTimeout = $c176d395fa3c7997$var$defaultClearTimeout;
    } catch (e) {
        $c176d395fa3c7997$var$cachedClearTimeout = $c176d395fa3c7997$var$defaultClearTimeout;
    }
})();
function $c176d395fa3c7997$var$runTimeout(fun) {
    if ($c176d395fa3c7997$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($c176d395fa3c7997$var$cachedSetTimeout === $c176d395fa3c7997$var$defaultSetTimout || !$c176d395fa3c7997$var$cachedSetTimeout) && setTimeout) {
        $c176d395fa3c7997$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $c176d395fa3c7997$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $c176d395fa3c7997$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $c176d395fa3c7997$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $c176d395fa3c7997$var$runClearTimeout(marker) {
    if ($c176d395fa3c7997$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($c176d395fa3c7997$var$cachedClearTimeout === $c176d395fa3c7997$var$defaultClearTimeout || !$c176d395fa3c7997$var$cachedClearTimeout) && clearTimeout) {
        $c176d395fa3c7997$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $c176d395fa3c7997$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $c176d395fa3c7997$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $c176d395fa3c7997$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $c176d395fa3c7997$var$queue = [];
var $c176d395fa3c7997$var$draining = false;
var $c176d395fa3c7997$var$currentQueue;
var $c176d395fa3c7997$var$queueIndex = -1;
function $c176d395fa3c7997$var$cleanUpNextTick() {
    if (!$c176d395fa3c7997$var$draining || !$c176d395fa3c7997$var$currentQueue) return;
    $c176d395fa3c7997$var$draining = false;
    if ($c176d395fa3c7997$var$currentQueue.length) $c176d395fa3c7997$var$queue = $c176d395fa3c7997$var$currentQueue.concat($c176d395fa3c7997$var$queue);
    else $c176d395fa3c7997$var$queueIndex = -1;
    if ($c176d395fa3c7997$var$queue.length) $c176d395fa3c7997$var$drainQueue();
}
function $c176d395fa3c7997$var$drainQueue() {
    if ($c176d395fa3c7997$var$draining) return;
    var timeout = $c176d395fa3c7997$var$runTimeout($c176d395fa3c7997$var$cleanUpNextTick);
    $c176d395fa3c7997$var$draining = true;
    var len = $c176d395fa3c7997$var$queue.length;
    while(len){
        $c176d395fa3c7997$var$currentQueue = $c176d395fa3c7997$var$queue;
        $c176d395fa3c7997$var$queue = [];
        while(++$c176d395fa3c7997$var$queueIndex < len)if ($c176d395fa3c7997$var$currentQueue) $c176d395fa3c7997$var$currentQueue[$c176d395fa3c7997$var$queueIndex].run();
        $c176d395fa3c7997$var$queueIndex = -1;
        len = $c176d395fa3c7997$var$queue.length;
    }
    $c176d395fa3c7997$var$currentQueue = null;
    $c176d395fa3c7997$var$draining = false;
    $c176d395fa3c7997$var$runClearTimeout(timeout);
}
$c176d395fa3c7997$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $c176d395fa3c7997$var$queue.push(new $c176d395fa3c7997$var$Item(fun, args));
    if ($c176d395fa3c7997$var$queue.length === 1 && !$c176d395fa3c7997$var$draining) $c176d395fa3c7997$var$runTimeout($c176d395fa3c7997$var$drainQueue);
};
// v8 likes predictible objects
function $c176d395fa3c7997$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$c176d395fa3c7997$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$c176d395fa3c7997$var$process.title = "browser";
$c176d395fa3c7997$var$process.browser = true;
$c176d395fa3c7997$var$process.env = {};
$c176d395fa3c7997$var$process.argv = [];
$c176d395fa3c7997$var$process.version = ""; // empty string to avoid regexp issues
$c176d395fa3c7997$var$process.versions = {};
function $c176d395fa3c7997$var$noop() {}
$c176d395fa3c7997$var$process.on = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.addListener = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.once = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.off = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.removeListener = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.removeAllListeners = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.emit = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.prependListener = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.prependOnceListener = $c176d395fa3c7997$var$noop;
$c176d395fa3c7997$var$process.listeners = function(name) {
    return [];
};
$c176d395fa3c7997$var$process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
$c176d395fa3c7997$var$process.cwd = function() {
    return "/";
};
$c176d395fa3c7997$var$process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
$c176d395fa3c7997$var$process.umask = function() {
    return 0;
};


var $e1ad2252bbbbbc3e$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $e1ad2252bbbbbc3e$var$_a;
// how long to wait for observer to collect information about resources
// this is needed as event "load" is called before observer
// hard to say how long it should really wait, seems like 300ms is
// safe enough
var $e1ad2252bbbbbc3e$var$OBSERVER_WAIT_TIME_MS = 300;
var $e1ad2252bbbbbc3e$var$isNode = typeof $c176d395fa3c7997$exports === "object" && (($e1ad2252bbbbbc3e$var$_a = $c176d395fa3c7997$exports.release) === null || $e1ad2252bbbbbc3e$var$_a === void 0 ? void 0 : $e1ad2252bbbbbc3e$var$_a.name) === "node";
/**
 * This class represents a fetch plugin for auto instrumentation
 */ var $e1ad2252bbbbbc3e$export$f922a490458c98a8 = /** @class */ function(_super) {
    $e1ad2252bbbbbc3e$var$__extends(FetchInstrumentation, _super);
    function FetchInstrumentation(config) {
        if (config === void 0) config = {};
        var _this = _super.call(this, "@opentelemetry/instrumentation-fetch", (0, $e4172760070e556a$export$a4ad2735b021c132), config) || this;
        _this.component = "fetch";
        _this.version = (0, $e4172760070e556a$export$a4ad2735b021c132);
        _this.moduleName = _this.component;
        _this._usedResources = new WeakSet();
        _this._tasksCount = 0;
        return _this;
    }
    FetchInstrumentation.prototype.init = function() {};
    /**
     * Add cors pre flight child span
     * @param span
     * @param corsPreFlightRequest
     */ FetchInstrumentation.prototype._addChildSpan = function(span, corsPreFlightRequest) {
        var childSpan = this.tracer.startSpan("CORS Preflight", {
            startTime: corsPreFlightRequest[$fcfc9c26e765c815$export$74be52df2d6fd28c.FETCH_START]
        }, $d3d11f3bc96c5059$export$357889f174732d38.setSpan($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), span));
        if (!this.getConfig().ignoreNetworkEvents) $f63fd7ccae8f87ea$export$e2385716cf129455(childSpan, corsPreFlightRequest);
        childSpan.end(corsPreFlightRequest[$fcfc9c26e765c815$export$74be52df2d6fd28c.RESPONSE_END]);
    };
    /**
     * Adds more attributes to span just before ending it
     * @param span
     * @param response
     */ FetchInstrumentation.prototype._addFinalSpanAttributes = function(span, response) {
        var parsedUrl = $f63fd7ccae8f87ea$export$7a5253c0f62e0150(response.url);
        span.setAttribute((0, $29f26dae6e075eca$export$d381c7525d715413), response.status);
        if (response.statusText != null) span.setAttribute((0, $bb570246607e635d$export$668754fb61dd076c).HTTP_STATUS_TEXT, response.statusText);
        span.setAttribute((0, $29f26dae6e075eca$export$547e24d3f59a53ea), parsedUrl.host);
        span.setAttribute((0, $29f26dae6e075eca$export$a2928efa45f0acf4), parsedUrl.protocol.replace(":", ""));
        if (typeof navigator !== "undefined") span.setAttribute((0, $29f26dae6e075eca$export$7472b18f42d2d02f), navigator.userAgent);
    };
    /**
     * Add headers
     * @param options
     * @param spanUrl
     */ FetchInstrumentation.prototype._addHeaders = function(options, spanUrl) {
        if (!$f63fd7ccae8f87ea$export$c6501d7e56a5b40a(spanUrl, this.getConfig().propagateTraceHeaderCorsUrls)) {
            var headers = {};
            $341b7c0814521fae$export$3e49040daa9dba20.inject($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), headers);
            if (Object.keys(headers).length > 0) this._diag.debug("headers inject skipped due to CORS policy");
            return;
        }
        if (options instanceof Request) $341b7c0814521fae$export$3e49040daa9dba20.inject($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), options.headers, {
            set: function(h, k, v) {
                return h.set(k, typeof v === "string" ? v : String(v));
            }
        });
        else if (options.headers instanceof Headers) $341b7c0814521fae$export$3e49040daa9dba20.inject($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), options.headers, {
            set: function(h, k, v) {
                return h.set(k, typeof v === "string" ? v : String(v));
            }
        });
        else if (options.headers instanceof Map) $341b7c0814521fae$export$3e49040daa9dba20.inject($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), options.headers, {
            set: function(h, k, v) {
                return h.set(k, typeof v === "string" ? v : String(v));
            }
        });
        else {
            var headers = {};
            $341b7c0814521fae$export$3e49040daa9dba20.inject($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), headers);
            options.headers = Object.assign({}, headers, options.headers || {});
        }
    };
    /**
     * Clears the resource timings and all resources assigned with spans
     *     when {@link FetchPluginConfig.clearTimingResources} is
     *     set to true (default false)
     * @private
     */ FetchInstrumentation.prototype._clearResources = function() {
        if (this._tasksCount === 0 && this.getConfig().clearTimingResources) {
            performance.clearResourceTimings();
            this._usedResources = new WeakSet();
        }
    };
    /**
     * Creates a new span
     * @param url
     * @param options
     */ FetchInstrumentation.prototype._createSpan = function(url, options) {
        var _a;
        if (options === void 0) options = {};
        if ($2bc2a8ce7f51901a$export$172b5a1c42a6f83d(url, this.getConfig().ignoreUrls)) {
            this._diag.debug("ignoring span as url matches ignored url");
            return;
        }
        var method = (options.method || "GET").toUpperCase();
        var spanName = "HTTP " + method;
        return this.tracer.startSpan(spanName, {
            kind: $c7d276c8670f28c2$export$4da4ea8145910e8b.CLIENT,
            attributes: (_a = {}, _a[(0, $bb570246607e635d$export$668754fb61dd076c).COMPONENT] = this.moduleName, _a[0, $29f26dae6e075eca$export$5ec7d06d671a3fbe] = method, _a[0, $29f26dae6e075eca$export$2f4ef7e39c2be395] = url, _a)
        });
    };
    /**
     * Finds appropriate resource and add network events to the span
     * @param span
     * @param resourcesObserver
     * @param endTime
     */ FetchInstrumentation.prototype._findResourceAndAddNetworkEvents = function(span, resourcesObserver, endTime) {
        var resources = resourcesObserver.entries;
        if (!resources.length) {
            if (!performance.getEntriesByType) return;
            // fallback - either Observer is not available or it took longer
            // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough
            // information
            resources = performance.getEntriesByType("resource");
        }
        var resource = $f63fd7ccae8f87ea$export$cdcba7438a7553e8(resourcesObserver.spanUrl, resourcesObserver.startTime, endTime, resources, this._usedResources, "fetch");
        if (resource.mainRequest) {
            var mainRequest = resource.mainRequest;
            this._markResourceAsUsed(mainRequest);
            var corsPreFlightRequest = resource.corsPreFlightRequest;
            if (corsPreFlightRequest) {
                this._addChildSpan(span, corsPreFlightRequest);
                this._markResourceAsUsed(corsPreFlightRequest);
            }
            if (!this.getConfig().ignoreNetworkEvents) $f63fd7ccae8f87ea$export$e2385716cf129455(span, mainRequest);
        }
    };
    /**
     * Marks certain [resource]{@link PerformanceResourceTiming} when information
     * from this is used to add events to span.
     * This is done to avoid reusing the same resource again for next span
     * @param resource
     */ FetchInstrumentation.prototype._markResourceAsUsed = function(resource) {
        this._usedResources.add(resource);
    };
    /**
     * Finish span, add attributes, network events etc.
     * @param span
     * @param spanData
     * @param response
     */ FetchInstrumentation.prototype._endSpan = function(span, spanData, response) {
        var _this = this;
        var endTime = $835d8ffedcec1f88$export$e7ec5c82995537b1(Date.now());
        var performanceEndTime = $835d8ffedcec1f88$export$24b3f7dcd2848fa8();
        this._addFinalSpanAttributes(span, response);
        setTimeout(function() {
            var _a;
            (_a = spanData.observer) === null || _a === void 0 || _a.disconnect();
            _this._findResourceAndAddNetworkEvents(span, spanData, performanceEndTime);
            _this._tasksCount--;
            _this._clearResources();
            span.end(endTime);
        }, $e1ad2252bbbbbc3e$var$OBSERVER_WAIT_TIME_MS);
    };
    /**
     * Patches the constructor of fetch
     */ FetchInstrumentation.prototype._patchConstructor = function() {
        var _this = this;
        return function(original) {
            var plugin = _this;
            return function patchConstructor() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var self = this;
                var url = $f63fd7ccae8f87ea$export$7a5253c0f62e0150(args[0] instanceof Request ? args[0].url : String(args[0])).href;
                var options = args[0] instanceof Request ? args[0] : args[1] || {};
                var createdSpan = plugin._createSpan(url, options);
                if (!createdSpan) return original.apply(this, args);
                var spanData = plugin._prepareSpanData(url);
                function endSpanOnError(span, error) {
                    plugin._applyAttributesAfterFetch(span, options, error);
                    plugin._endSpan(span, spanData, {
                        status: error.status || 0,
                        statusText: error.message,
                        url: url
                    });
                }
                function endSpanOnSuccess(span, response) {
                    plugin._applyAttributesAfterFetch(span, options, response);
                    if (response.status >= 200 && response.status < 400) plugin._endSpan(span, spanData, response);
                    else plugin._endSpan(span, spanData, {
                        status: response.status,
                        statusText: response.statusText,
                        url: url
                    });
                }
                function onSuccess(span, resolve, response) {
                    try {
                        var resClone = response.clone();
                        var resClone4Hook_1 = response.clone();
                        var body = resClone.body;
                        if (body) {
                            var reader_1 = body.getReader();
                            var read_1 = function() {
                                reader_1.read().then(function(_a) {
                                    var done = _a.done;
                                    if (done) endSpanOnSuccess(span, resClone4Hook_1);
                                    else read_1();
                                }, function(error) {
                                    endSpanOnError(span, error);
                                });
                            };
                            read_1();
                        } else // some older browsers don't have .body implemented
                        endSpanOnSuccess(span, response);
                    } finally{
                        resolve(response);
                    }
                }
                function onError(span, reject, error) {
                    try {
                        endSpanOnError(span, error);
                    } finally{
                        reject(error);
                    }
                }
                return new Promise(function(resolve, reject) {
                    return $c903d3361d9a81c0$export$a078c61943f9dbbe.with($d3d11f3bc96c5059$export$357889f174732d38.setSpan($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), createdSpan), function() {
                        plugin._addHeaders(options, url);
                        plugin._tasksCount++;
                        // TypeScript complains about arrow function captured a this typed as globalThis
                        // ts(7041)
                        return original.apply(self, options instanceof Request ? [
                            options
                        ] : [
                            url,
                            options
                        ]).then(onSuccess.bind(self, createdSpan, resolve), onError.bind(self, createdSpan, reject));
                    });
                });
            };
        };
    };
    FetchInstrumentation.prototype._applyAttributesAfterFetch = function(span, request, result) {
        var _this = this;
        var applyCustomAttributesOnSpan = this.getConfig().applyCustomAttributesOnSpan;
        if (applyCustomAttributesOnSpan) (0, $efa30c613bd1c722$export$fdff7e10f8ca069e)(function() {
            return applyCustomAttributesOnSpan(span, request, result);
        }, function(error) {
            if (!error) return;
            _this._diag.error("applyCustomAttributesOnSpan", error);
        }, true);
    };
    /**
     * Prepares a span data - needed later for matching appropriate network
     *     resources
     * @param spanUrl
     */ FetchInstrumentation.prototype._prepareSpanData = function(spanUrl) {
        var startTime = $835d8ffedcec1f88$export$24b3f7dcd2848fa8();
        var entries = [];
        if (typeof PerformanceObserver !== "function") return {
            entries: entries,
            startTime: startTime,
            spanUrl: spanUrl
        };
        var observer = new PerformanceObserver(function(list) {
            var perfObsEntries = list.getEntries();
            perfObsEntries.forEach(function(entry) {
                if (entry.initiatorType === "fetch" && entry.name === spanUrl) entries.push(entry);
            });
        });
        observer.observe({
            entryTypes: [
                "resource"
            ]
        });
        return {
            entries: entries,
            observer: observer,
            startTime: startTime,
            spanUrl: spanUrl
        };
    };
    /**
     * implements enable function
     */ FetchInstrumentation.prototype.enable = function() {
        if ($e1ad2252bbbbbc3e$var$isNode) {
            // Node.js v18+ *does* have a global `fetch()`, but this package does not
            // support instrumenting it.
            this._diag.warn("this instrumentation is intended for web usage only, it does not instrument Node.js's fetch()");
            return;
        }
        if ((0, $efa30c613bd1c722$export$ec0fd572751979bc)(fetch)) {
            this._unwrap((0, $1310bbbb8d7ce057$export$5c524ddf7208c00c), "fetch");
            this._diag.debug("removing previous patch for constructor");
        }
        this._wrap((0, $1310bbbb8d7ce057$export$5c524ddf7208c00c), "fetch", this._patchConstructor());
    };
    /**
     * implements unpatch function
     */ FetchInstrumentation.prototype.disable = function() {
        if ($e1ad2252bbbbbc3e$var$isNode) return;
        this._unwrap((0, $1310bbbb8d7ce057$export$5c524ddf7208c00c), "fetch");
        this._usedResources = new WeakSet();
    };
    return FetchInstrumentation;
}((0, $0d92fcad36680644$export$436b1c2bf7e9756b));


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Updates to this file should also be replicated to @opentelemetry/api and
// @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */ /** only globals that common to node and browsers are allowed */ // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var $a41f5c369deca581$export$5c524ddf7208c00c = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof $parcel$global === "object" ? $parcel$global : {};


var $a42f90f1be61d3e9$export$be5e405504011951 = Symbol.for("io.opentelemetry.js.api.logs");
var $a42f90f1be61d3e9$export$fb1208122242c205 = (0, $a41f5c369deca581$export$5c524ddf7208c00c);
function $a42f90f1be61d3e9$export$bf9e00ce1090794f(requiredVersion, instance, fallback) {
    return function(version) {
        return version === requiredVersion ? instance : fallback;
    };
}
var $a42f90f1be61d3e9$export$41e8763f7160bb4 = 1;


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $3f4cd16d037b8e11$export$d16ba98760c74dd5 = /** @class */ function() {
    function NoopLogger() {}
    NoopLogger.prototype.emit = function(_logRecord) {};
    return NoopLogger;
}();
var $3f4cd16d037b8e11$export$f5681b99b7ff4eb3 = new $3f4cd16d037b8e11$export$d16ba98760c74dd5();


var $769f8f599ad8a874$export$8d7f6fb42e615208 = /** @class */ function() {
    function NoopLoggerProvider() {}
    NoopLoggerProvider.prototype.getLogger = function(_name, _version, _options) {
        return new (0, $3f4cd16d037b8e11$export$d16ba98760c74dd5)();
    };
    return NoopLoggerProvider;
}();
var $769f8f599ad8a874$export$ade97358fd6ba8df = new $769f8f599ad8a874$export$8d7f6fb42e615208();


var $1881c02665436c01$export$f8e63508eb6a0fc1 = /** @class */ function() {
    function LogsAPI() {}
    LogsAPI.getInstance = function() {
        if (!this._instance) this._instance = new LogsAPI();
        return this._instance;
    };
    LogsAPI.prototype.setGlobalLoggerProvider = function(provider) {
        if ((0, $a42f90f1be61d3e9$export$fb1208122242c205)[0, $a42f90f1be61d3e9$export$be5e405504011951]) return this.getLoggerProvider();
        (0, $a42f90f1be61d3e9$export$fb1208122242c205)[0, $a42f90f1be61d3e9$export$be5e405504011951] = (0, $a42f90f1be61d3e9$export$bf9e00ce1090794f)((0, $a42f90f1be61d3e9$export$41e8763f7160bb4), provider, (0, $769f8f599ad8a874$export$ade97358fd6ba8df));
        return provider;
    };
    /**
     * Returns the global logger provider.
     *
     * @returns LoggerProvider
     */ LogsAPI.prototype.getLoggerProvider = function() {
        var _a, _b;
        return (_b = (_a = (0, $a42f90f1be61d3e9$export$fb1208122242c205)[0, $a42f90f1be61d3e9$export$be5e405504011951]) === null || _a === void 0 ? void 0 : _a.call((0, $a42f90f1be61d3e9$export$fb1208122242c205), (0, $a42f90f1be61d3e9$export$41e8763f7160bb4))) !== null && _b !== void 0 ? _b : (0, $769f8f599ad8a874$export$ade97358fd6ba8df);
    };
    /**
     * Returns a logger from the global logger provider.
     *
     * @returns Logger
     */ LogsAPI.prototype.getLogger = function(name, version, options) {
        return this.getLoggerProvider().getLogger(name, version, options);
    };
    /** Remove the global logger provider */ LogsAPI.prototype.disable = function() {
        delete (0, $a42f90f1be61d3e9$export$fb1208122242c205)[0, $a42f90f1be61d3e9$export$be5e405504011951];
    };
    return LogsAPI;
}();


var $a2e9ed4a34f3ca6c$export$fa0831f497706bad = (0, $1881c02665436c01$export$f8e63508eb6a0fc1).getInstance();



var $e09480183e955b01$var$__assign = undefined && undefined.__assign || function() {
    $e09480183e955b01$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $e09480183e955b01$var$__assign.apply(this, arguments);
};
/**
 * Base abstract internal class for instrumenting node and web plugins
 */ var $e09480183e955b01$export$74c31cfd4e541b89 = /** @class */ function() {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */ this._wrap = $2e7c5eeb38eeb049$exports.wrap;
        /* Api to unwrap instrumented methods */ this._unwrap = $2e7c5eeb38eeb049$exports.unwrap;
        /* Api to mass wrap instrumented method */ this._massWrap = $2e7c5eeb38eeb049$exports.massWrap;
        /* Api to mass unwrap instrumented methods */ this._massUnwrap = $2e7c5eeb38eeb049$exports.massUnwrap;
        this.setConfig(config);
        this._diag = (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).createComponentLogger({
            namespace: instrumentationName
        });
        this._tracer = (0, $d3d11f3bc96c5059$export$357889f174732d38).getTracer(instrumentationName, instrumentationVersion);
        this._meter = (0, $5a595f8022e2c266$export$b0c5c2fac8144e54).getMeter(instrumentationName, instrumentationVersion);
        this._logger = (0, $a2e9ed4a34f3ca6c$export$fa0831f497706bad).getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */ get: function() {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */ InstrumentationAbstract.prototype.setMeterProvider = function(meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */ get: function() {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */ InstrumentationAbstract.prototype.setLoggerProvider = function(loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */ InstrumentationAbstract.prototype.getModuleDefinitions = function() {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) return [
            initResult
        ];
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */ InstrumentationAbstract.prototype._updateMetricInstruments = function() {
        return;
    };
    /* Returns InstrumentationConfig */ InstrumentationAbstract.prototype.getConfig = function() {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */ InstrumentationAbstract.prototype.setConfig = function(config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = $e09480183e955b01$var$__assign({
            enabled: true
        }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */ InstrumentationAbstract.prototype.setTracerProvider = function(tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */ get: function() {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */ InstrumentationAbstract.prototype._runSpanCustomizationHook = function(hookHandler, triggerName, span, info) {
        if (!hookHandler) return;
        try {
            hookHandler(span, info);
        } catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", {
                triggerName: triggerName
            }, e);
        }
    };
    return InstrumentationAbstract;
}();


var $6958f0f808692b9d$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Base abstract class for instrumenting web plugins
 */ var $6958f0f808692b9d$export$436b1c2bf7e9756b = /** @class */ function(_super) {
    $6958f0f808692b9d$var$__extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) _this.enable();
        return _this;
    }
    return InstrumentationBase;
}((0, $e09480183e955b01$export$74c31cfd4e541b89));

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $cdc3280ebaa07aea$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $cdc3280ebaa07aea$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
function $cdc3280ebaa07aea$export$fdff7e10f8ca069e(execute, onFinish, preventThrowingError) {
    var error;
    var result;
    try {
        result = execute();
    } catch (e) {
        error = e;
    } finally{
        onFinish(error, result);
        if (error && !preventThrowingError) // eslint-disable-next-line no-unsafe-finally
        throw error;
        // eslint-disable-next-line no-unsafe-finally
        return result;
    }
}
function $cdc3280ebaa07aea$export$75852fe3c08f1502(execute, onFinish, preventThrowingError) {
    return $cdc3280ebaa07aea$var$__awaiter(this, void 0, void 0, function() {
        var error, result, e_1;
        return $cdc3280ebaa07aea$var$__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    _a.trys.push([
                        0,
                        2,
                        3,
                        4
                    ]);
                    return [
                        4 /*yield*/ ,
                        execute()
                    ];
                case 1:
                    result = _a.sent();
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    e_1 = _a.sent();
                    error = e_1;
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 3:
                    onFinish(error, result);
                    if (error && !preventThrowingError) // eslint-disable-next-line no-unsafe-finally
                    throw error;
                    // eslint-disable-next-line no-unsafe-finally
                    return [
                        2 /*return*/ ,
                        result
                    ];
                case 4:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
function $cdc3280ebaa07aea$export$ec0fd572751979bc(func) {
    return typeof func === "function" && typeof func.__original === "function" && typeof func.__unwrap === "function" && func.__wrapped === true;
}





/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $60553d9ec4776635$export$668754fb61dd076c;
(function(AttributeNames) {
    AttributeNames["EVENT_TYPE"] = "event_type";
    AttributeNames["TARGET_ELEMENT"] = "target_element";
    AttributeNames["TARGET_XPATH"] = "target_xpath";
    AttributeNames["HTTP_URL"] = "http.url";
})($60553d9ec4776635$export$668754fb61dd076c || ($60553d9ec4776635$export$668754fb61dd076c = {}));


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // this is autogenerated file, see scripts/version-update.js
var $a1d4c38906b30b7b$export$4a03ffab3315ee34 = "0.40.0";
var $a1d4c38906b30b7b$export$b8b9d90f9e5bd72b = "@opentelemetry/instrumentation-user-interaction";


var $a6d475838e227c13$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $a6d475838e227c13$var$ZONE_CONTEXT_KEY = "OT_ZONE_CONTEXT";
var $a6d475838e227c13$var$EVENT_NAVIGATION_NAME = "Navigation:";
var $a6d475838e227c13$var$DEFAULT_EVENT_NAMES = [
    "click"
];
function $a6d475838e227c13$var$defaultShouldPreventSpanCreation() {
    return false;
}
/**
 * This class represents a UserInteraction plugin for auto instrumentation.
 * If zone.js is available then it patches the zone otherwise it patches
 * addEventListener of HTMLElement
 */ var $a6d475838e227c13$export$e96a40d3914620d1 = /** @class */ function(_super) {
    $a6d475838e227c13$var$__extends(UserInteractionInstrumentation, _super);
    function UserInteractionInstrumentation(config) {
        if (config === void 0) config = {};
        var _a;
        var _this = _super.call(this, (0, $a1d4c38906b30b7b$export$b8b9d90f9e5bd72b), (0, $a1d4c38906b30b7b$export$4a03ffab3315ee34), config) || this;
        _this.version = (0, $a1d4c38906b30b7b$export$4a03ffab3315ee34);
        _this.moduleName = "user-interaction";
        _this._spansData = new WeakMap();
        // for addEventListener/removeEventListener state
        _this._wrappedListeners = new WeakMap();
        // for event bubbling
        _this._eventsSpanMap = new WeakMap();
        _this._eventNames = new Set((_a = config === null || config === void 0 ? void 0 : config.eventNames) !== null && _a !== void 0 ? _a : $a6d475838e227c13$var$DEFAULT_EVENT_NAMES);
        _this._shouldPreventSpanCreation = typeof (config === null || config === void 0 ? void 0 : config.shouldPreventSpanCreation) === "function" ? config.shouldPreventSpanCreation : $a6d475838e227c13$var$defaultShouldPreventSpanCreation;
        return _this;
    }
    UserInteractionInstrumentation.prototype.init = function() {};
    /**
     * This will check if last task was timeout and will save the time to
     * fix the user interaction when nothing happens
     * This timeout comes from xhr plugin which is needed to collect information
     * about last xhr main request from observer
     * @param task
     * @param span
     */ UserInteractionInstrumentation.prototype._checkForTimeout = function(task, span) {
        var spanData = this._spansData.get(span);
        if (spanData) {
            if (task.source === "setTimeout") spanData.hrTimeLastTimeout = (0, $d06339726fb5d441$export$24b3f7dcd2848fa8)();
            else if (task.source !== "Promise.then" && task.source !== "setTimeout") spanData.hrTimeLastTimeout = undefined;
        }
    };
    /**
     * Controls whether or not to create a span, based on the event type.
     */ UserInteractionInstrumentation.prototype._allowEventName = function(eventName) {
        return this._eventNames.has(eventName);
    };
    /**
     * Creates a new span
     * @param element
     * @param eventName
     * @param parentSpan
     */ UserInteractionInstrumentation.prototype._createSpan = function(element, eventName, parentSpan) {
        var _a;
        if (!(element instanceof HTMLElement)) return undefined;
        if (!element.getAttribute) return undefined;
        if (element.hasAttribute("disabled")) return undefined;
        if (!this._allowEventName(eventName)) return undefined;
        var xpath = (0, $79aec9cc23f983ad$export$fabdebd274ccbd1c)(element, true);
        try {
            var span = this.tracer.startSpan(eventName, {
                attributes: (_a = {}, _a[(0, $60553d9ec4776635$export$668754fb61dd076c).EVENT_TYPE] = eventName, _a[(0, $60553d9ec4776635$export$668754fb61dd076c).TARGET_ELEMENT] = element.tagName, _a[(0, $60553d9ec4776635$export$668754fb61dd076c).TARGET_XPATH] = xpath, _a[(0, $60553d9ec4776635$export$668754fb61dd076c).HTTP_URL] = window.location.href, _a)
            }, parentSpan ? $d3d11f3bc96c5059$export$357889f174732d38.setSpan($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), parentSpan) : undefined);
            if (this._shouldPreventSpanCreation(eventName, element, span) === true) return undefined;
            this._spansData.set(span, {
                taskCount: 0
            });
            return span;
        } catch (e) {
            this._diag.error("failed to start create new user interaction span", e);
        }
        return undefined;
    };
    /**
     * Decrement number of tasks that left in zone,
     * This is needed to be able to end span when no more tasks left
     * @param span
     */ UserInteractionInstrumentation.prototype._decrementTask = function(span) {
        var spanData = this._spansData.get(span);
        if (spanData) {
            spanData.taskCount--;
            if (spanData.taskCount === 0) this._tryToEndSpan(span, spanData.hrTimeLastTimeout);
        }
    };
    /**
     * Return the current span
     * @param zone
     * @private
     */ UserInteractionInstrumentation.prototype._getCurrentSpan = function(zone) {
        var context = zone.get($a6d475838e227c13$var$ZONE_CONTEXT_KEY);
        if (context) return $d3d11f3bc96c5059$export$357889f174732d38.getSpan(context);
        return context;
    };
    /**
     * Increment number of tasks that are run within the same zone.
     *     This is needed to be able to end span when no more tasks left
     * @param span
     */ UserInteractionInstrumentation.prototype._incrementTask = function(span) {
        var spanData = this._spansData.get(span);
        if (spanData) spanData.taskCount++;
    };
    /**
     * Returns true iff we should use the patched callback; false if it's already been patched
     */ UserInteractionInstrumentation.prototype.addPatchedListener = function(on, type, listener, wrappedListener) {
        var listener2Type = this._wrappedListeners.get(listener);
        if (!listener2Type) {
            listener2Type = new Map();
            this._wrappedListeners.set(listener, listener2Type);
        }
        var element2patched = listener2Type.get(type);
        if (!element2patched) {
            element2patched = new Map();
            listener2Type.set(type, element2patched);
        }
        if (element2patched.has(on)) return false;
        element2patched.set(on, wrappedListener);
        return true;
    };
    /**
     * Returns the patched version of the callback (or undefined)
     */ UserInteractionInstrumentation.prototype.removePatchedListener = function(on, type, listener) {
        var listener2Type = this._wrappedListeners.get(listener);
        if (!listener2Type) return undefined;
        var element2patched = listener2Type.get(type);
        if (!element2patched) return undefined;
        var patched = element2patched.get(on);
        if (patched) {
            element2patched.delete(on);
            if (element2patched.size === 0) {
                listener2Type.delete(type);
                if (listener2Type.size === 0) this._wrappedListeners.delete(listener);
            }
        }
        return patched;
    };
    // utility method to deal with the Function|EventListener nature of addEventListener
    UserInteractionInstrumentation.prototype._invokeListener = function(listener, target, args) {
        if (typeof listener === "function") return listener.apply(target, args);
        else return listener.handleEvent(args[0]);
    };
    /**
     * This patches the addEventListener of HTMLElement to be able to
     * auto instrument the click events
     * This is done when zone is not available
     */ UserInteractionInstrumentation.prototype._patchAddEventListener = function() {
        var plugin = this;
        return function(original) {
            return function addEventListenerPatched(type, listener, useCapture) {
                // Forward calls with listener = null
                if (!listener) return original.call(this, type, listener, useCapture);
                // filter out null (typeof null === 'object')
                var once = useCapture && typeof useCapture === "object" && useCapture.once;
                var patchedListener = function() {
                    var _this = this;
                    var args = [];
                    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                    var parentSpan;
                    var event = args[0];
                    var target = event === null || event === void 0 ? void 0 : event.target;
                    if (event) parentSpan = plugin._eventsSpanMap.get(event);
                    if (once) plugin.removePatchedListener(this, type, listener);
                    var span = plugin._createSpan(target, type, parentSpan);
                    if (span) {
                        if (event) plugin._eventsSpanMap.set(event, span);
                        return $c903d3361d9a81c0$export$a078c61943f9dbbe.with($d3d11f3bc96c5059$export$357889f174732d38.setSpan($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), span), function() {
                            var result = plugin._invokeListener(listener, _this, args);
                            // no zone so end span immediately
                            span.end();
                            return result;
                        });
                    } else return plugin._invokeListener(listener, this, args);
                };
                if (plugin.addPatchedListener(this, type, listener, patchedListener)) return original.call(this, type, patchedListener, useCapture);
            };
        };
    };
    /**
     * This patches the removeEventListener of HTMLElement to handle the fact that
     * we patched the original callbacks
     * This is done when zone is not available
     */ UserInteractionInstrumentation.prototype._patchRemoveEventListener = function() {
        var plugin = this;
        return function(original) {
            return function removeEventListenerPatched(type, listener, useCapture) {
                var wrappedListener = plugin.removePatchedListener(this, type, listener);
                if (wrappedListener) return original.call(this, type, wrappedListener, useCapture);
                else return original.call(this, type, listener, useCapture);
            };
        };
    };
    /**
     * Most browser provide event listener api via EventTarget in prototype chain.
     * Exception to this is IE 11 which has it on the prototypes closest to EventTarget:
     *
     * * - has addEventListener in IE
     * ** - has addEventListener in all other browsers
     * ! - missing in IE
     *
     * HTMLElement -> Element -> Node * -> EventTarget **! -> Object
     * Document -> Node * -> EventTarget **! -> Object
     * Window * -> WindowProperties ! -> EventTarget **! -> Object
     */ UserInteractionInstrumentation.prototype._getPatchableEventTargets = function() {
        return window.EventTarget ? [
            EventTarget.prototype
        ] : [
            Node.prototype,
            Window.prototype
        ];
    };
    /**
     * Patches the history api
     */ UserInteractionInstrumentation.prototype._patchHistoryApi = function() {
        this._unpatchHistoryApi();
        this._wrap(history, "replaceState", this._patchHistoryMethod());
        this._wrap(history, "pushState", this._patchHistoryMethod());
        this._wrap(history, "back", this._patchHistoryMethod());
        this._wrap(history, "forward", this._patchHistoryMethod());
        this._wrap(history, "go", this._patchHistoryMethod());
    };
    /**
     * Patches the certain history api method
     */ UserInteractionInstrumentation.prototype._patchHistoryMethod = function() {
        var plugin = this;
        return function(original) {
            return function patchHistoryMethod() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var url = "" + location.pathname + location.hash + location.search;
                var result = original.apply(this, args);
                var urlAfter = "" + location.pathname + location.hash + location.search;
                if (url !== urlAfter) plugin._updateInteractionName(urlAfter);
                return result;
            };
        };
    };
    /**
     * unpatch the history api methods
     */ UserInteractionInstrumentation.prototype._unpatchHistoryApi = function() {
        if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(history.replaceState)) this._unwrap(history, "replaceState");
        if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(history.pushState)) this._unwrap(history, "pushState");
        if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(history.back)) this._unwrap(history, "back");
        if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(history.forward)) this._unwrap(history, "forward");
        if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(history.go)) this._unwrap(history, "go");
    };
    /**
     * Updates interaction span name
     * @param url
     */ UserInteractionInstrumentation.prototype._updateInteractionName = function(url) {
        var span = $d3d11f3bc96c5059$export$357889f174732d38.getSpan($c903d3361d9a81c0$export$a078c61943f9dbbe.active());
        if (span && typeof span.updateName === "function") span.updateName($a6d475838e227c13$var$EVENT_NAVIGATION_NAME + " " + url);
    };
    /**
     * Patches zone cancel task - this is done to be able to correctly
     * decrement the number of remaining tasks
     */ UserInteractionInstrumentation.prototype._patchZoneCancelTask = function() {
        var plugin = this;
        return function(original) {
            return function patchCancelTask(task) {
                var currentZone = Zone.current;
                var currentSpan = plugin._getCurrentSpan(currentZone);
                if (currentSpan && plugin._shouldCountTask(task, currentZone)) plugin._decrementTask(currentSpan);
                return original.call(this, task);
            };
        };
    };
    /**
     * Patches zone schedule task - this is done to be able to correctly
     * increment the number of tasks running within current zone but also to
     * save time in case of timeout running from xhr plugin when waiting for
     * main request from PerformanceResourceTiming
     */ UserInteractionInstrumentation.prototype._patchZoneScheduleTask = function() {
        var plugin = this;
        return function(original) {
            return function patchScheduleTask(task) {
                var currentZone = Zone.current;
                var currentSpan = plugin._getCurrentSpan(currentZone);
                if (currentSpan && plugin._shouldCountTask(task, currentZone)) {
                    plugin._incrementTask(currentSpan);
                    plugin._checkForTimeout(task, currentSpan);
                }
                return original.call(this, task);
            };
        };
    };
    /**
     * Patches zone run task - this is done to be able to create a span when
     * user interaction starts
     * @private
     */ UserInteractionInstrumentation.prototype._patchZoneRunTask = function() {
        var plugin = this;
        return function(original) {
            return function patchRunTask(task, applyThis, applyArgs) {
                var event = Array.isArray(applyArgs) && applyArgs[0] instanceof Event ? applyArgs[0] : undefined;
                var target = event === null || event === void 0 ? void 0 : event.target;
                var span;
                var activeZone = this;
                if (target) {
                    span = plugin._createSpan(target, task.eventName);
                    if (span) {
                        plugin._incrementTask(span);
                        return activeZone.run(function() {
                            try {
                                return $c903d3361d9a81c0$export$a078c61943f9dbbe.with($d3d11f3bc96c5059$export$357889f174732d38.setSpan($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), span), function() {
                                    var currentZone = Zone.current;
                                    task._zone = currentZone;
                                    return original.call(currentZone, task, applyThis, applyArgs);
                                });
                            } finally{
                                plugin._decrementTask(span);
                            }
                        });
                    }
                } else span = plugin._getCurrentSpan(activeZone);
                try {
                    return original.call(activeZone, task, applyThis, applyArgs);
                } finally{
                    if (span && plugin._shouldCountTask(task, activeZone)) plugin._decrementTask(span);
                }
            };
        };
    };
    /**
     * Decides if task should be counted.
     * @param task
     * @param currentZone
     * @private
     */ UserInteractionInstrumentation.prototype._shouldCountTask = function(task, currentZone) {
        if (task._zone) currentZone = task._zone;
        if (!currentZone || !task.data || task.data.isPeriodic) return false;
        var currentSpan = this._getCurrentSpan(currentZone);
        if (!currentSpan) return false;
        if (!this._spansData.get(currentSpan)) return false;
        return task.type === "macroTask" || task.type === "microTask";
    };
    /**
     * Will try to end span when such span still exists.
     * @param span
     * @param endTime
     * @private
     */ UserInteractionInstrumentation.prototype._tryToEndSpan = function(span, endTime) {
        if (span) {
            var spanData = this._spansData.get(span);
            if (spanData) {
                span.end(endTime);
                this._spansData.delete(span);
            }
        }
    };
    /**
     * implements enable function
     */ UserInteractionInstrumentation.prototype.enable = function() {
        var _this = this;
        var ZoneWithPrototype = this.getZoneWithPrototype();
        this._diag.debug("applying patch to", this.moduleName, this.version, "zone:", !!ZoneWithPrototype);
        if (ZoneWithPrototype) {
            if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(ZoneWithPrototype.prototype.runTask)) {
                this._unwrap(ZoneWithPrototype.prototype, "runTask");
                this._diag.debug("removing previous patch from method runTask");
            }
            if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(ZoneWithPrototype.prototype.scheduleTask)) {
                this._unwrap(ZoneWithPrototype.prototype, "scheduleTask");
                this._diag.debug("removing previous patch from method scheduleTask");
            }
            if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(ZoneWithPrototype.prototype.cancelTask)) {
                this._unwrap(ZoneWithPrototype.prototype, "cancelTask");
                this._diag.debug("removing previous patch from method cancelTask");
            }
            this._zonePatched = true;
            this._wrap(ZoneWithPrototype.prototype, "runTask", this._patchZoneRunTask());
            this._wrap(ZoneWithPrototype.prototype, "scheduleTask", this._patchZoneScheduleTask());
            this._wrap(ZoneWithPrototype.prototype, "cancelTask", this._patchZoneCancelTask());
        } else {
            this._zonePatched = false;
            var targets = this._getPatchableEventTargets();
            targets.forEach(function(target) {
                if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(target.addEventListener)) {
                    _this._unwrap(target, "addEventListener");
                    _this._diag.debug("removing previous patch from method addEventListener");
                }
                if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(target.removeEventListener)) {
                    _this._unwrap(target, "removeEventListener");
                    _this._diag.debug("removing previous patch from method removeEventListener");
                }
                _this._wrap(target, "addEventListener", _this._patchAddEventListener());
                _this._wrap(target, "removeEventListener", _this._patchRemoveEventListener());
            });
        }
        this._patchHistoryApi();
    };
    /**
     * implements unpatch function
     */ UserInteractionInstrumentation.prototype.disable = function() {
        var _this = this;
        var ZoneWithPrototype = this.getZoneWithPrototype();
        this._diag.debug("removing patch from", this.moduleName, this.version, "zone:", !!ZoneWithPrototype);
        if (ZoneWithPrototype && this._zonePatched) {
            if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(ZoneWithPrototype.prototype.runTask)) this._unwrap(ZoneWithPrototype.prototype, "runTask");
            if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(ZoneWithPrototype.prototype.scheduleTask)) this._unwrap(ZoneWithPrototype.prototype, "scheduleTask");
            if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(ZoneWithPrototype.prototype.cancelTask)) this._unwrap(ZoneWithPrototype.prototype, "cancelTask");
        } else {
            var targets = this._getPatchableEventTargets();
            targets.forEach(function(target) {
                if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(target.addEventListener)) _this._unwrap(target, "addEventListener");
                if ((0, $cdc3280ebaa07aea$export$ec0fd572751979bc)(target.removeEventListener)) _this._unwrap(target, "removeEventListener");
            });
        }
        this._unpatchHistoryApi();
    };
    /**
     * returns Zone
     */ UserInteractionInstrumentation.prototype.getZoneWithPrototype = function() {
        var _window = window;
        return _window.Zone;
    };
    return UserInteractionInstrumentation;
}((0, $6958f0f808692b9d$export$436b1c2bf7e9756b));


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Updates to this file should also be replicated to @opentelemetry/api and
// @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */ /** only globals that common to node and browsers are allowed */ // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var $16f6c16d383b19b7$export$5c524ddf7208c00c = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof $parcel$global === "object" ? $parcel$global : {};


var $ac150a2373066187$export$be5e405504011951 = Symbol.for("io.opentelemetry.js.api.logs");
var $ac150a2373066187$export$fb1208122242c205 = (0, $16f6c16d383b19b7$export$5c524ddf7208c00c);
function $ac150a2373066187$export$bf9e00ce1090794f(requiredVersion, instance, fallback) {
    return function(version) {
        return version === requiredVersion ? instance : fallback;
    };
}
var $ac150a2373066187$export$41e8763f7160bb4 = 1;


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $3c97b977ccd17712$export$d16ba98760c74dd5 = /** @class */ function() {
    function NoopLogger() {}
    NoopLogger.prototype.emit = function(_logRecord) {};
    return NoopLogger;
}();
var $3c97b977ccd17712$export$f5681b99b7ff4eb3 = new $3c97b977ccd17712$export$d16ba98760c74dd5();


var $14ee0235056278bd$export$8d7f6fb42e615208 = /** @class */ function() {
    function NoopLoggerProvider() {}
    NoopLoggerProvider.prototype.getLogger = function(_name, _version, _options) {
        return new (0, $3c97b977ccd17712$export$d16ba98760c74dd5)();
    };
    return NoopLoggerProvider;
}();
var $14ee0235056278bd$export$ade97358fd6ba8df = new $14ee0235056278bd$export$8d7f6fb42e615208();


var $f37871347baf8ec5$export$f8e63508eb6a0fc1 = /** @class */ function() {
    function LogsAPI() {}
    LogsAPI.getInstance = function() {
        if (!this._instance) this._instance = new LogsAPI();
        return this._instance;
    };
    LogsAPI.prototype.setGlobalLoggerProvider = function(provider) {
        if ((0, $ac150a2373066187$export$fb1208122242c205)[0, $ac150a2373066187$export$be5e405504011951]) return this.getLoggerProvider();
        (0, $ac150a2373066187$export$fb1208122242c205)[0, $ac150a2373066187$export$be5e405504011951] = (0, $ac150a2373066187$export$bf9e00ce1090794f)((0, $ac150a2373066187$export$41e8763f7160bb4), provider, (0, $14ee0235056278bd$export$ade97358fd6ba8df));
        return provider;
    };
    /**
     * Returns the global logger provider.
     *
     * @returns LoggerProvider
     */ LogsAPI.prototype.getLoggerProvider = function() {
        var _a, _b;
        return (_b = (_a = (0, $ac150a2373066187$export$fb1208122242c205)[0, $ac150a2373066187$export$be5e405504011951]) === null || _a === void 0 ? void 0 : _a.call((0, $ac150a2373066187$export$fb1208122242c205), (0, $ac150a2373066187$export$41e8763f7160bb4))) !== null && _b !== void 0 ? _b : (0, $14ee0235056278bd$export$ade97358fd6ba8df);
    };
    /**
     * Returns a logger from the global logger provider.
     *
     * @returns Logger
     */ LogsAPI.prototype.getLogger = function(name, version, options) {
        return this.getLoggerProvider().getLogger(name, version, options);
    };
    /** Remove the global logger provider */ LogsAPI.prototype.disable = function() {
        delete (0, $ac150a2373066187$export$fb1208122242c205)[0, $ac150a2373066187$export$be5e405504011951];
    };
    return LogsAPI;
}();


var $a653f529a8aad3b4$export$fa0831f497706bad = (0, $f37871347baf8ec5$export$f8e63508eb6a0fc1).getInstance();



var $3bf12c444e721650$var$__assign = undefined && undefined.__assign || function() {
    $3bf12c444e721650$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $3bf12c444e721650$var$__assign.apply(this, arguments);
};
/**
 * Base abstract internal class for instrumenting node and web plugins
 */ var $3bf12c444e721650$export$74c31cfd4e541b89 = /** @class */ function() {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */ this._wrap = $2e7c5eeb38eeb049$exports.wrap;
        /* Api to unwrap instrumented methods */ this._unwrap = $2e7c5eeb38eeb049$exports.unwrap;
        /* Api to mass wrap instrumented method */ this._massWrap = $2e7c5eeb38eeb049$exports.massWrap;
        /* Api to mass unwrap instrumented methods */ this._massUnwrap = $2e7c5eeb38eeb049$exports.massUnwrap;
        this.setConfig(config);
        this._diag = (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).createComponentLogger({
            namespace: instrumentationName
        });
        this._tracer = (0, $d3d11f3bc96c5059$export$357889f174732d38).getTracer(instrumentationName, instrumentationVersion);
        this._meter = (0, $5a595f8022e2c266$export$b0c5c2fac8144e54).getMeter(instrumentationName, instrumentationVersion);
        this._logger = (0, $a653f529a8aad3b4$export$fa0831f497706bad).getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */ get: function() {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */ InstrumentationAbstract.prototype.setMeterProvider = function(meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */ get: function() {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */ InstrumentationAbstract.prototype.setLoggerProvider = function(loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */ InstrumentationAbstract.prototype.getModuleDefinitions = function() {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) return [
            initResult
        ];
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */ InstrumentationAbstract.prototype._updateMetricInstruments = function() {
        return;
    };
    /* Returns InstrumentationConfig */ InstrumentationAbstract.prototype.getConfig = function() {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */ InstrumentationAbstract.prototype.setConfig = function(config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = $3bf12c444e721650$var$__assign({
            enabled: true
        }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */ InstrumentationAbstract.prototype.setTracerProvider = function(tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */ get: function() {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */ InstrumentationAbstract.prototype._runSpanCustomizationHook = function(hookHandler, triggerName, span, info) {
        if (!hookHandler) return;
        try {
            hookHandler(span, info);
        } catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", {
                triggerName: triggerName
            }, e);
        }
    };
    return InstrumentationAbstract;
}();


var $022eea96f6f9b7e7$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Base abstract class for instrumenting web plugins
 */ var $022eea96f6f9b7e7$export$436b1c2bf7e9756b = /** @class */ function(_super) {
    $022eea96f6f9b7e7$var$__extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) _this.enable();
        return _this;
    }
    return InstrumentationBase;
}((0, $3bf12c444e721650$export$74c31cfd4e541b89));

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $3f5504cd42fb1cc8$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $3f5504cd42fb1cc8$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
function $3f5504cd42fb1cc8$export$fdff7e10f8ca069e(execute, onFinish, preventThrowingError) {
    var error;
    var result;
    try {
        result = execute();
    } catch (e) {
        error = e;
    } finally{
        onFinish(error, result);
        if (error && !preventThrowingError) // eslint-disable-next-line no-unsafe-finally
        throw error;
        // eslint-disable-next-line no-unsafe-finally
        return result;
    }
}
function $3f5504cd42fb1cc8$export$75852fe3c08f1502(execute, onFinish, preventThrowingError) {
    return $3f5504cd42fb1cc8$var$__awaiter(this, void 0, void 0, function() {
        var error, result, e_1;
        return $3f5504cd42fb1cc8$var$__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    _a.trys.push([
                        0,
                        2,
                        3,
                        4
                    ]);
                    return [
                        4 /*yield*/ ,
                        execute()
                    ];
                case 1:
                    result = _a.sent();
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    e_1 = _a.sent();
                    error = e_1;
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 3:
                    onFinish(error, result);
                    if (error && !preventThrowingError) // eslint-disable-next-line no-unsafe-finally
                    throw error;
                    // eslint-disable-next-line no-unsafe-finally
                    return [
                        2 /*return*/ ,
                        result
                    ];
                case 4:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
function $3f5504cd42fb1cc8$export$ec0fd572751979bc(func) {
    return typeof func === "function" && typeof func.__original === "function" && typeof func.__unwrap === "function" && func.__wrapped === true;
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $f46376581a1cda5e$export$b22daef4119238cd = performance;


var $0357f81f63553f10$var$NANOSECOND_DIGITS = 9;
var $0357f81f63553f10$var$NANOSECOND_DIGITS_IN_MILLIS = 6;
var $0357f81f63553f10$var$MILLISECONDS_TO_NANOSECONDS = Math.pow(10, $0357f81f63553f10$var$NANOSECOND_DIGITS_IN_MILLIS);
var $0357f81f63553f10$var$SECOND_TO_NANOSECONDS = Math.pow(10, $0357f81f63553f10$var$NANOSECOND_DIGITS);
function $0357f81f63553f10$export$e7ec5c82995537b1(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round(epochMillis % 1000 * $0357f81f63553f10$var$MILLISECONDS_TO_NANOSECONDS);
    return [
        seconds,
        nanos
    ];
}
function $0357f81f63553f10$export$e752b05e58096a2f() {
    var timeOrigin = (0, $f46376581a1cda5e$export$b22daef4119238cd).timeOrigin;
    if (typeof timeOrigin !== "number") {
        var perf = (0, $f46376581a1cda5e$export$b22daef4119238cd);
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
function $0357f81f63553f10$export$24b3f7dcd2848fa8(performanceNow) {
    var timeOrigin = $0357f81f63553f10$export$e7ec5c82995537b1($0357f81f63553f10$export$e752b05e58096a2f());
    var now = $0357f81f63553f10$export$e7ec5c82995537b1(typeof performanceNow === "number" ? performanceNow : (0, $f46376581a1cda5e$export$b22daef4119238cd).now());
    return $0357f81f63553f10$export$f07bb1dbc72184c3(timeOrigin, now);
}
function $0357f81f63553f10$export$5f4c8a8ba0e36226(time) {
    // process.hrtime
    if ($0357f81f63553f10$export$390c59432f173a9f(time)) return time;
    else if (typeof time === "number") {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < $0357f81f63553f10$export$e752b05e58096a2f()) return $0357f81f63553f10$export$24b3f7dcd2848fa8(time);
        else // epoch milliseconds or performance.timeOrigin
        return $0357f81f63553f10$export$e7ec5c82995537b1(time);
    } else if (time instanceof Date) return $0357f81f63553f10$export$e7ec5c82995537b1(time.getTime());
    else throw TypeError("Invalid input type");
}
function $0357f81f63553f10$export$b783ad6617389e3e(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += $0357f81f63553f10$var$SECOND_TO_NANOSECONDS;
    }
    return [
        seconds,
        nanos
    ];
}
function $0357f81f63553f10$export$973c1c4fad6103e(time) {
    var precision = $0357f81f63553f10$var$NANOSECOND_DIGITS;
    var tmp = "" + "0".repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substr(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace("000Z", nanoString);
}
function $0357f81f63553f10$export$2d91441ae30ebcfc(time) {
    return time[0] * $0357f81f63553f10$var$SECOND_TO_NANOSECONDS + time[1];
}
function $0357f81f63553f10$export$30b3706e4e35edf0(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
function $0357f81f63553f10$export$95601fd64fa689b7(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
function $0357f81f63553f10$export$390c59432f173a9f(value) {
    return Array.isArray(value) && value.length === 2 && typeof value[0] === "number" && typeof value[1] === "number";
}
function $0357f81f63553f10$export$a5e58227c317ebb9(value) {
    return $0357f81f63553f10$export$390c59432f173a9f(value) || typeof value === "number" || value instanceof Date;
}
function $0357f81f63553f10$export$f07bb1dbc72184c3(time1, time2) {
    var out = [
        time1[0] + time2[0],
        time1[1] + time2[1]
    ];
    // Nanoseconds
    if (out[1] >= $0357f81f63553f10$var$SECOND_TO_NANOSECONDS) {
        out[1] -= $0357f81f63553f10$var$SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}

var $ec29b56c7093ddcf$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function $ec29b56c7093ddcf$export$c2a944331f80ae92(url, urlToMatch) {
    if (typeof urlToMatch === "string") return url === urlToMatch;
    else return !!url.match(urlToMatch);
}
function $ec29b56c7093ddcf$export$172b5a1c42a6f83d(url, ignoredUrls) {
    var e_1, _a;
    if (!ignoredUrls) return false;
    try {
        for(var ignoredUrls_1 = $ec29b56c7093ddcf$var$__values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()){
            var ignoreUrl = ignoredUrls_1_1.value;
            if ($ec29b56c7093ddcf$export$c2a944331f80ae92(url, ignoreUrl)) return true;
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return false;
}



/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $9e9c842a1669b3e5$export$74be52df2d6fd28c;
(function(PerformanceTimingNames) {
    PerformanceTimingNames["CONNECT_END"] = "connectEnd";
    PerformanceTimingNames["CONNECT_START"] = "connectStart";
    PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
    PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
    PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
    PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
    PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
    PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
    PerformanceTimingNames["FETCH_START"] = "fetchStart";
    PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
    PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
    PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
    PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
    PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
    PerformanceTimingNames["REQUEST_START"] = "requestStart";
    PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
    PerformanceTimingNames["RESPONSE_START"] = "responseStart";
    PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
    PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
    PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})($9e9c842a1669b3e5$export$74be52df2d6fd28c || ($9e9c842a1669b3e5$export$74be52df2d6fd28c = {}));




// Used to normalize relative URLs
var $4976d50419349d13$var$urlNormalizingAnchor;
function $4976d50419349d13$var$getUrlNormalizingAnchor() {
    if (!$4976d50419349d13$var$urlNormalizingAnchor) $4976d50419349d13$var$urlNormalizingAnchor = document.createElement("a");
    return $4976d50419349d13$var$urlNormalizingAnchor;
}
function $4976d50419349d13$export$94df19ecb868bc1a(obj, key) {
    return key in obj;
}
function $4976d50419349d13$export$7e5e8f17966d37d1(span, performanceName, entries, refPerfName) {
    var perfTime = undefined;
    var refTime = undefined;
    if ($4976d50419349d13$export$94df19ecb868bc1a(entries, performanceName) && typeof entries[performanceName] === "number") perfTime = entries[performanceName];
    var refName = refPerfName || (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).FETCH_START;
    // Use a reference time which is the earliest possible value so that the performance timings that are earlier should not be added
    // using FETCH START time in case no reference is provided
    if ($4976d50419349d13$export$94df19ecb868bc1a(entries, refName) && typeof entries[refName] === "number") refTime = entries[refName];
    if (perfTime !== undefined && refTime !== undefined && perfTime >= refTime) {
        span.addEvent(performanceName, perfTime);
        return span;
    }
    return undefined;
}
function $4976d50419349d13$export$e2385716cf129455(span, resource) {
    $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).FETCH_START, resource);
    $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).DOMAIN_LOOKUP_START, resource);
    $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).DOMAIN_LOOKUP_END, resource);
    $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).CONNECT_START, resource);
    if ($4976d50419349d13$export$94df19ecb868bc1a(resource, "name") && resource["name"].startsWith("https:")) $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).SECURE_CONNECTION_START, resource);
    $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).CONNECT_END, resource);
    $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).REQUEST_START, resource);
    $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).RESPONSE_START, resource);
    $4976d50419349d13$export$7e5e8f17966d37d1(span, (0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).RESPONSE_END, resource);
    var encodedLength = resource[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).ENCODED_BODY_SIZE];
    if (encodedLength !== undefined) span.setAttribute((0, $29f26dae6e075eca$export$58d4fbfe35e08be0), encodedLength);
    var decodedLength = resource[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).DECODED_BODY_SIZE];
    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)
    if (decodedLength !== undefined && encodedLength !== decodedLength) span.setAttribute((0, $29f26dae6e075eca$export$b9d3e41cd56c56cc), decodedLength);
}
function $4976d50419349d13$export$5d17283e524de23c(filteredResources) {
    return filteredResources.slice().sort(function(a, b) {
        var valueA = a[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).FETCH_START];
        var valueB = b[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).FETCH_START];
        if (valueA > valueB) return 1;
        else if (valueA < valueB) return -1;
        return 0;
    });
}
/** Returns the origin if present (if in browser context). */ function $4976d50419349d13$var$getOrigin() {
    return typeof location !== "undefined" ? location.origin : undefined;
}
function $4976d50419349d13$export$cdcba7438a7553e8(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    if (ignoredResources === void 0) ignoredResources = new WeakSet();
    // de-relativize the URL before usage (does no harm to absolute URLs)
    var parsedSpanUrl = $4976d50419349d13$export$7a5253c0f62e0150(spanUrl);
    spanUrl = parsedSpanUrl.toString();
    var filteredResources = $4976d50419349d13$var$filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);
    if (filteredResources.length === 0) return {
        mainRequest: undefined
    };
    if (filteredResources.length === 1) return {
        mainRequest: filteredResources[0]
    };
    var sorted = $4976d50419349d13$export$5d17283e524de23c(filteredResources);
    if (parsedSpanUrl.origin !== $4976d50419349d13$var$getOrigin() && sorted.length > 1) {
        var corsPreFlightRequest = sorted[0];
        var mainRequest = $4976d50419349d13$var$findMainRequest(sorted, corsPreFlightRequest[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).RESPONSE_END], endTimeHR);
        var responseEnd = corsPreFlightRequest[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).RESPONSE_END];
        var fetchStart = mainRequest[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).FETCH_START];
        // no corsPreFlightRequest
        if (fetchStart < responseEnd) {
            mainRequest = corsPreFlightRequest;
            corsPreFlightRequest = undefined;
        }
        return {
            corsPreFlightRequest: corsPreFlightRequest,
            mainRequest: mainRequest
        };
    } else return {
        mainRequest: filteredResources[0]
    };
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */ function $4976d50419349d13$var$findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
    var spanEndTime = (0, $0357f81f63553f10$export$2d91441ae30ebcfc)(spanEndTimeHR);
    var minTime = (0, $0357f81f63553f10$export$2d91441ae30ebcfc)((0, $0357f81f63553f10$export$5f4c8a8ba0e36226)(corsPreFlightRequestEndTime));
    var mainRequest = resources[1];
    var bestGap;
    var length = resources.length;
    for(var i = 1; i < length; i++){
        var resource = resources[i];
        var resourceStartTime = (0, $0357f81f63553f10$export$2d91441ae30ebcfc)((0, $0357f81f63553f10$export$5f4c8a8ba0e36226)(resource[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).FETCH_START]));
        var resourceEndTime = (0, $0357f81f63553f10$export$2d91441ae30ebcfc)((0, $0357f81f63553f10$export$5f4c8a8ba0e36226)(resource[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).RESPONSE_END]));
        var currentGap = spanEndTime - resourceEndTime;
        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
            bestGap = currentGap;
            mainRequest = resource;
        }
    }
    return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */ function $4976d50419349d13$var$filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    var startTime = (0, $0357f81f63553f10$export$2d91441ae30ebcfc)(startTimeHR);
    var endTime = (0, $0357f81f63553f10$export$2d91441ae30ebcfc)(endTimeHR);
    var filteredResources = resources.filter(function(resource) {
        var resourceStartTime = (0, $0357f81f63553f10$export$2d91441ae30ebcfc)((0, $0357f81f63553f10$export$5f4c8a8ba0e36226)(resource[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).FETCH_START]));
        var resourceEndTime = (0, $0357f81f63553f10$export$2d91441ae30ebcfc)((0, $0357f81f63553f10$export$5f4c8a8ba0e36226)(resource[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).RESPONSE_END]));
        return resource.initiatorType.toLowerCase() === (initiatorType || "xmlhttprequest") && resource.name === spanUrl && resourceStartTime >= startTime && resourceEndTime <= endTime;
    });
    if (filteredResources.length > 0) filteredResources = filteredResources.filter(function(resource) {
        return !ignoredResources.has(resource);
    });
    return filteredResources;
}
function $4976d50419349d13$export$7a5253c0f62e0150(url) {
    if (typeof URL === "function") return new URL(url, typeof document !== "undefined" ? document.baseURI : typeof location !== "undefined" // Some JS runtimes (e.g. Deno) don't define this
     ? location.href : undefined);
    var element = $4976d50419349d13$var$getUrlNormalizingAnchor();
    element.href = url;
    return element;
}
function $4976d50419349d13$export$6535eb414fa2c8b6(url) {
    var urlLike = $4976d50419349d13$export$7a5253c0f62e0150(url);
    return urlLike.href;
}
function $4976d50419349d13$export$fabdebd274ccbd1c(target, optimised) {
    if (target.nodeType === Node.DOCUMENT_NODE) return "/";
    var targetValue = $4976d50419349d13$var$getNodeValue(target, optimised);
    if (optimised && targetValue.indexOf("@id") > 0) return targetValue;
    var xpath = "";
    if (target.parentNode) xpath += $4976d50419349d13$export$fabdebd274ccbd1c(target.parentNode, false);
    xpath += targetValue;
    return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */ function $4976d50419349d13$var$getNodeIndex(target) {
    if (!target.parentNode) return 0;
    var allowedTypes = [
        target.nodeType
    ];
    if (target.nodeType === Node.CDATA_SECTION_NODE) allowedTypes.push(Node.TEXT_NODE);
    var elements = Array.from(target.parentNode.childNodes);
    elements = elements.filter(function(element) {
        var localName = element.localName;
        return allowedTypes.indexOf(element.nodeType) >= 0 && localName === target.localName;
    });
    if (elements.length >= 1) return elements.indexOf(target) + 1; // xpath starts from 1
    // if there are no other similar child xpath doesn't need index
    return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */ function $4976d50419349d13$var$getNodeValue(target, optimised) {
    var nodeType = target.nodeType;
    var index = $4976d50419349d13$var$getNodeIndex(target);
    var nodeValue = "";
    if (nodeType === Node.ELEMENT_NODE) {
        var id = target.getAttribute("id");
        if (optimised && id) return '//*[@id="' + id + '"]';
        nodeValue = target.localName;
    } else if (nodeType === Node.TEXT_NODE || nodeType === Node.CDATA_SECTION_NODE) nodeValue = "text()";
    else if (nodeType === Node.COMMENT_NODE) nodeValue = "comment()";
    else return "";
    // if index is 1 it can be omitted in xpath
    if (nodeValue && index > 1) return "/" + nodeValue + "[" + index + "]";
    return "/" + nodeValue;
}
function $4976d50419349d13$export$c6501d7e56a5b40a(spanUrl, propagateTraceHeaderCorsUrls) {
    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];
    if (typeof propagateTraceHeaderUrls === "string" || propagateTraceHeaderUrls instanceof RegExp) propagateTraceHeaderUrls = [
        propagateTraceHeaderUrls
    ];
    var parsedSpanUrl = $4976d50419349d13$export$7a5253c0f62e0150(spanUrl);
    if (parsedSpanUrl.origin === $4976d50419349d13$var$getOrigin()) return true;
    else return propagateTraceHeaderUrls.some(function(propagateTraceHeaderUrl) {
        return (0, $ec29b56c7093ddcf$export$c2a944331f80ae92)(spanUrl, propagateTraceHeaderUrl);
    });
}


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $1b32a9779c72d22f$export$3fd36d65bf762270;
(function(EventNames) {
    EventNames["METHOD_OPEN"] = "open";
    EventNames["METHOD_SEND"] = "send";
    EventNames["EVENT_ABORT"] = "abort";
    EventNames["EVENT_ERROR"] = "error";
    EventNames["EVENT_LOAD"] = "loaded";
    EventNames["EVENT_TIMEOUT"] = "timeout";
})($1b32a9779c72d22f$export$3fd36d65bf762270 || ($1b32a9779c72d22f$export$3fd36d65bf762270 = {}));


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // this is autogenerated file, see scripts/version-update.js
var $9f717dd2a40a5877$export$a4ad2735b021c132 = "0.53.0";


/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md
 */ var $2c2a0c767c4347a0$export$668754fb61dd076c;
(function(AttributeNames) {
    AttributeNames["HTTP_STATUS_TEXT"] = "http.status_text";
})($2c2a0c767c4347a0$export$668754fb61dd076c || ($2c2a0c767c4347a0$export$668754fb61dd076c = {}));


var $a34dbbc372f6a977$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
// how long to wait for observer to collect information about resources
// this is needed as event "load" is called before observer
// hard to say how long it should really wait, seems like 300ms is
// safe enough
var $a34dbbc372f6a977$var$OBSERVER_WAIT_TIME_MS = 300;
/**
 * This class represents a XMLHttpRequest plugin for auto instrumentation
 */ var $a34dbbc372f6a977$export$35de81ee328d915e = /** @class */ function(_super) {
    $a34dbbc372f6a977$var$__extends(XMLHttpRequestInstrumentation, _super);
    function XMLHttpRequestInstrumentation(config) {
        if (config === void 0) config = {};
        var _this = _super.call(this, "@opentelemetry/instrumentation-xml-http-request", (0, $9f717dd2a40a5877$export$a4ad2735b021c132), config) || this;
        _this.component = "xml-http-request";
        _this.version = (0, $9f717dd2a40a5877$export$a4ad2735b021c132);
        _this.moduleName = _this.component;
        _this._tasksCount = 0;
        _this._xhrMem = new WeakMap();
        _this._usedResources = new WeakSet();
        return _this;
    }
    XMLHttpRequestInstrumentation.prototype.init = function() {};
    /**
     * Adds custom headers to XMLHttpRequest
     * @param xhr
     * @param spanUrl
     * @private
     */ XMLHttpRequestInstrumentation.prototype._addHeaders = function(xhr, spanUrl) {
        var url = (0, $4976d50419349d13$export$7a5253c0f62e0150)(spanUrl).href;
        if (!(0, $4976d50419349d13$export$c6501d7e56a5b40a)(url, this.getConfig().propagateTraceHeaderCorsUrls)) {
            var headers_1 = {};
            $341b7c0814521fae$export$3e49040daa9dba20.inject($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), headers_1);
            if (Object.keys(headers_1).length > 0) this._diag.debug("headers inject skipped due to CORS policy");
            return;
        }
        var headers = {};
        $341b7c0814521fae$export$3e49040daa9dba20.inject($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), headers);
        Object.keys(headers).forEach(function(key) {
            xhr.setRequestHeader(key, String(headers[key]));
        });
    };
    /**
     * Add cors pre flight child span
     * @param span
     * @param corsPreFlightRequest
     * @private
     */ XMLHttpRequestInstrumentation.prototype._addChildSpan = function(span, corsPreFlightRequest) {
        var _this = this;
        $c903d3361d9a81c0$export$a078c61943f9dbbe.with($d3d11f3bc96c5059$export$357889f174732d38.setSpan($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), span), function() {
            var childSpan = _this.tracer.startSpan("CORS Preflight", {
                startTime: corsPreFlightRequest[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).FETCH_START]
            });
            if (!_this.getConfig().ignoreNetworkEvents) (0, $4976d50419349d13$export$e2385716cf129455)(childSpan, corsPreFlightRequest);
            childSpan.end(corsPreFlightRequest[(0, $9e9c842a1669b3e5$export$74be52df2d6fd28c).RESPONSE_END]);
        });
    };
    /**
     * Add attributes when span is going to end
     * @param span
     * @param xhr
     * @param spanUrl
     * @private
     */ XMLHttpRequestInstrumentation.prototype._addFinalSpanAttributes = function(span, xhrMem, spanUrl) {
        if (typeof spanUrl === "string") {
            var parsedUrl = (0, $4976d50419349d13$export$7a5253c0f62e0150)(spanUrl);
            if (xhrMem.status !== undefined) span.setAttribute((0, $29f26dae6e075eca$export$d381c7525d715413), xhrMem.status);
            if (xhrMem.statusText !== undefined) span.setAttribute((0, $2c2a0c767c4347a0$export$668754fb61dd076c).HTTP_STATUS_TEXT, xhrMem.statusText);
            span.setAttribute((0, $29f26dae6e075eca$export$547e24d3f59a53ea), parsedUrl.host);
            span.setAttribute((0, $29f26dae6e075eca$export$a2928efa45f0acf4), parsedUrl.protocol.replace(":", ""));
            // @TODO do we want to collect this or it will be collected earlier once only or
            //    maybe when parent span is not available ?
            span.setAttribute((0, $29f26dae6e075eca$export$7472b18f42d2d02f), navigator.userAgent);
        }
    };
    XMLHttpRequestInstrumentation.prototype._applyAttributesAfterXHR = function(span, xhr) {
        var _this = this;
        var applyCustomAttributesOnSpan = this.getConfig().applyCustomAttributesOnSpan;
        if (typeof applyCustomAttributesOnSpan === "function") (0, $3f5504cd42fb1cc8$export$fdff7e10f8ca069e)(function() {
            return applyCustomAttributesOnSpan(span, xhr);
        }, function(error) {
            if (!error) return;
            _this._diag.error("applyCustomAttributesOnSpan", error);
        }, true);
    };
    /**
     * will collect information about all resources created
     * between "send" and "end" with additional waiting for main resource
     * @param xhr
     * @param spanUrl
     * @private
     */ XMLHttpRequestInstrumentation.prototype._addResourceObserver = function(xhr, spanUrl) {
        var xhrMem = this._xhrMem.get(xhr);
        if (!xhrMem || typeof PerformanceObserver !== "function" || typeof PerformanceResourceTiming !== "function") return;
        xhrMem.createdResources = {
            observer: new PerformanceObserver(function(list) {
                var entries = list.getEntries();
                var parsedUrl = (0, $4976d50419349d13$export$7a5253c0f62e0150)(spanUrl);
                entries.forEach(function(entry) {
                    if (entry.initiatorType === "xmlhttprequest" && entry.name === parsedUrl.href) {
                        if (xhrMem.createdResources) xhrMem.createdResources.entries.push(entry);
                    }
                });
            }),
            entries: []
        };
        xhrMem.createdResources.observer.observe({
            entryTypes: [
                "resource"
            ]
        });
    };
    /**
     * Clears the resource timings and all resources assigned with spans
     *     when {@link XMLHttpRequestInstrumentationConfig.clearTimingResources} is
     *     set to true (default false)
     * @private
     */ XMLHttpRequestInstrumentation.prototype._clearResources = function() {
        if (this._tasksCount === 0 && this.getConfig().clearTimingResources) {
            (0, $f46376581a1cda5e$export$b22daef4119238cd).clearResourceTimings();
            this._xhrMem = new WeakMap();
            this._usedResources = new WeakSet();
        }
    };
    /**
     * Finds appropriate resource and add network events to the span
     * @param span
     */ XMLHttpRequestInstrumentation.prototype._findResourceAndAddNetworkEvents = function(xhrMem, span, spanUrl, startTime, endTime) {
        if (!spanUrl || !startTime || !endTime || !xhrMem.createdResources) return;
        var resources = xhrMem.createdResources.entries;
        if (!resources || !resources.length) // fallback - either Observer is not available or it took longer
        // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough
        // information
        // ts thinks this is the perf_hooks module, but it is the browser performance api
        resources = (0, $f46376581a1cda5e$export$b22daef4119238cd).getEntriesByType("resource");
        var resource = (0, $4976d50419349d13$export$cdcba7438a7553e8)((0, $4976d50419349d13$export$7a5253c0f62e0150)(spanUrl).href, startTime, endTime, resources, this._usedResources);
        if (resource.mainRequest) {
            var mainRequest = resource.mainRequest;
            this._markResourceAsUsed(mainRequest);
            var corsPreFlightRequest = resource.corsPreFlightRequest;
            if (corsPreFlightRequest) {
                this._addChildSpan(span, corsPreFlightRequest);
                this._markResourceAsUsed(corsPreFlightRequest);
            }
            if (!this.getConfig().ignoreNetworkEvents) (0, $4976d50419349d13$export$e2385716cf129455)(span, mainRequest);
        }
    };
    /**
     * Removes the previous information about span.
     * This might happened when the same xhr is used again.
     * @param xhr
     * @private
     */ XMLHttpRequestInstrumentation.prototype._cleanPreviousSpanInformation = function(xhr) {
        var xhrMem = this._xhrMem.get(xhr);
        if (xhrMem) {
            var callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;
            if (callbackToRemoveEvents) callbackToRemoveEvents();
            this._xhrMem.delete(xhr);
        }
    };
    /**
     * Creates a new span when method "open" is called
     * @param xhr
     * @param url
     * @param method
     * @private
     */ XMLHttpRequestInstrumentation.prototype._createSpan = function(xhr, url, method) {
        var _a;
        if ((0, $ec29b56c7093ddcf$export$172b5a1c42a6f83d)(url, this.getConfig().ignoreUrls)) {
            this._diag.debug("ignoring span as url matches ignored url");
            return;
        }
        var spanName = method.toUpperCase();
        var currentSpan = this.tracer.startSpan(spanName, {
            kind: $c7d276c8670f28c2$export$4da4ea8145910e8b.CLIENT,
            attributes: (_a = {}, _a[0, $29f26dae6e075eca$export$5ec7d06d671a3fbe] = method, _a[0, $29f26dae6e075eca$export$2f4ef7e39c2be395] = (0, $4976d50419349d13$export$7a5253c0f62e0150)(url).toString(), _a)
        });
        currentSpan.addEvent((0, $1b32a9779c72d22f$export$3fd36d65bf762270).METHOD_OPEN);
        this._cleanPreviousSpanInformation(xhr);
        this._xhrMem.set(xhr, {
            span: currentSpan,
            spanUrl: url
        });
        return currentSpan;
    };
    /**
     * Marks certain [resource]{@link PerformanceResourceTiming} when information
     * from this is used to add events to span.
     * This is done to avoid reusing the same resource again for next span
     * @param resource
     * @private
     */ XMLHttpRequestInstrumentation.prototype._markResourceAsUsed = function(resource) {
        this._usedResources.add(resource);
    };
    /**
     * Patches the method open
     * @private
     */ XMLHttpRequestInstrumentation.prototype._patchOpen = function() {
        var _this = this;
        return function(original) {
            var plugin = _this;
            return function patchOpen() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var method = args[0];
                var url = args[1];
                plugin._createSpan(this, url, method);
                return original.apply(this, args);
            };
        };
    };
    /**
     * Patches the method send
     * @private
     */ XMLHttpRequestInstrumentation.prototype._patchSend = function() {
        var plugin = this;
        function endSpanTimeout(eventName, xhrMem, performanceEndTime, endTime) {
            var callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;
            if (typeof callbackToRemoveEvents === "function") callbackToRemoveEvents();
            var span = xhrMem.span, spanUrl = xhrMem.spanUrl, sendStartTime = xhrMem.sendStartTime;
            if (span) {
                plugin._findResourceAndAddNetworkEvents(xhrMem, span, spanUrl, sendStartTime, performanceEndTime);
                span.addEvent(eventName, endTime);
                plugin._addFinalSpanAttributes(span, xhrMem, spanUrl);
                span.end(endTime);
                plugin._tasksCount--;
            }
            plugin._clearResources();
        }
        function endSpan(eventName, xhr) {
            var xhrMem = plugin._xhrMem.get(xhr);
            if (!xhrMem) return;
            xhrMem.status = xhr.status;
            xhrMem.statusText = xhr.statusText;
            plugin._xhrMem.delete(xhr);
            if (xhrMem.span) plugin._applyAttributesAfterXHR(xhrMem.span, xhr);
            var performanceEndTime = (0, $0357f81f63553f10$export$24b3f7dcd2848fa8)();
            var endTime = Date.now();
            // the timeout is needed as observer doesn't have yet information
            // when event "load" is called. Also the time may differ depends on
            // browser and speed of computer
            setTimeout(function() {
                endSpanTimeout(eventName, xhrMem, performanceEndTime, endTime);
            }, $a34dbbc372f6a977$var$OBSERVER_WAIT_TIME_MS);
        }
        function onError() {
            endSpan((0, $1b32a9779c72d22f$export$3fd36d65bf762270).EVENT_ERROR, this);
        }
        function onAbort() {
            endSpan((0, $1b32a9779c72d22f$export$3fd36d65bf762270).EVENT_ABORT, this);
        }
        function onTimeout() {
            endSpan((0, $1b32a9779c72d22f$export$3fd36d65bf762270).EVENT_TIMEOUT, this);
        }
        function onLoad() {
            if (this.status < 299) endSpan((0, $1b32a9779c72d22f$export$3fd36d65bf762270).EVENT_LOAD, this);
            else endSpan((0, $1b32a9779c72d22f$export$3fd36d65bf762270).EVENT_ERROR, this);
        }
        function unregister(xhr) {
            xhr.removeEventListener("abort", onAbort);
            xhr.removeEventListener("error", onError);
            xhr.removeEventListener("load", onLoad);
            xhr.removeEventListener("timeout", onTimeout);
            var xhrMem = plugin._xhrMem.get(xhr);
            if (xhrMem) xhrMem.callbackToRemoveEvents = undefined;
        }
        return function(original) {
            return function patchSend() {
                var _this = this;
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var xhrMem = plugin._xhrMem.get(this);
                if (!xhrMem) return original.apply(this, args);
                var currentSpan = xhrMem.span;
                var spanUrl = xhrMem.spanUrl;
                if (currentSpan && spanUrl) $c903d3361d9a81c0$export$a078c61943f9dbbe.with($d3d11f3bc96c5059$export$357889f174732d38.setSpan($c903d3361d9a81c0$export$a078c61943f9dbbe.active(), currentSpan), function() {
                    plugin._tasksCount++;
                    xhrMem.sendStartTime = (0, $0357f81f63553f10$export$24b3f7dcd2848fa8)();
                    currentSpan.addEvent((0, $1b32a9779c72d22f$export$3fd36d65bf762270).METHOD_SEND);
                    _this.addEventListener("abort", onAbort);
                    _this.addEventListener("error", onError);
                    _this.addEventListener("load", onLoad);
                    _this.addEventListener("timeout", onTimeout);
                    xhrMem.callbackToRemoveEvents = function() {
                        unregister(_this);
                        if (xhrMem.createdResources) xhrMem.createdResources.observer.disconnect();
                    };
                    plugin._addHeaders(_this, spanUrl);
                    plugin._addResourceObserver(_this, spanUrl);
                });
                return original.apply(this, args);
            };
        };
    };
    /**
     * implements enable function
     */ XMLHttpRequestInstrumentation.prototype.enable = function() {
        this._diag.debug("applying patch to", this.moduleName, this.version);
        if ((0, $3f5504cd42fb1cc8$export$ec0fd572751979bc)(XMLHttpRequest.prototype.open)) {
            this._unwrap(XMLHttpRequest.prototype, "open");
            this._diag.debug("removing previous patch from method open");
        }
        if ((0, $3f5504cd42fb1cc8$export$ec0fd572751979bc)(XMLHttpRequest.prototype.send)) {
            this._unwrap(XMLHttpRequest.prototype, "send");
            this._diag.debug("removing previous patch from method send");
        }
        this._wrap(XMLHttpRequest.prototype, "open", this._patchOpen());
        this._wrap(XMLHttpRequest.prototype, "send", this._patchSend());
    };
    /**
     * implements disable function
     */ XMLHttpRequestInstrumentation.prototype.disable = function() {
        this._diag.debug("removing patch from", this.moduleName, this.version);
        this._unwrap(XMLHttpRequest.prototype, "open");
        this._unwrap(XMLHttpRequest.prototype, "send");
        this._tasksCount = 0;
        this._xhrMem = new WeakMap();
        this._usedResources = new WeakSet();
    };
    return XMLHttpRequestInstrumentation;
}((0, $022eea96f6f9b7e7$export$436b1c2bf7e9756b));


var $8df99eb3798ae4b9$var$InstrumentationMap = {
    "@opentelemetry/instrumentation-document-load": (0, $61e5230b21382ad6$export$381e8ef2e310d2c3),
    "@opentelemetry/instrumentation-fetch": (0, $e1ad2252bbbbbc3e$export$f922a490458c98a8),
    "@opentelemetry/instrumentation-user-interaction": (0, $a6d475838e227c13$export$e96a40d3914620d1),
    "@opentelemetry/instrumentation-xml-http-request": (0, $a34dbbc372f6a977$export$35de81ee328d915e)
};
function $8df99eb3798ae4b9$export$2b6a8cc738089ff9(inputConfigs) {
    var _a;
    if (inputConfigs === void 0) inputConfigs = {};
    for(var _i = 0, _b = Object.keys(inputConfigs); _i < _b.length; _i++){
        var name_1 = _b[_i];
        if (!Object.prototype.hasOwnProperty.call($8df99eb3798ae4b9$var$InstrumentationMap, name_1)) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error('Provided instrumentation name "' + name_1 + '" not found');
            continue;
        }
    }
    var instrumentations = [];
    for(var _c = 0, _d = Object.keys($8df99eb3798ae4b9$var$InstrumentationMap); _c < _d.length; _c++){
        var name_2 = _d[_c];
        var Instance = $8df99eb3798ae4b9$var$InstrumentationMap[name_2];
        // Defaults are defined by the instrumentation itself
        var userConfig = (_a = inputConfigs[name_2]) !== null && _a !== void 0 ? _a : {};
        if (userConfig.enabled === false) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("Disabling instrumentation for " + name_2);
            continue;
        }
        try {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).debug("Loading instrumentation for " + name_2);
            instrumentations.push(new Instance(userConfig));
        } catch (e) {
            (0, $f846a5aaeff49c57$export$c042e7c2f59bc046).error(e);
        }
    }
    return instrumentations;
}





/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ //----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2
//----------------------------------------------------------------------------------------------------------
/**
 * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason
 *
 * @example acquired
 *
 * @example request_canceled
 */ var $8d2dec6b2f42fe45$export$df376702a339c094 = "aspnetcore.rate_limiting.result";
var $8d2dec6b2f42fe45$export$e160ee3fb23dd21e = "acquired";
var $8d2dec6b2f42fe45$export$336cf096763833a3 = "endpoint_limiter";
var $8d2dec6b2f42fe45$export$ee99d6c8d66ba053 = "global_limiter";
var $8d2dec6b2f42fe45$export$d4525b0bcb1802a6 = "request_canceled";
var $8d2dec6b2f42fe45$export$f0cc9f40fa472996 = "telemetry.sdk.language";
var $8d2dec6b2f42fe45$export$76253579e9fea8e3 = "cpp";
var $8d2dec6b2f42fe45$export$4163d8f19c62acfe = "dotnet";
var $8d2dec6b2f42fe45$export$d735f65160d35019 = "erlang";
var $8d2dec6b2f42fe45$export$1dde175b7d1c8a44 = "go";
var $8d2dec6b2f42fe45$export$73150af2f1f383fa = "java";
var $8d2dec6b2f42fe45$export$1b3cb919ea0daa1c = "nodejs";
var $8d2dec6b2f42fe45$export$1a3ac4d13e9292be = "php";
var $8d2dec6b2f42fe45$export$5734868f06d7b5c8 = "python";
var $8d2dec6b2f42fe45$export$b7bb3f8171ef2aa3 = "ruby";
var $8d2dec6b2f42fe45$export$713f4fffa2875054 = "rust";
var $8d2dec6b2f42fe45$export$8d08f2cb0d9fd722 = "swift";
var $8d2dec6b2f42fe45$export$2f063992689fdf64 = "webjs";
var $8d2dec6b2f42fe45$export$8f719441032e7a01 = "telemetry.sdk.name";
var $8d2dec6b2f42fe45$export$5fe5e8dd061ec635 = "telemetry.sdk.version";
var $8d2dec6b2f42fe45$export$e15ee6ced4b4d793 = "aspnetcore.diagnostics.handler.type";
var $8d2dec6b2f42fe45$export$f82340eb6f7ee4fc = "aspnetcore.diagnostics.exception.result";
var $8d2dec6b2f42fe45$export$cda1f266e1fc5b3f = "aborted";
var $8d2dec6b2f42fe45$export$f59ec205fdfe6400 = "handled";
var $8d2dec6b2f42fe45$export$b427e935fd6651ab = "skipped";
var $8d2dec6b2f42fe45$export$7a0c380cad26f867 = "unhandled";
var $8d2dec6b2f42fe45$export$d6be6e9a073ccba5 = "aspnetcore.rate_limiting.policy";
var $8d2dec6b2f42fe45$export$746fc3f900d45c45 = "aspnetcore.request.is_unhandled";
var $8d2dec6b2f42fe45$export$bcd5f0f8484c3bc0 = "aspnetcore.routing.is_fallback";
var $8d2dec6b2f42fe45$export$d181153b8bdfa0b6 = "aspnetcore.routing.match_status";
var $8d2dec6b2f42fe45$export$ca7f093befa342d4 = "failure";
var $8d2dec6b2f42fe45$export$ae1a39d3a4050746 = "success";
var $8d2dec6b2f42fe45$export$d68d146ff79c04a8 = "client.address";
var $8d2dec6b2f42fe45$export$98967a53baad5eec = "client.port";
var $8d2dec6b2f42fe45$export$27bc5d0fa190eb39 = "error.type";
var $8d2dec6b2f42fe45$export$c00e2e224ae81dcc = "_OTHER";
var $8d2dec6b2f42fe45$export$5afa65f3c67a6da5 = "exception.escaped";
var $8d2dec6b2f42fe45$export$ab4513c1b55519b5 = "exception.message";
var $8d2dec6b2f42fe45$export$9b74e4928364b671 = "exception.stacktrace";
var $8d2dec6b2f42fe45$export$85da07cb5d867763 = "exception.type";
var $8d2dec6b2f42fe45$export$6dc05c1a4ea7d452 = function(key) {
    return "http.request.header." + key;
};
var $8d2dec6b2f42fe45$export$c950c48d651d36f6 = "http.request.method";
var $8d2dec6b2f42fe45$export$475d0b6904c72522 = "_OTHER";
var $8d2dec6b2f42fe45$export$1d0475e0429ecc7a = "CONNECT";
var $8d2dec6b2f42fe45$export$f5009fc3b2e116f6 = "DELETE";
var $8d2dec6b2f42fe45$export$b37eb57f1c0ae17e = "GET";
var $8d2dec6b2f42fe45$export$cfad2d23aef0a595 = "HEAD";
var $8d2dec6b2f42fe45$export$ffb5e83a22c8414 = "OPTIONS";
var $8d2dec6b2f42fe45$export$c4e10ea4e2b3375 = "PATCH";
var $8d2dec6b2f42fe45$export$ca259afc8ad50e83 = "POST";
var $8d2dec6b2f42fe45$export$a8e9778ce76ecdaa = "PUT";
var $8d2dec6b2f42fe45$export$81cc82dc1804c06e = "TRACE";
var $8d2dec6b2f42fe45$export$b4706f4398125cd2 = "http.request.method_original";
var $8d2dec6b2f42fe45$export$44a2b6455db2b082 = "http.request.resend_count";
var $8d2dec6b2f42fe45$export$a3227fcde36256b7 = function(key) {
    return "http.response.header." + key;
};
var $8d2dec6b2f42fe45$export$4f9cc9c1e7b4e832 = "http.response.status_code";
var $8d2dec6b2f42fe45$export$ee724a749950397e = "http.route";
var $8d2dec6b2f42fe45$export$9633601338584456 = "jvm.gc.action";
var $8d2dec6b2f42fe45$export$81a9f72367df0211 = "jvm.gc.name";
var $8d2dec6b2f42fe45$export$27fb7cfe62c0cad7 = "jvm.memory.pool.name";
var $8d2dec6b2f42fe45$export$c9dfa04abbde6209 = "jvm.memory.type";
var $8d2dec6b2f42fe45$export$5eceb6c6d9c4a2b1 = "heap";
var $8d2dec6b2f42fe45$export$fb42d239cc164326 = "non_heap";
var $8d2dec6b2f42fe45$export$b9f4735680b4c618 = "jvm.thread.daemon";
var $8d2dec6b2f42fe45$export$49cfe86a143a90f4 = "jvm.thread.state";
var $8d2dec6b2f42fe45$export$4d1c8eb785b37946 = "blocked";
var $8d2dec6b2f42fe45$export$438d3b92d604d3c1 = "new";
var $8d2dec6b2f42fe45$export$efbf4822176b787e = "runnable";
var $8d2dec6b2f42fe45$export$10d62496862243a3 = "terminated";
var $8d2dec6b2f42fe45$export$54c3957659069067 = "timed_waiting";
var $8d2dec6b2f42fe45$export$97de93f28bd98f0c = "waiting";
var $8d2dec6b2f42fe45$export$122a3f3d92b58f2d = "network.local.address";
var $8d2dec6b2f42fe45$export$dd3d00f8681df0ce = "network.local.port";
var $8d2dec6b2f42fe45$export$28b7676252843fab = "network.peer.address";
var $8d2dec6b2f42fe45$export$9fb532b0fee2b1f1 = "network.peer.port";
var $8d2dec6b2f42fe45$export$dee59b686a2846ec = "network.protocol.name";
var $8d2dec6b2f42fe45$export$d98f8d975600c0d0 = "network.protocol.version";
var $8d2dec6b2f42fe45$export$7616c996937a34bc = "network.transport";
var $8d2dec6b2f42fe45$export$f4431576993bcf7a = "pipe";
var $8d2dec6b2f42fe45$export$169e124b418d088f = "quic";
var $8d2dec6b2f42fe45$export$26ef76391bdfab1b = "tcp";
var $8d2dec6b2f42fe45$export$a1d89d523a38f571 = "udp";
var $8d2dec6b2f42fe45$export$19b3a90274118dec = "unix";
var $8d2dec6b2f42fe45$export$9ce893eda94da085 = "network.type";
var $8d2dec6b2f42fe45$export$1c0032dd042c0036 = "ipv4";
var $8d2dec6b2f42fe45$export$2e20616f92e0c61 = "ipv6";
var $8d2dec6b2f42fe45$export$c0272561abab91e2 = "otel.scope.name";
var $8d2dec6b2f42fe45$export$f34b883f266e7940 = "otel.scope.version";
var $8d2dec6b2f42fe45$export$1ce3678560a98f66 = "otel.status_code";
var $8d2dec6b2f42fe45$export$91e9746558fdb3eb = "ERROR";
var $8d2dec6b2f42fe45$export$88d70046bd134963 = "OK";
var $8d2dec6b2f42fe45$export$bb722bc34dbbae55 = "otel.status_description";
var $8d2dec6b2f42fe45$export$a5acaa0dbc823e02 = "server.address";
var $8d2dec6b2f42fe45$export$b7822882ad829476 = "server.port";
var $8d2dec6b2f42fe45$export$84187ab40ae4fa9c = "service.name";
var $8d2dec6b2f42fe45$export$262ef07bab967f36 = "service.version";
var $8d2dec6b2f42fe45$export$d52213f71e0d6fe9 = "signalr.connection.status";
var $8d2dec6b2f42fe45$export$1941a43dd05c1796 = "app_shutdown";
var $8d2dec6b2f42fe45$export$339985f783caddd3 = "normal_closure";
var $8d2dec6b2f42fe45$export$5dbce0c170853f5d = "timeout";
var $8d2dec6b2f42fe45$export$344eec4d4360b8c9 = "signalr.transport";
var $8d2dec6b2f42fe45$export$c9ad321a279e5110 = "long_polling";
var $8d2dec6b2f42fe45$export$ade38f22da951337 = "server_sent_events";
var $8d2dec6b2f42fe45$export$cb9a023ecee30642 = "web_sockets";
var $8d2dec6b2f42fe45$export$f00e0b7bc579cfe4 = "url.fragment";
var $8d2dec6b2f42fe45$export$ef7da4fb774e8a84 = "url.full";
var $8d2dec6b2f42fe45$export$36f670b9709ab2f8 = "url.path";
var $8d2dec6b2f42fe45$export$55ce97b387061dd1 = "url.query";
var $8d2dec6b2f42fe45$export$d1d5ca1ca02801e6 = "url.scheme";
var $8d2dec6b2f42fe45$export$11d4f8ef7be26b3d = "user_agent.original";


const $c9f3acea5fa71cd0$var$MY_VERSION = "0.10.23";
function $c9f3acea5fa71cd0$var$initializeTracing(params /* { apiKey: string, serviceName: string } */ ) {
    if (!params) params = {};
    if (!params.apiKey) throw new Error("Usage: initializeTracing({ apiKey: 'honeycomb api key', serviceName: 'name of this service' })");
    if (!params.serviceName) {
        console.log("No service name provided to initializeTracing. Defaulting to unknown_service");
        params.serviceName = "unknown_service";
    }
    function addContentLengthToSpan(span, resource) {
        // this works for document-load.
        const encodedLength = resource.encodedBodySize;
        if (encodedLength !== undefined) span.setAttribute("http.request_content_length", encodedLength); // SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH
        const decodedLength = resource.decodedBodySize;
        if (decodedLength !== undefined && encodedLength !== decodedLength) span.setAttribute("http.response_content_length_uncompressed", decodedLength);
    }
    const configDefaults = {
        ignoreNetworkEvents: true
    };
    const sdk = new (0, $15ec3fbdf86c3b66$export$ebb653038a1b822d)({
        // endpoint: "https://api.eu1.honeycomb.io/v1/traces", // Send to EU instance of Honeycomb. Defaults to sending to US instance.
        localVisualizations: params.debug,
        instrumentations: [
            (0, $8df99eb3798ae4b9$export$2b6a8cc738089ff9)({
                // Loads custom configuration for xml-http-request instrumentation.
                "@opentelemetry/instrumentation-xml-http-request": configDefaults,
                "@opentelemetry/instrumentation-fetch": configDefaults,
                "@opentelemetry/instrumentation-document-load": {
                    applyCustomAttributesOnSpan: {
                        resourceFetch: addContentLengthToSpan
                    },
                    ...configDefaults
                }
            })
        ],
        ...params
    });
    sdk.start();
    if (params.debug) $c9f3acea5fa71cd0$var$sendTestSpan();
    // TODO: Can i get parcel to import a json file?
    console.log(`Tracing initialized, ${$c9f3acea5fa71cd0$var$MY_VERSION} at last update of this message`);
}
function $c9f3acea5fa71cd0$var$sendTestSpan() {
    const span = $c9f3acea5fa71cd0$var$getTracer({
        name: "hny-otel-web test",
        version: $c9f3acea5fa71cd0$var$MY_VERSION
    }).startSpan("test span");
    console.log("Sending test span", span.spanContext());
    span.end();
}
function $c9f3acea5fa71cd0$var$activeContext() {
    return (0, $c903d3361d9a81c0$export$a078c61943f9dbbe).active();
}
function $c9f3acea5fa71cd0$var$setAttributes(attributes) {
    const span = (0, $d3d11f3bc96c5059$export$357889f174732d38).getActiveSpan();
    span && span.setAttributes(attributes); // maybe there is no active span, nbd
}
function $c9f3acea5fa71cd0$var$getTracer(inputTracer) {
    let tracerName, tracerVersion;
    if (typeof inputTracer === "string") tracerName = inputTracer;
    else {
        tracerName = inputTracer.name || "missing tracer name";
        tracerVersion = inputTracer.version;
    }
    return (0, $d3d11f3bc96c5059$export$357889f174732d38).getTracer(tracerName, tracerVersion);
}
function $c9f3acea5fa71cd0$var$inSpan(inputTracer, spanName, fn, context) {
    if (fn === undefined || typeof fn !== "function") throw new Error("USAGE: inSpan(tracerName, spanName, () => { ... })");
    return $c9f3acea5fa71cd0$var$getTracer(inputTracer).startActiveSpan(spanName, {}, context || null, (span)=>{
        try {
            return fn(span);
        } catch (err) {
            span.setStatus({
                code: 2,
                message: err.message
            });
            span.recordException(err);
            throw err;
        } finally{
            span.end();
        }
    });
}
async function $c9f3acea5fa71cd0$var$inSpanAsync(inputTracer, spanName, fn, context) {
    if (fn === undefined) console.log("USAGE: inSpanAsync(tracerName, spanName, async () => { ... })");
    return $c9f3acea5fa71cd0$var$getTracer(inputTracer).startActiveSpan(spanName, {}, context, async (span)=>{
        try {
            return await fn(span);
        } catch (err) {
            span.setStatus({
                code: 2,
                message: err.message
            });
            span.recordException(err);
            throw err;
        } finally{
            span.end();
        }
    });
}
function $c9f3acea5fa71cd0$var$recordException(exception, additionalAttributes) {
    const span = (0, $d3d11f3bc96c5059$export$357889f174732d38).getActiveSpan();
    // I took this from the sdk-trace-base, except I'm gonna support additional attributes.
    // https://github.com/open-telemetry/opentelemetry-js/blob/90afa2850c0690f7a18ecc511c04927a3183490b/packages/opentelemetry-sdk-trace-base/src/Span.ts#L321
    const attributes = {};
    if (typeof exception === "string") attributes[0, $8d2dec6b2f42fe45$export$ab4513c1b55519b5] = exception;
    else if (exception) {
        if (exception.code) attributes[0, $8d2dec6b2f42fe45$export$85da07cb5d867763] = exception.code.toString();
        else if (exception.name) attributes[0, $8d2dec6b2f42fe45$export$85da07cb5d867763] = exception.name;
        if (exception.message) attributes[0, $8d2dec6b2f42fe45$export$ab4513c1b55519b5] = exception.message;
        if (exception.stack) attributes[0, $8d2dec6b2f42fe45$export$9b74e4928364b671] = exception.stack;
    }
    const allAttributes = {
        ...attributes,
        ...additionalAttributes
    };
    span.addEvent("exception", allAttributes);
    span.setStatus({
        code: 2,
        message: attributes[0, $8d2dec6b2f42fe45$export$ab4513c1b55519b5]
    });
}
function $c9f3acea5fa71cd0$var$addSpanEvent(message, attributes) {
    const span = (0, $d3d11f3bc96c5059$export$357889f174732d38).getActiveSpan();
    span.addEvent(message, attributes);
}
function $c9f3acea5fa71cd0$var$inChildSpan(inputTracer, spanName, spanContext, fn) {
    if (!spanContext || !spanContext.spanId || !spanContext.traceId || spanContext.traceFlags === undefined) console.log("inChildSpan: I need a SpanContext as my third argument");
    const usefulContext = (0, $d3d11f3bc96c5059$export$357889f174732d38).setSpanContext((0, $c903d3361d9a81c0$export$a078c61943f9dbbe).active(), spanContext);
    console.log("the new context has", usefulContext);
    return $c9f3acea5fa71cd0$var$inSpan(inputTracer, spanName, fn, usefulContext);
}
const $c9f3acea5fa71cd0$export$8e18f7a649cdb84b = {
    initializeTracing: $c9f3acea5fa71cd0$var$initializeTracing,
    setAttributes: $c9f3acea5fa71cd0$var$setAttributes,
    inSpan: $c9f3acea5fa71cd0$var$inSpan,
    inSpanAsync: $c9f3acea5fa71cd0$var$inSpanAsync,
    recordException: $c9f3acea5fa71cd0$var$recordException,
    addSpanEvent: $c9f3acea5fa71cd0$var$addSpanEvent,
    activeContext: $c9f3acea5fa71cd0$var$activeContext,
    inChildSpan: $c9f3acea5fa71cd0$var$inChildSpan
};
// Now for the REAL export
window.Hny = $c9f3acea5fa71cd0$export$8e18f7a649cdb84b;

})();
